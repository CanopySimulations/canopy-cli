//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Canopy.Api.Client
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IAccountSettingsClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAccountSettingsResult> GetAsync(string tenantId, string userId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetAccountSettingsResult> GetAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutAsync(string tenantId, string userId, UpdatedAccountSettings updatedAccountSettingsData);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task PutAsync(string tenantId, string userId, UpdatedAccountSettings updatedAccountSettingsData, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class AccountSettingsClient : CanopyApiClient, IAccountSettingsClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AccountSettingsClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetAccountSettingsResult> GetAsync(string tenantId, string userId)
        {
            return GetAsync(tenantId, userId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetAccountSettingsResult> GetAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("account-settings/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetAccountSettingsResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetAccountSettingsResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetAccountSettingsResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutAsync(string tenantId, string userId, UpdatedAccountSettings updatedAccountSettingsData)
        {
            return PutAsync(tenantId, userId, updatedAccountSettingsData, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PutAsync(string tenantId, string userId, UpdatedAccountSettings updatedAccountSettingsData, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("account-settings/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updatedAccountSettingsData, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IAvailabilityClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AvailabilityResult> GetAsync();

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<AvailabilityResult> GetAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> HeadAsync();

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> HeadAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class AvailabilityClient : CanopyApiClient, IAvailabilityClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AvailabilityClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AvailabilityResult> GetAsync()
        {
            return GetAsync(System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<AvailabilityResult> GetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Availability");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(AvailabilityResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AvailabilityResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(AvailabilityResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> HeadAsync()
        {
            return HeadAsync(System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> HeadAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Availability");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("HEAD");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IConfigClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigAsync(string targetSimVersion, UpgradeConfigData data, string subTreePath);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigAsync(string targetSimVersion, UpgradeConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigsQueryResult> GetConfigsAsync(string tenantId, string configType, string filter, string subTreePath);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetConfigsQueryResult> GetConfigsAsync(string tenantId, string configType, string filter, string subTreePath, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigNamesQueryResult> GetConfigNamesAsync(string tenantId, string configType, string resultType, string subTreePath, string simVersion);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetConfigNamesQueryResult> GetConfigNamesAsync(string tenantId, string configType, string resultType, string subTreePath, string simVersion, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PostConfigAsync(string tenantId, string userId, NewConfigData data, string subTreePath);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<string> PostConfigAsync(string tenantId, string userId, NewConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsAsync(string tenantId, string userId, NewBatchConfigData data, string subTreePath);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsAsync(string tenantId, string userId, NewBatchConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigAsync(string tenantId, string userId, string configId, string subTreePath, string simVersion);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigAsync(string tenantId, string userId, string configId, string subTreePath, string simVersion, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutConfigAsync(string tenantId, string userId, string configId, UpdatedConfigData data, string subTreePath);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task PutConfigAsync(string tenantId, string userId, string configId, UpdatedConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteConfigAsync(string tenantId, string userId, string configId, string subTreePath);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteConfigAsync(string tenantId, string userId, string configId, string subTreePath, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ConfigClient : CanopyApiClient, IConfigClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ConfigClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigAsync(string targetSimVersion, UpgradeConfigData data, string subTreePath)
        {
            return UpgradeConfigAsync(targetSimVersion, data, subTreePath, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigAsync(string targetSimVersion, UpgradeConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (targetSimVersion == null)
                throw new System.ArgumentNullException("targetSimVersion");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/upgrade/{targetSimVersion}?");
            urlBuilder_.Replace("{targetSimVersion}", System.Uri.EscapeDataString(System.Convert.ToString(targetSimVersion, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null) urlBuilder_.Append("subTreePath=").Append(System.Uri.EscapeDataString(System.Convert.ToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(UpgradeConfigQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UpgradeConfigQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(UpgradeConfigQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetConfigsQueryResult> GetConfigsAsync(string tenantId, string configType, string filter, string subTreePath)
        {
            return GetConfigsAsync(tenantId, configType, filter, subTreePath, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetConfigsQueryResult> GetConfigsAsync(string tenantId, string configType, string filter, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (configType == null)
                throw new System.ArgumentNullException("configType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("configType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(configType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (filter != null) urlBuilder_.Append("filter=").Append(System.Uri.EscapeDataString(System.Convert.ToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (subTreePath != null) urlBuilder_.Append("subTreePath=").Append(System.Uri.EscapeDataString(System.Convert.ToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetConfigsQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetConfigsQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetConfigsQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetConfigNamesQueryResult> GetConfigNamesAsync(string tenantId, string configType, string resultType, string subTreePath, string simVersion)
        {
            return GetConfigNamesAsync(tenantId, configType, resultType, subTreePath, simVersion, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetConfigNamesQueryResult> GetConfigNamesAsync(string tenantId, string configType, string resultType, string subTreePath, string simVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (configType == null)
                throw new System.ArgumentNullException("configType");

            if (resultType == null)
                throw new System.ArgumentNullException("resultType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/names?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("configType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(configType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("resultType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(resultType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (subTreePath != null) urlBuilder_.Append("subTreePath=").Append(System.Uri.EscapeDataString(System.Convert.ToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (simVersion != null) urlBuilder_.Append("simVersion=").Append(System.Uri.EscapeDataString(System.Convert.ToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetConfigNamesQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetConfigNamesQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetConfigNamesQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> PostConfigAsync(string tenantId, string userId, NewConfigData data, string subTreePath)
        {
            return PostConfigAsync(tenantId, userId, data, subTreePath, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<string> PostConfigAsync(string tenantId, string userId, NewConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null) urlBuilder_.Append("subTreePath=").Append(System.Uri.EscapeDataString(System.Convert.ToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(string);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsAsync(string tenantId, string userId, NewBatchConfigData data, string subTreePath)
        {
            return PostConfigsAsync(tenantId, userId, data, subTreePath, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsAsync(string tenantId, string userId, NewBatchConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}/batch?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null) urlBuilder_.Append("subTreePath=").Append(System.Uri.EscapeDataString(System.Convert.ToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BatchCreateConfigsResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BatchCreateConfigsResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(BatchCreateConfigsResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigAsync(string tenantId, string userId, string configId, string subTreePath, string simVersion)
        {
            return GetConfigAsync(tenantId, userId, configId, subTreePath, simVersion, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigAsync(string tenantId, string userId, string configId, string subTreePath, string simVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (configId == null)
                throw new System.ArgumentNullException("configId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}/{configId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(System.Convert.ToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null) urlBuilder_.Append("subTreePath=").Append(System.Uri.EscapeDataString(System.Convert.ToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (simVersion != null) urlBuilder_.Append("simVersion=").Append(System.Uri.EscapeDataString(System.Convert.ToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetConfigQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetConfigQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetConfigQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutConfigAsync(string tenantId, string userId, string configId, UpdatedConfigData data, string subTreePath)
        {
            return PutConfigAsync(tenantId, userId, configId, data, subTreePath, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PutConfigAsync(string tenantId, string userId, string configId, UpdatedConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (configId == null)
                throw new System.ArgumentNullException("configId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}/{configId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(System.Convert.ToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null) urlBuilder_.Append("subTreePath=").Append(System.Uri.EscapeDataString(System.Convert.ToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteConfigAsync(string tenantId, string userId, string configId, string subTreePath)
        {
            return DeleteConfigAsync(tenantId, userId, configId, subTreePath, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeleteConfigAsync(string tenantId, string userId, string configId, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (configId == null)
                throw new System.ArgumentNullException("configId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}/{configId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(System.Convert.ToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null) urlBuilder_.Append("subTreePath=").Append(System.Uri.EscapeDataString(System.Convert.ToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IEndToEndTestInboxClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetLatestMessageAndClearMailboxAsync(string mailboxName);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> GetLatestMessageAndClearMailboxAsync(string mailboxName, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class EndToEndTestInboxClient : CanopyApiClient, IEndToEndTestInboxClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public EndToEndTestInboxClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetLatestMessageAndClearMailboxAsync(string mailboxName)
        {
            return GetLatestMessageAndClearMailboxAsync(mailboxName, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> GetLatestMessageAndClearMailboxAsync(string mailboxName, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxName == null)
                throw new System.ArgumentNullException("mailboxName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("test-mailboxes/{mailboxName}");
            urlBuilder_.Replace("{mailboxName}", System.Uri.EscapeDataString(System.Convert.ToString(mailboxName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IListFilterClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListFilter> UpgradeListFilterAsync(string filter);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ListFilter> UpgradeListFilterAsync(string filter, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ListFilterClient : CanopyApiClient, IListFilterClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ListFilterClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ListFilter> UpgradeListFilterAsync(string filter)
        {
            return UpgradeListFilterAsync(filter, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ListFilter> UpgradeListFilterAsync(string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("list-filters/upgrade?");
            if (filter != null) urlBuilder_.Append("filter=").Append(System.Uri.EscapeDataString(System.Convert.ToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ListFilter);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ListFilter>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(ListFilter);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IMembershipClient
    {
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostInitializeAsync();

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task PostInitializeAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostRegistrationAsync(RegistrationData registrationData);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> PostRegistrationAsync(RegistrationData registrationData, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostPasswordResetRequestAsync(PasswordResetRequestData passwordResetRequestData);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> PostPasswordResetRequestAsync(PasswordResetRequestData passwordResetRequestData, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostPasswordResetConfirmationAsync(PasswordResetConfirmationData passwordResetConfirmationData);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> PostPasswordResetConfirmationAsync(PasswordResetConfirmationData passwordResetConfirmationData, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetPasswordResetTokenValidityAsync(string userId, string token);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> GetPasswordResetTokenValidityAsync(string userId, string token, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostIdentifiedUserAsync(IdentifiedUserData identifiedUserData);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> PostIdentifiedUserAsync(IdentifiedUserData identifiedUserData, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRefreshTokensAsync(string tenantId, string userId);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteRefreshTokensAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class MembershipClient : CanopyApiClient, IMembershipClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MembershipClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostInitializeAsync()
        {
            return PostInitializeAsync(System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PostInitializeAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/initialize");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PostRegistrationAsync(RegistrationData registrationData)
        {
            return PostRegistrationAsync(registrationData, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> PostRegistrationAsync(RegistrationData registrationData, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/registrations");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(registrationData, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PostPasswordResetRequestAsync(PasswordResetRequestData passwordResetRequestData)
        {
            return PostPasswordResetRequestAsync(passwordResetRequestData, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> PostPasswordResetRequestAsync(PasswordResetRequestData passwordResetRequestData, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/password-reset-requests");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(passwordResetRequestData, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PostPasswordResetConfirmationAsync(PasswordResetConfirmationData passwordResetConfirmationData)
        {
            return PostPasswordResetConfirmationAsync(passwordResetConfirmationData, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> PostPasswordResetConfirmationAsync(PasswordResetConfirmationData passwordResetConfirmationData, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/password-reset-confirmations");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(passwordResetConfirmationData, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetPasswordResetTokenValidityAsync(string userId, string token)
        {
            return GetPasswordResetTokenValidityAsync(userId, token, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> GetPasswordResetTokenValidityAsync(string userId, string token, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (token == null)
                throw new System.ArgumentNullException("token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/password-reset-tokens/{userId}?");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("token=").Append(System.Uri.EscapeDataString(System.Convert.ToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PostIdentifiedUserAsync(IdentifiedUserData identifiedUserData)
        {
            return PostIdentifiedUserAsync(identifiedUserData, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> PostIdentifiedUserAsync(IdentifiedUserData identifiedUserData, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/identified-users");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(identifiedUserData, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteRefreshTokensAsync(string tenantId, string userId)
        {
            return DeleteRefreshTokensAsync(tenantId, userId, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeleteRefreshTokensAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/refresh-tokens/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IPoolClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestAutoScaleFormulaQueryResult> GetTestAutoScaleFormulaAsync(string poolId, string formula);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<TestAutoScaleFormulaQueryResult> GetTestAutoScaleFormulaAsync(string poolId, string formula, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPoolStatusQueryResult> GetPoolStatusAsync(string tenantId, string poolType);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetPoolStatusQueryResult> GetPoolStatusAsync(string tenantId, string poolType, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPoolsQueryResult> GetPoolsAsync();

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetPoolsQueryResult> GetPoolsAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PoolClient : CanopyApiClient, IPoolClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PoolClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TestAutoScaleFormulaQueryResult> GetTestAutoScaleFormulaAsync(string poolId, string formula)
        {
            return GetTestAutoScaleFormulaAsync(poolId, formula, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TestAutoScaleFormulaQueryResult> GetTestAutoScaleFormulaAsync(string poolId, string formula, System.Threading.CancellationToken cancellationToken)
        {
            if (poolId == null)
                throw new System.ArgumentNullException("poolId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("pools/autoscale/test?");
            urlBuilder_.Append("poolId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(poolId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (formula != null) urlBuilder_.Append("formula=").Append(System.Uri.EscapeDataString(System.Convert.ToString(formula, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(TestAutoScaleFormulaQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TestAutoScaleFormulaQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(TestAutoScaleFormulaQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetPoolStatusQueryResult> GetPoolStatusAsync(string tenantId, string poolType)
        {
            return GetPoolStatusAsync(tenantId, poolType, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetPoolStatusQueryResult> GetPoolStatusAsync(string tenantId, string poolType, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("pools/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (poolType != null) urlBuilder_.Append("poolType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(poolType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetPoolStatusQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetPoolStatusQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetPoolStatusQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetPoolsQueryResult> GetPoolsAsync()
        {
            return GetPoolsAsync(System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetPoolsQueryResult> GetPoolsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("pools");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetPoolsQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetPoolsQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetPoolsQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ISimVersionClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSimVersionDocumentsQueryResult> GetDocumentsAsync(string simVersion, string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetSimVersionDocumentsQueryResult> GetDocumentsAsync(string simVersion, string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSimVersionDocumentQueryResult> GetDocumentAsync(string simVersion, string documentPath, string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetSimVersionDocumentQueryResult> GetDocumentAsync(string simVersion, string documentPath, string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWikiDocumentQueryResult> GetWikiDocumentAsync(string wikiVersion, string documentPath, string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetWikiDocumentQueryResult> GetWikiDocumentAsync(string wikiVersion, string documentPath, string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSimVersionAsync(string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<string> GetSimVersionAsync(string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSimVersionAsync(NewSimVersionData simVersionData);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task PostSimVersionAsync(NewSimVersionData simVersionData, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SimVersionClient : CanopyApiClient, ISimVersionClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SimVersionClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSimVersionDocumentsQueryResult> GetDocumentsAsync(string simVersion, string tenantId)
        {
            return GetDocumentsAsync(simVersion, tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetSimVersionDocumentsQueryResult> GetDocumentsAsync(string simVersion, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (simVersion == null)
                throw new System.ArgumentNullException("simVersion");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/{simVersion}/documents?");
            urlBuilder_.Replace("{simVersion}", System.Uri.EscapeDataString(System.Convert.ToString(simVersion, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null) urlBuilder_.Append("tenantId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetSimVersionDocumentsQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimVersionDocumentsQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetSimVersionDocumentsQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSimVersionDocumentQueryResult> GetDocumentAsync(string simVersion, string documentPath, string tenantId)
        {
            return GetDocumentAsync(simVersion, documentPath, tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetSimVersionDocumentQueryResult> GetDocumentAsync(string simVersion, string documentPath, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (simVersion == null)
                throw new System.ArgumentNullException("simVersion");

            if (documentPath == null)
                throw new System.ArgumentNullException("documentPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/{simVersion}/documents/{documentPath}?");
            urlBuilder_.Replace("{simVersion}", System.Uri.EscapeDataString(System.Convert.ToString(simVersion, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentPath}", System.Uri.EscapeDataString(System.Convert.ToString(documentPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null) urlBuilder_.Append("tenantId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetSimVersionDocumentQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimVersionDocumentQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetSimVersionDocumentQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetWikiDocumentQueryResult> GetWikiDocumentAsync(string wikiVersion, string documentPath, string tenantId)
        {
            return GetWikiDocumentAsync(wikiVersion, documentPath, tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetWikiDocumentQueryResult> GetWikiDocumentAsync(string wikiVersion, string documentPath, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (wikiVersion == null)
                throw new System.ArgumentNullException("wikiVersion");

            if (documentPath == null)
                throw new System.ArgumentNullException("documentPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/{wikiVersion}/wiki/{documentPath}?");
            urlBuilder_.Replace("{wikiVersion}", System.Uri.EscapeDataString(System.Convert.ToString(wikiVersion, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentPath}", System.Uri.EscapeDataString(System.Convert.ToString(documentPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null) urlBuilder_.Append("tenantId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetWikiDocumentQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetWikiDocumentQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetWikiDocumentQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetSimVersionAsync(string tenantId)
        {
            return GetSimVersionAsync(tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<string> GetSimVersionAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/current?");
            if (tenantId != null) urlBuilder_.Append("tenantId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(string);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostSimVersionAsync(NewSimVersionData simVersionData)
        {
            return PostSimVersionAsync(simVersionData, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PostSimVersionAsync(NewSimVersionData simVersionData, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/current");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(simVersionData, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IStudyClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAllTenantsStudyStatisticsQueryResult> GetAllTenantsStudyStatisticsAsync(string startDate, string endDate);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetAllTenantsStudyStatisticsQueryResult> GetAllTenantsStudyStatisticsAsync(string startDate, string endDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantBillableStoredSimulationCountQueryResult> GetTenantBillableStoredSimulationCountAsync(string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetTenantBillableStoredSimulationCountQueryResult> GetTenantBillableStoredSimulationCountAsync(string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantStudyStatisticsQueryResult> GetTenantStudyStatisticsAsync(string tenantId, string startDate, string endDate);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetTenantStudyStatisticsQueryResult> GetTenantStudyStatisticsAsync(string tenantId, string startDate, string endDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyTypesQueryResult> GetStudyTypesAsync(string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetStudyTypesQueryResult> GetStudyTypesAsync(string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimTypeDefinition> GetSimTypeAsync(string simType, string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SimTypeDefinition> GetSimTypeAsync(string simType, string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StudyTypeDefinition> GetStudyTypeAsync(string studyType, string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<StudyTypeDefinition> GetStudyTypeAsync(string studyType, string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudiesQueryResult> GetStudiesAsync(string tenantId, string filter, bool? includeTransient);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetStudiesQueryResult> GetStudiesAsync(string tenantId, string filter, bool? includeTransient, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantAccessInformationQueryResult> GetTenantAccessInformationAsync(string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetTenantAccessInformationQueryResult> GetTenantAccessInformationAsync(string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostStudyResult> PostStudyAsync(string tenantId, string userId, NewStudyData data);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PostStudyResult> PostStudyAsync(string tenantId, string userId, NewStudyData data, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyAsync(string tenantId, string userId, string studyId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutStudyAsync(string tenantId, string userId, string studyId, UpdatedStudyData data);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task PutStudyAsync(string tenantId, string userId, string studyId, UpdatedStudyData data, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteStudyAsync(string tenantId, string userId, string studyId);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteStudyAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetStudyDownloadAsync(string tenantId, string userId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> GetStudyDownloadAsync(string tenantId, string userId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetStudyJobDownloadAsync(string tenantId, string userId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> GetStudyJobDownloadAsync(string tenantId, string userId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlAsync(string tenantId, string userId, string studyId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataWithoutUserIdAsync(string tenantId, string studyId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataWithoutUserIdAsync(string tenantId, string studyId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataAsync(string tenantId, string userId, string studyId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsAsync(string tenantId, string userId, string studyId, string filter);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsAsync(string tenantId, string userId, string studyId, string filter, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobAsync(string tenantId, string userId, string studyId, string jobId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobAsync(string tenantId, string userId, string studyId, string jobId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataAsync(string tenantId, string userId, string studyId, string jobId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataAsync(string tenantId, string userId, string studyId, string jobId, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MergeStudyAsync(string tenantId, string userId, string studyId, bool? forceMergeFromBaseline);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task MergeStudyAsync(string tenantId, string userId, string studyId, bool? forceMergeFromBaseline, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class StudyClient : CanopyApiClient, IStudyClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public StudyClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetAllTenantsStudyStatisticsQueryResult> GetAllTenantsStudyStatisticsAsync(string startDate, string endDate)
        {
            return GetAllTenantsStudyStatisticsAsync(startDate, endDate, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetAllTenantsStudyStatisticsQueryResult> GetAllTenantsStudyStatisticsAsync(string startDate, string endDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/statistics?");
            if (startDate != null) urlBuilder_.Append("startDate=").Append(System.Uri.EscapeDataString(System.Convert.ToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (endDate != null) urlBuilder_.Append("endDate=").Append(System.Uri.EscapeDataString(System.Convert.ToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetAllTenantsStudyStatisticsQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetAllTenantsStudyStatisticsQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetAllTenantsStudyStatisticsQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantBillableStoredSimulationCountQueryResult> GetTenantBillableStoredSimulationCountAsync(string tenantId)
        {
            return GetTenantBillableStoredSimulationCountAsync(tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetTenantBillableStoredSimulationCountQueryResult> GetTenantBillableStoredSimulationCountAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/statistics/stored/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetTenantBillableStoredSimulationCountQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantBillableStoredSimulationCountQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetTenantBillableStoredSimulationCountQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantStudyStatisticsQueryResult> GetTenantStudyStatisticsAsync(string tenantId, string startDate, string endDate)
        {
            return GetTenantStudyStatisticsAsync(tenantId, startDate, endDate, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetTenantStudyStatisticsQueryResult> GetTenantStudyStatisticsAsync(string tenantId, string startDate, string endDate, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/statistics/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (startDate != null) urlBuilder_.Append("startDate=").Append(System.Uri.EscapeDataString(System.Convert.ToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (endDate != null) urlBuilder_.Append("endDate=").Append(System.Uri.EscapeDataString(System.Convert.ToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetTenantStudyStatisticsQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantStudyStatisticsQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetTenantStudyStatisticsQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyTypesQueryResult> GetStudyTypesAsync(string tenantId)
        {
            return GetStudyTypesAsync(tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetStudyTypesQueryResult> GetStudyTypesAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/types?");
            if (tenantId != null) urlBuilder_.Append("tenantId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetStudyTypesQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyTypesQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetStudyTypesQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SimTypeDefinition> GetSimTypeAsync(string simType, string tenantId)
        {
            return GetSimTypeAsync(simType, tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SimTypeDefinition> GetSimTypeAsync(string simType, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (simType == null)
                throw new System.ArgumentNullException("simType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/types/sims/{simType}?");
            urlBuilder_.Replace("{simType}", System.Uri.EscapeDataString(System.Convert.ToString(simType, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null) urlBuilder_.Append("tenantId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(SimTypeDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SimTypeDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(SimTypeDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StudyTypeDefinition> GetStudyTypeAsync(string studyType, string tenantId)
        {
            return GetStudyTypeAsync(studyType, tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<StudyTypeDefinition> GetStudyTypeAsync(string studyType, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (studyType == null)
                throw new System.ArgumentNullException("studyType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/types/{studyType}?");
            urlBuilder_.Replace("{studyType}", System.Uri.EscapeDataString(System.Convert.ToString(studyType, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null) urlBuilder_.Append("tenantId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(StudyTypeDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<StudyTypeDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(StudyTypeDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudiesQueryResult> GetStudiesAsync(string tenantId, string filter, bool? includeTransient)
        {
            return GetStudiesAsync(tenantId, filter, includeTransient, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetStudiesQueryResult> GetStudiesAsync(string tenantId, string filter, bool? includeTransient, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null) urlBuilder_.Append("filter=").Append(System.Uri.EscapeDataString(System.Convert.ToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (includeTransient != null) urlBuilder_.Append("includeTransient=").Append(System.Uri.EscapeDataString(System.Convert.ToString(includeTransient, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetStudiesQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudiesQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetStudiesQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantAccessInformationQueryResult> GetTenantAccessInformationAsync(string tenantId)
        {
            return GetTenantAccessInformationAsync(tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetTenantAccessInformationQueryResult> GetTenantAccessInformationAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/access");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetTenantAccessInformationQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantAccessInformationQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetTenantAccessInformationQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PostStudyResult> PostStudyAsync(string tenantId, string userId, NewStudyData data)
        {
            return PostStudyAsync(tenantId, userId, data, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PostStudyResult> PostStudyAsync(string tenantId, string userId, NewStudyData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(PostStudyResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PostStudyResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(PostStudyResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyAsync(string tenantId, string userId, string studyId)
        {
            return GetStudyAsync(tenantId, userId, studyId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetStudyQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetStudyQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutStudyAsync(string tenantId, string userId, string studyId, UpdatedStudyData data)
        {
            return PutStudyAsync(tenantId, userId, studyId, data, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PutStudyAsync(string tenantId, string userId, string studyId, UpdatedStudyData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteStudyAsync(string tenantId, string userId, string studyId)
        {
            return DeleteStudyAsync(tenantId, userId, studyId, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeleteStudyAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetStudyDownloadAsync(string tenantId, string userId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv)
        {
            return GetStudyDownloadAsync(tenantId, userId, studyId, accessSignature, expiry, fileName, full, channelsAsCsv, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> GetStudyDownloadAsync(string tenantId, string userId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            if (accessSignature == null)
                throw new System.ArgumentNullException("accessSignature");

            if (expiry == null)
                throw new System.ArgumentNullException("expiry");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/download?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("accessSignature=").Append(System.Uri.EscapeDataString(System.Convert.ToString(accessSignature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("expiry=").Append(System.Uri.EscapeDataString(System.Convert.ToString(expiry, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fileName != null) urlBuilder_.Append("fileName=").Append(System.Uri.EscapeDataString(System.Convert.ToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (full != null) urlBuilder_.Append("full=").Append(System.Uri.EscapeDataString(System.Convert.ToString(full, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (channelsAsCsv != null) urlBuilder_.Append("channelsAsCsv=").Append(System.Uri.EscapeDataString(System.Convert.ToString(channelsAsCsv, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetStudyJobDownloadAsync(string tenantId, string userId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv)
        {
            return GetStudyJobDownloadAsync(tenantId, userId, studyId, jobId, accessSignature, expiry, fileName, channelsAsCsv, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> GetStudyJobDownloadAsync(string tenantId, string userId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            if (accessSignature == null)
                throw new System.ArgumentNullException("accessSignature");

            if (expiry == null)
                throw new System.ArgumentNullException("expiry");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}/download?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(System.Convert.ToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("accessSignature=").Append(System.Uri.EscapeDataString(System.Convert.ToString(accessSignature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("expiry=").Append(System.Uri.EscapeDataString(System.Convert.ToString(expiry, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fileName != null) urlBuilder_.Append("fileName=").Append(System.Uri.EscapeDataString(System.Convert.ToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (channelsAsCsv != null) urlBuilder_.Append("channelsAsCsv=").Append(System.Uri.EscapeDataString(System.Convert.ToString(channelsAsCsv, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlAsync(string tenantId, string userId, string studyId)
        {
            return GetStudyDownloadUrlAsync(tenantId, userId, studyId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/download-url");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetStudyDownloadUrlQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyDownloadUrlQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetStudyDownloadUrlQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataWithoutUserIdAsync(string tenantId, string studyId)
        {
            return GetStudyMetadataWithoutUserIdAsync(tenantId, studyId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataWithoutUserIdAsync(string tenantId, string studyId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/auto/{studyId}/metadata");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetStudyQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetStudyQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataAsync(string tenantId, string userId, string studyId)
        {
            return GetStudyMetadataAsync(tenantId, userId, studyId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/metadata");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetStudyQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetStudyQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsAsync(string tenantId, string userId, string studyId, string filter)
        {
            return GetStudyJobsAsync(tenantId, userId, studyId, filter, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsAsync(string tenantId, string userId, string studyId, string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/jobs?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null) urlBuilder_.Append("filter=").Append(System.Uri.EscapeDataString(System.Convert.ToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetStudyJobsQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyJobsQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetStudyJobsQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobAsync(string tenantId, string userId, string studyId, string jobId)
        {
            return GetStudyJobAsync(tenantId, userId, studyId, jobId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobAsync(string tenantId, string userId, string studyId, string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(System.Convert.ToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetStudyJobQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyJobQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetStudyJobQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataAsync(string tenantId, string userId, string studyId, string jobId)
        {
            return GetStudyJobMetadataAsync(tenantId, userId, studyId, jobId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataAsync(string tenantId, string userId, string studyId, string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}/metadata");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(System.Convert.ToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetStudyJobMetadataQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyJobMetadataQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetStudyJobMetadataQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task MergeStudyAsync(string tenantId, string userId, string studyId, bool? forceMergeFromBaseline)
        {
            return MergeStudyAsync(tenantId, userId, studyId, forceMergeFromBaseline, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task MergeStudyAsync(string tenantId, string userId, string studyId, bool? forceMergeFromBaseline, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (studyId == null)
                throw new System.ArgumentNullException("studyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/merge?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(System.Convert.ToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (forceMergeFromBaseline != null) urlBuilder_.Append("forceMergeFromBaseline=").Append(System.Uri.EscapeDataString(System.Convert.ToString(forceMergeFromBaseline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ISupportSessionClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAllSupportSessionsQueryResult> GetAllSupportSessionsAsync();

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetAllSupportSessionsQueryResult> GetAllSupportSessionsAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionAsync(string tenantId, string userId, string documentId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionAsync(string tenantId, string userId, string documentId, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSupportSessionAsync(string tenantId, string userId, string documentId, SupportSessionData data);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task PutSupportSessionAsync(string tenantId, string userId, string documentId, SupportSessionData data, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SupportSessionClient : CanopyApiClient, ISupportSessionClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SupportSessionClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetAllSupportSessionsQueryResult> GetAllSupportSessionsAsync()
        {
            return GetAllSupportSessionsAsync(System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetAllSupportSessionsQueryResult> GetAllSupportSessionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("support-sessions/all");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetAllSupportSessionsQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetAllSupportSessionsQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetAllSupportSessionsQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionAsync(string tenantId, string userId, string documentId)
        {
            return GetSupportSessionAsync(tenantId, userId, documentId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionAsync(string tenantId, string userId, string documentId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("support-sessions/{tenantId}/{userId}/{documentId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentId}", System.Uri.EscapeDataString(System.Convert.ToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetSupportSessionQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetSupportSessionQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetSupportSessionQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutSupportSessionAsync(string tenantId, string userId, string documentId, SupportSessionData data)
        {
            return PutSupportSessionAsync(tenantId, userId, documentId, data, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PutSupportSessionAsync(string tenantId, string userId, string documentId, SupportSessionData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("support-sessions/{tenantId}/{userId}/{documentId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentId}", System.Uri.EscapeDataString(System.Convert.ToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ITenancyClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantsQueryResult> GetTenantsAsync();

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetTenantsQueryResult> GetTenantsAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostTenantAsync(NewTenantData data);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task PostTenantAsync(NewTenantData data, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantQueryResult> GetTenantAsync(string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetTenantQueryResult> GetTenantAsync(string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantAsync(string tenantId, UpdatedTenantData data);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task PutTenantAsync(string tenantId, UpdatedTenantData data, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantUsersQueryResult> GetTenantUsersAsync(string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetTenantUsersQueryResult> GetTenantUsersAsync(string tenantId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class TenancyClient : CanopyApiClient, ITenancyClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public TenancyClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantsQueryResult> GetTenantsAsync()
        {
            return GetTenantsAsync(System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetTenantsQueryResult> GetTenantsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetTenantsQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantsQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetTenantsQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostTenantAsync(NewTenantData data)
        {
            return PostTenantAsync(data, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PostTenantAsync(NewTenantData data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantQueryResult> GetTenantAsync(string tenantId)
        {
            return GetTenantAsync(tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetTenantQueryResult> GetTenantAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetTenantQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetTenantQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutTenantAsync(string tenantId, UpdatedTenantData data)
        {
            return PutTenantAsync(tenantId, data, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PutTenantAsync(string tenantId, UpdatedTenantData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantUsersQueryResult> GetTenantUsersAsync(string tenantId)
        {
            return GetTenantUsersAsync(tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetTenantUsersQueryResult> GetTenantUsersAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}/users");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetTenantUsersQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantUsersQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetTenantUsersQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ITenantSettingsClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantDefaultCustomPropertyNamesQueryResult> GetTenantDefaultCustomPropertyNamesAsync(string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetTenantDefaultCustomPropertyNamesQueryResult> GetTenantDefaultCustomPropertyNamesAsync(string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantDefaultCustomPropertyNamesAsync(string tenantId, UpdatedTenantDefaultCustomPropertyNames data);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task PutTenantDefaultCustomPropertyNamesAsync(string tenantId, UpdatedTenantDefaultCustomPropertyNames data, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantSettingsSimVersionQueryResult> GetTenantSettingsSimVersionAsync(string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetTenantSettingsSimVersionQueryResult> GetTenantSettingsSimVersionAsync(string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantSettingsSimVersionAsync(string tenantId, UpdatedTenantSettingsSimVersion data);

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task PutTenantSettingsSimVersionAsync(string tenantId, UpdatedTenantSettingsSimVersion data, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAdminTenantSettingsQueryResult> GetAdminTenantSettingsAsync(string tenantId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetAdminTenantSettingsQueryResult> GetAdminTenantSettingsAsync(string tenantId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PutAdminTenantSettingsAsync(string tenantId, UpdatedAdminTenantSettings data);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<string> PutAdminTenantSettingsAsync(string tenantId, UpdatedAdminTenantSettings data, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class TenantSettingsClient : CanopyApiClient, ITenantSettingsClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public TenantSettingsClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantDefaultCustomPropertyNamesQueryResult> GetTenantDefaultCustomPropertyNamesAsync(string tenantId)
        {
            return GetTenantDefaultCustomPropertyNamesAsync(tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetTenantDefaultCustomPropertyNamesQueryResult> GetTenantDefaultCustomPropertyNamesAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/default-custom-property-names/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetTenantDefaultCustomPropertyNamesQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantDefaultCustomPropertyNamesQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetTenantDefaultCustomPropertyNamesQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutTenantDefaultCustomPropertyNamesAsync(string tenantId, UpdatedTenantDefaultCustomPropertyNames data)
        {
            return PutTenantDefaultCustomPropertyNamesAsync(tenantId, data, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PutTenantDefaultCustomPropertyNamesAsync(string tenantId, UpdatedTenantDefaultCustomPropertyNames data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/default-custom-property-names/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantSettingsSimVersionQueryResult> GetTenantSettingsSimVersionAsync(string tenantId)
        {
            return GetTenantSettingsSimVersionAsync(tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetTenantSettingsSimVersionQueryResult> GetTenantSettingsSimVersionAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/sim-version/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetTenantSettingsSimVersionQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantSettingsSimVersionQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetTenantSettingsSimVersionQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutTenantSettingsSimVersionAsync(string tenantId, UpdatedTenantSettingsSimVersion data)
        {
            return PutTenantSettingsSimVersionAsync(tenantId, data, System.Threading.CancellationToken.None);
        }

        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PutTenantSettingsSimVersionAsync(string tenantId, UpdatedTenantSettingsSimVersion data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/sim-version/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetAdminTenantSettingsQueryResult> GetAdminTenantSettingsAsync(string tenantId)
        {
            return GetAdminTenantSettingsAsync(tenantId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetAdminTenantSettingsQueryResult> GetAdminTenantSettingsAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/admin/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetAdminTenantSettingsQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetAdminTenantSettingsQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetAdminTenantSettingsQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> PutAdminTenantSettingsAsync(string tenantId, UpdatedAdminTenantSettings data)
        {
            return PutAdminTenantSettingsAsync(tenantId, data, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<string> PutAdminTenantSettingsAsync(string tenantId, UpdatedAdminTenantSettings data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/admin/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(string);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IUserSettingsClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetUserSettingsQueryResult> GetUserSettingsAsync(string tenantId, string userId);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GetUserSettingsQueryResult> GetUserSettingsAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PutUserSettingsAsync(string tenantId, string userId, UpdatedUserSettings data);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<string> PutUserSettingsAsync(string tenantId, string userId, UpdatedUserSettings data, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UserSettingsClient : CanopyApiClient, IUserSettingsClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public UserSettingsClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetUserSettingsQueryResult> GetUserSettingsAsync(string tenantId, string userId)
        {
            return GetUserSettingsAsync(tenantId, userId, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetUserSettingsQueryResult> GetUserSettingsAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("user-settings/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetUserSettingsQueryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetUserSettingsQueryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetUserSettingsQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> PutUserSettingsAsync(string tenantId, string userId, UpdatedUserSettings data)
        {
            return PutUserSettingsAsync(tenantId, userId, data, System.Threading.CancellationToken.None);
        }

        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<string> PutUserSettingsAsync(string tenantId, string userId, UpdatedUserSettings data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("user-settings/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(System.Convert.ToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    base.PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(string);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new CanopyApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetAccountSettingsResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _username;
        private string _email;
        private bool? _isEnabled;

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetAccountSettingsResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAccountSettingsResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdatedAccountSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private string _newUsername;
        private string _newEmail;
        private string _newPassword;
        private bool? _isEnabled;

        [Newtonsoft.Json.JsonProperty("newUsername", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewUsername
        {
            get { return _newUsername; }
            set
            {
                if (_newUsername != value)
                {
                    _newUsername = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("newEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewEmail
        {
            get { return _newEmail; }
            set
            {
                if (_newEmail != value)
                {
                    _newEmail = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewPassword
        {
            get { return _newPassword; }
            set
            {
                if (_newPassword != value)
                {
                    _newPassword = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdatedAccountSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedAccountSettings>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AvailabilityResult : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _database;
        private bool? _api;

        [Newtonsoft.Json.JsonProperty("database", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Database
        {
            get { return _database; }
            set
            {
                if (_database != value)
                {
                    _database = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("api", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Api
        {
            get { return _api; }
            set
            {
                if (_api != value)
                {
                    _api = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AvailabilityResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailabilityResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpgradeConfigData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private object _config;
        private string _simVersion;

        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpgradeConfigData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpgradeConfigData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpgradeConfigQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private object _config;
        private string _convertedSimVersion;

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("convertedSimVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertedSimVersion
        {
            get { return _convertedSimVersion; }
            set
            {
                if (_convertedSimVersion != value)
                {
                    _convertedSimVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpgradeConfigQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpgradeConfigQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetConfigsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private DocumentsAndContinuationToken _queryResults;
        private System.Collections.Generic.List<DocumentCustomPropertyGroup> _groupResults;
        private UserInformationForDocumentResult _userInformation;

        [Newtonsoft.Json.JsonProperty("queryResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentsAndContinuationToken QueryResults
        {
            get { return _queryResults; }
            set
            {
                if (_queryResults != value)
                {
                    _queryResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("groupResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyGroup> GroupResults
        {
            get { return _groupResults; }
            set
            {
                if (_groupResults != value)
                {
                    _groupResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInformationForDocumentResult UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetConfigsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetConfigsQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentsAndContinuationToken : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<CanopyDocument> _documents;
        private string _continuationToken;
        private bool? _hasMoreResults;

        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("continuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("hasMoreResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMoreResults
        {
            get { return _hasMoreResults; }
            set
            {
                if (_hasMoreResults != value)
                {
                    _hasMoreResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DocumentsAndContinuationToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentsAndContinuationToken>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentCustomPropertyGroup : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private System.Collections.Generic.List<DocumentGroupResult> _groups;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentGroupResult> Groups
        {
            get { return _groups; }
            set
            {
                if (_groups != value)
                {
                    _groups = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DocumentCustomPropertyGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentCustomPropertyGroup>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserInformationForDocumentResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<TenantInformation> _tenants;

        [Newtonsoft.Json.JsonProperty("tenants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TenantInformation> Tenants
        {
            get { return _tenants; }
            set
            {
                if (_tenants != value)
                {
                    _tenants = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserInformationForDocumentResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserInformationForDocumentResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CanopyDocument : System.ComponentModel.INotifyPropertyChanged
    {
        private string _documentId;
        private string _tenantId;
        private string _userId;
        private string _name;
        private CanopyDocumentType? _type;
        private string _subType;
        private string _simVersion;
        private System.DateTime? _creationDate;
        private System.DateTime? _modifiedDate;
        private object _properties;
        private object _data;
        private SupportSession _supportSession;

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    _documentId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CanopyDocumentType? Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("subType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubType
        {
            get { return _subType; }
            set
            {
                if (_subType != value)
                {
                    _subType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    _modifiedDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("supportSession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupportSession SupportSession
        {
            get { return _supportSession; }
            set
            {
                if (_supportSession != value)
                {
                    _supportSession = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CanopyDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CanopyDocument>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentGroupResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _key;
        private int? _count;

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    _key = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count
        {
            get { return _count; }
            set
            {
                if (_count != value)
                {
                    _count = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DocumentGroupResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentGroupResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TenantInformation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _name;
        private string _shortName;
        private System.Collections.Generic.List<UserInformation> _users;

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserInformation> Users
        {
            get { return _users; }
            set
            {
                if (_users != value)
                {
                    _users = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TenantInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TenantInformation>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SupportSession : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _isOpen;
        private System.DateTime? _modifiedDate;
        private string _modifiedTenantId;
        private string _modifiedUserId;
        private System.Collections.Generic.List<SupportSessionResponse> _responses;

        [Newtonsoft.Json.JsonProperty("isOpen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOpen
        {
            get { return _isOpen; }
            set
            {
                if (_isOpen != value)
                {
                    _isOpen = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    _modifiedDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("modifiedTenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedTenantId
        {
            get { return _modifiedTenantId; }
            set
            {
                if (_modifiedTenantId != value)
                {
                    _modifiedTenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("modifiedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedUserId
        {
            get { return _modifiedUserId; }
            set
            {
                if (_modifiedUserId != value)
                {
                    _modifiedUserId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("responses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SupportSessionResponse> Responses
        {
            get { return _responses; }
            set
            {
                if (_responses != value)
                {
                    _responses = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SupportSession FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupportSession>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserInformation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _userId;
        private string _username;
        private string _email;

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserInformation>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SupportSessionResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _userId;
        private System.DateTime? _creationDate;
        private string _message;

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SupportSessionResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupportSessionResponse>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetConfigNamesQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<DocumentNameResult> _names;
        private System.Collections.Generic.List<SimVersionDocumentNameResult> _simVersionNames;

        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentNameResult> Names
        {
            get { return _names; }
            set
            {
                if (_names != value)
                {
                    _names = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simVersionNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SimVersionDocumentNameResult> SimVersionNames
        {
            get { return _simVersionNames; }
            set
            {
                if (_simVersionNames != value)
                {
                    _simVersionNames = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetConfigNamesQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetConfigNamesQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentNameResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _configId;
        private string _userId;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("configId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigId
        {
            get { return _configId; }
            set
            {
                if (_configId != value)
                {
                    _configId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DocumentNameResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentNameResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SimVersionDocumentNameResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _path;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set
            {
                if (_path != value)
                {
                    _path = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SimVersionDocumentNameResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimVersionDocumentNameResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NewConfigData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _configType;
        private System.Collections.Generic.List<DocumentCustomPropertyData> _properties;
        private object _config;
        private string _simVersion;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NewConfigData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewConfigData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentCustomPropertyData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _value;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DocumentCustomPropertyData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentCustomPropertyData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NewBatchConfigData : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<NewConfigData> _items;

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NewConfigData> Items
        {
            get { return _items; }
            set
            {
                if (_items != value)
                {
                    _items = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NewBatchConfigData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewBatchConfigData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BatchCreateConfigsResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<string> _configIds;

        [Newtonsoft.Json.JsonProperty("configIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ConfigIds
        {
            get { return _configIds; }
            set
            {
                if (_configIds != value)
                {
                    _configIds = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BatchCreateConfigsResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatchCreateConfigsResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdatedConfigData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _configType;
        private System.Collections.Generic.List<DocumentCustomPropertyData> _properties;
        private object _config;
        private string _simVersion;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdatedConfigData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedConfigData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetConfigQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private CanopyDocument _config;
        private string _convertedSimVersion;
        private UserInformationForDocumentResult _userInformation;

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CanopyDocument Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("convertedSimVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertedSimVersion
        {
            get { return _convertedSimVersion; }
            set
            {
                if (_convertedSimVersion != value)
                {
                    _convertedSimVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInformationForDocumentResult UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetConfigQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetConfigQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListFilter : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _itemsPerPage;
        private string _continuationToken;
        private string _orderByCustomProperty;
        private ListFilterOrderByProperty? _orderByProperty;
        private bool? _orderByDescending;
        private string _filterName;
        private ListFilterGroup _query;

        [Newtonsoft.Json.JsonProperty("itemsPerPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemsPerPage
        {
            get { return _itemsPerPage; }
            set
            {
                if (_itemsPerPage != value)
                {
                    _itemsPerPage = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("continuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("orderByCustomProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderByCustomProperty
        {
            get { return _orderByCustomProperty; }
            set
            {
                if (_orderByCustomProperty != value)
                {
                    _orderByCustomProperty = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("orderByProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListFilterOrderByProperty? OrderByProperty
        {
            get { return _orderByProperty; }
            set
            {
                if (_orderByProperty != value)
                {
                    _orderByProperty = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("orderByDescending", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OrderByDescending
        {
            get { return _orderByDescending; }
            set
            {
                if (_orderByDescending != value)
                {
                    _orderByDescending = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("filterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilterName
        {
            get { return _filterName; }
            set
            {
                if (_filterName != value)
                {
                    _filterName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListFilterGroup Query
        {
            get { return _query; }
            set
            {
                if (_query != value)
                {
                    _query = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ListFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListFilter>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListFilterGroup : System.ComponentModel.INotifyPropertyChanged
    {
        private ListFilterGroupOperator? _operator;
        private System.Collections.Generic.List<ListFilterCondition> _conditions;
        private System.Collections.Generic.List<ListFilterGroup> _groups;

        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListFilterGroupOperator? Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value)
                {
                    _operator = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ListFilterCondition> Conditions
        {
            get { return _conditions; }
            set
            {
                if (_conditions != value)
                {
                    _conditions = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ListFilterGroup> Groups
        {
            get { return _groups; }
            set
            {
                if (_groups != value)
                {
                    _groups = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ListFilterGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListFilterGroup>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListFilterCondition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _source;
        private string _name;
        private ListFilterConditionOperator? _operator;
        private string _value;

        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source
        {
            get { return _source; }
            set
            {
                if (_source != value)
                {
                    _source = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListFilterConditionOperator? Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value)
                {
                    _operator = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ListFilterCondition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListFilterCondition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RegistrationData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _email;
        private string _username;
        private string _password;

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    _password = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RegistrationData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RegistrationData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PasswordResetRequestData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenant;
        private string _email;
        private string _username;

        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tenant
        {
            get { return _tenant; }
            set
            {
                if (_tenant != value)
                {
                    _tenant = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PasswordResetRequestData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PasswordResetRequestData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PasswordResetConfirmationData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _userId;
        private string _newPassword;
        private string _token;

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewPassword
        {
            get { return _newPassword; }
            set
            {
                if (_newPassword != value)
                {
                    _newPassword = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Token
        {
            get { return _token; }
            set
            {
                if (_token != value)
                {
                    _token = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PasswordResetConfirmationData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PasswordResetConfirmationData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IdentifiedUserData : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _isUpdate;
        private string _tenant;
        private string _username;
        private string _email;

        [Newtonsoft.Json.JsonProperty("isUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsUpdate
        {
            get { return _isUpdate; }
            set
            {
                if (_isUpdate != value)
                {
                    _isUpdate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tenant
        {
            get { return _tenant; }
            set
            {
                if (_tenant != value)
                {
                    _tenant = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static IdentifiedUserData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdentifiedUserData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TestAutoScaleFormulaQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private AutoScaleRun _autoScaleRun;

        [Newtonsoft.Json.JsonProperty("autoScaleRun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AutoScaleRun AutoScaleRun
        {
            get { return _autoScaleRun; }
            set
            {
                if (_autoScaleRun != value)
                {
                    _autoScaleRun = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TestAutoScaleFormulaQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TestAutoScaleFormulaQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AutoScaleRun : System.ComponentModel.INotifyPropertyChanged
    {
        private AutoScaleRunError _error;
        private string _results;
        private System.DateTime? _timestamp;

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AutoScaleRunError Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Results
        {
            get { return _results; }
            set
            {
                if (_results != value)
                {
                    _results = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Timestamp
        {
            get { return _timestamp; }
            set
            {
                if (_timestamp != value)
                {
                    _timestamp = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AutoScaleRun FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AutoScaleRun>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AutoScaleRunError : System.ComponentModel.INotifyPropertyChanged
    {
        private string _code;
        private string _message;
        private System.Collections.Generic.List<NameValuePair> _values;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NameValuePair> Values
        {
            get { return _values; }
            set
            {
                if (_values != value)
                {
                    _values = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AutoScaleRunError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AutoScaleRunError>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameValuePair : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _value;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NameValuePair FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NameValuePair>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetPoolStatusQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _poolId;
        private GetPoolStatusQueryResultPoolState? _poolState;
        private GetPoolStatusQueryResultAllocationState? _allocationState;
        private int? _currentDedicated;
        private int? _targetDedicated;
        private int? _currentLowPriority;
        private int? _targetLowPriority;
        private int? _maximumTasksPerNode;
        private int? _schedulableComputeNodes;
        private int? _runningTasks;
        private System.Collections.Generic.List<ComputeNodeResult> _computeNodes;

        [Newtonsoft.Json.JsonProperty("poolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoolId
        {
            get { return _poolId; }
            set
            {
                if (_poolId != value)
                {
                    _poolId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("poolState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetPoolStatusQueryResultPoolState? PoolState
        {
            get { return _poolState; }
            set
            {
                if (_poolState != value)
                {
                    _poolState = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("allocationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetPoolStatusQueryResultAllocationState? AllocationState
        {
            get { return _allocationState; }
            set
            {
                if (_allocationState != value)
                {
                    _allocationState = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("currentDedicated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentDedicated
        {
            get { return _currentDedicated; }
            set
            {
                if (_currentDedicated != value)
                {
                    _currentDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("targetDedicated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetDedicated
        {
            get { return _targetDedicated; }
            set
            {
                if (_targetDedicated != value)
                {
                    _targetDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("currentLowPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentLowPriority
        {
            get { return _currentLowPriority; }
            set
            {
                if (_currentLowPriority != value)
                {
                    _currentLowPriority = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("targetLowPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetLowPriority
        {
            get { return _targetLowPriority; }
            set
            {
                if (_targetLowPriority != value)
                {
                    _targetLowPriority = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("maximumTasksPerNode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumTasksPerNode
        {
            get { return _maximumTasksPerNode; }
            set
            {
                if (_maximumTasksPerNode != value)
                {
                    _maximumTasksPerNode = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("schedulableComputeNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SchedulableComputeNodes
        {
            get { return _schedulableComputeNodes; }
            set
            {
                if (_schedulableComputeNodes != value)
                {
                    _schedulableComputeNodes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("runningTasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunningTasks
        {
            get { return _runningTasks; }
            set
            {
                if (_runningTasks != value)
                {
                    _runningTasks = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("computeNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ComputeNodeResult> ComputeNodes
        {
            get { return _computeNodes; }
            set
            {
                if (_computeNodes != value)
                {
                    _computeNodes = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetPoolStatusQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPoolStatusQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ComputeNodeResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _computeNodeId;
        private ComputeNodeResultState? _state;
        private int? _runningTasks;
        private bool? _isDedicated;

        [Newtonsoft.Json.JsonProperty("computeNodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ComputeNodeId
        {
            get { return _computeNodeId; }
            set
            {
                if (_computeNodeId != value)
                {
                    _computeNodeId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ComputeNodeResultState? State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("runningTasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunningTasks
        {
            get { return _runningTasks; }
            set
            {
                if (_runningTasks != value)
                {
                    _runningTasks = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isDedicated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDedicated
        {
            get { return _isDedicated; }
            set
            {
                if (_isDedicated != value)
                {
                    _isDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ComputeNodeResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ComputeNodeResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetPoolsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<GetPoolsItem> _pools;

        [Newtonsoft.Json.JsonProperty("pools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GetPoolsItem> Pools
        {
            get { return _pools; }
            set
            {
                if (_pools != value)
                {
                    _pools = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetPoolsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPoolsQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetPoolsItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _poolId;
        private int? _currentDedicated;
        private int? _targetDedicated;
        private int? _currentLowPriority;
        private int? _targetLowPriority;
        private System.Collections.Generic.List<GetPoolsItemInterval> _intervals;

        [Newtonsoft.Json.JsonProperty("poolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoolId
        {
            get { return _poolId; }
            set
            {
                if (_poolId != value)
                {
                    _poolId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("currentDedicated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentDedicated
        {
            get { return _currentDedicated; }
            set
            {
                if (_currentDedicated != value)
                {
                    _currentDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("targetDedicated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetDedicated
        {
            get { return _targetDedicated; }
            set
            {
                if (_targetDedicated != value)
                {
                    _targetDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("currentLowPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentLowPriority
        {
            get { return _currentLowPriority; }
            set
            {
                if (_currentLowPriority != value)
                {
                    _currentLowPriority = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("targetLowPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetLowPriority
        {
            get { return _targetLowPriority; }
            set
            {
                if (_targetLowPriority != value)
                {
                    _targetLowPriority = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("intervals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GetPoolsItemInterval> Intervals
        {
            get { return _intervals; }
            set
            {
                if (_intervals != value)
                {
                    _intervals = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetPoolsItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPoolsItem>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetPoolsItemInterval : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _totalCoreHours;
        private double? _dataEgressGiB;
        private double? _dataIngressGiB;

        [Newtonsoft.Json.JsonProperty("totalCoreHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalCoreHours
        {
            get { return _totalCoreHours; }
            set
            {
                if (_totalCoreHours != value)
                {
                    _totalCoreHours = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("dataEgressGiB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DataEgressGiB
        {
            get { return _dataEgressGiB; }
            set
            {
                if (_dataEgressGiB != value)
                {
                    _dataEgressGiB = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("dataIngressGiB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DataIngressGiB
        {
            get { return _dataIngressGiB; }
            set
            {
                if (_dataIngressGiB != value)
                {
                    _dataIngressGiB = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetPoolsItemInterval FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPoolsItemInterval>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetSimVersionDocumentsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;
        private System.Collections.Generic.List<TextDocumentOptionalContent> _documents;
        private System.Collections.Generic.Dictionary<string, string> _units;

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TextDocumentOptionalContent> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Units
        {
            get { return _units; }
            set
            {
                if (_units != value)
                {
                    _units = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetSimVersionDocumentsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimVersionDocumentsQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TextDocumentOptionalContent : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _content;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    _content = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TextDocumentOptionalContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TextDocumentOptionalContent>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetSimVersionDocumentQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private TextDocument _document;

        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextDocument Document
        {
            get { return _document; }
            set
            {
                if (_document != value)
                {
                    _document = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetSimVersionDocumentQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimVersionDocumentQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TextDocument : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _content;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    _content = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TextDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TextDocument>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetWikiDocumentQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private TextDocument _document;

        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextDocument Document
        {
            get { return _document; }
            set
            {
                if (_document != value)
                {
                    _document = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetWikiDocumentQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetWikiDocumentQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NewSimVersionData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NewSimVersionData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewSimVersionData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetAllTenantsStudyStatisticsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<TenantStatistics> _tenants;

        [Newtonsoft.Json.JsonProperty("tenants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TenantStatistics> Tenants
        {
            get { return _tenants; }
            set
            {
                if (_tenants != value)
                {
                    _tenants = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetAllTenantsStudyStatisticsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAllTenantsStudyStatisticsQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TenantStatistics : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private object _statistics;

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Statistics
        {
            get { return _statistics; }
            set
            {
                if (_statistics != value)
                {
                    _statistics = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TenantStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TenantStatistics>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetTenantBillableStoredSimulationCountQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _succeededSimulations;
        private int? _succeededStorageCredits;

        [Newtonsoft.Json.JsonProperty("succeededSimulations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SucceededSimulations
        {
            get { return _succeededSimulations; }
            set
            {
                if (_succeededSimulations != value)
                {
                    _succeededSimulations = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("succeededStorageCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SucceededStorageCredits
        {
            get { return _succeededStorageCredits; }
            set
            {
                if (_succeededStorageCredits != value)
                {
                    _succeededStorageCredits = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetTenantBillableStoredSimulationCountQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantBillableStoredSimulationCountQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetTenantStudyStatisticsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private object _statistics;

        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Statistics
        {
            get { return _statistics; }
            set
            {
                if (_statistics != value)
                {
                    _statistics = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetTenantStudyStatisticsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantStudyStatisticsQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetStudyTypesQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<StudyTypeDefinition> _studyTypes;
        private System.Collections.Generic.List<SimTypeDefinition> _simTypes;
        private System.Collections.Generic.List<string> _configTypes;

        [Newtonsoft.Json.JsonProperty("studyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StudyTypeDefinition> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SimTypeDefinition> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("configTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ConfigTypes
        {
            get { return _configTypes; }
            set
            {
                if (_configTypes != value)
                {
                    _configTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetStudyTypesQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyTypesQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StudyTypeDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private StudyTypeDefinitionStudyType? _studyType;
        private string _name;
        private System.Collections.Generic.List<Anonymous> _simTypes;
        private System.Collections.Generic.List<SimulationInput> _inputs;
        private StudyTypeDefinitionPoolType? _poolType;

        [Newtonsoft.Json.JsonProperty("studyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StudyTypeDefinitionStudyType? StudyType
        {
            get { return _studyType; }
            set
            {
                if (_studyType != value)
                {
                    _studyType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<Anonymous> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("inputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SimulationInput> Inputs
        {
            get { return _inputs; }
            set
            {
                if (_inputs != value)
                {
                    _inputs = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("poolType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StudyTypeDefinitionPoolType? PoolType
        {
            get { return _poolType; }
            set
            {
                if (_poolType != value)
                {
                    _poolType = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StudyTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyTypeDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SimTypeDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private SimTypeDefinitionSimType? _simType;
        private string _name;
        private System.Collections.Generic.List<string> _knownOutputFiles;

        [Newtonsoft.Json.JsonProperty("simType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SimTypeDefinitionSimType? SimType
        {
            get { return _simType; }
            set
            {
                if (_simType != value)
                {
                    _simType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("knownOutputFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> KnownOutputFiles
        {
            get { return _knownOutputFiles; }
            set
            {
                if (_knownOutputFiles != value)
                {
                    _knownOutputFiles = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SimTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimTypeDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SimulationInput : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private bool? _isRequired;

        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequired
        {
            get { return _isRequired; }
            set
            {
                if (_isRequired != value)
                {
                    _isRequired = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SimulationInput FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationInput>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetStudiesQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private StudyDocumentsAndContinuationToken _queryResults;
        private System.Collections.Generic.List<DocumentCustomPropertyGroup> _groupResults;
        private UserInformationForDocumentResult _userInformation;

        [Newtonsoft.Json.JsonProperty("queryResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyDocumentsAndContinuationToken QueryResults
        {
            get { return _queryResults; }
            set
            {
                if (_queryResults != value)
                {
                    _queryResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("groupResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyGroup> GroupResults
        {
            get { return _groupResults; }
            set
            {
                if (_groupResults != value)
                {
                    _groupResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInformationForDocumentResult UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetStudiesQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudiesQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StudyDocumentsAndContinuationToken : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<CanopyDocument> _documents;
        private string _continuationToken;
        private bool? _hasMoreResults;

        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("continuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("hasMoreResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMoreResults
        {
            get { return _hasMoreResults; }
            set
            {
                if (_hasMoreResults != value)
                {
                    _hasMoreResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StudyDocumentsAndContinuationToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyDocumentsAndContinuationToken>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetTenantAccessInformationQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantUrl;
        private string _accessSignature;

        [Newtonsoft.Json.JsonProperty("tenantUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantUrl
        {
            get { return _tenantUrl; }
            set
            {
                if (_tenantUrl != value)
                {
                    _tenantUrl = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("accessSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetTenantAccessInformationQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantAccessInformationQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NewStudyData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private bool? _isTransient;
        private NewStudyDataStudyType? _studyType;
        private System.Collections.Generic.List<NewStudyDataSource> _sources;
        private System.Collections.Generic.List<DocumentCustomPropertyData> _properties;
        private object _study;
        private string _simVersion;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isTransient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTransient
        {
            get { return _isTransient; }
            set
            {
                if (_isTransient != value)
                {
                    _isTransient = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("studyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewStudyDataStudyType? StudyType
        {
            get { return _studyType; }
            set
            {
                if (_studyType != value)
                {
                    _studyType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NewStudyDataSource> Sources
        {
            get { return _sources; }
            set
            {
                if (_sources != value)
                {
                    _sources = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("study", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Study
        {
            get { return _study; }
            set
            {
                if (_study != value)
                {
                    _study = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NewStudyData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewStudyData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NewStudyDataSource : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private string _userId;
        private string _configId;
        private string _name;
        private bool? _isEdited;

        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("configId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigId
        {
            get { return _configId; }
            set
            {
                if (_configId != value)
                {
                    _configId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isEdited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEdited
        {
            get { return _isEdited; }
            set
            {
                if (_isEdited != value)
                {
                    _isEdited = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NewStudyDataSource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewStudyDataSource>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostStudyResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _studyId;

        [Newtonsoft.Json.JsonProperty("studyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StudyId
        {
            get { return _studyId; }
            set
            {
                if (_studyId != value)
                {
                    _studyId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PostStudyResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostStudyResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdatedStudyData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private System.Collections.Generic.List<DocumentCustomPropertyData> _properties;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdatedStudyData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedStudyData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetStudyQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private CanopyDocument _study;
        private string _convertedSimVersion;
        private StudyBlobAccessInformation _accessInformation;
        private System.Collections.Generic.List<Anonymous2> _simTypes;
        private UserInformationForDocumentResult _userInformation;

        [Newtonsoft.Json.JsonProperty("study", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CanopyDocument Study
        {
            get { return _study; }
            set
            {
                if (_study != value)
                {
                    _study = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("convertedSimVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertedSimVersion
        {
            get { return _convertedSimVersion; }
            set
            {
                if (_convertedSimVersion != value)
                {
                    _convertedSimVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("accessInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyBlobAccessInformation AccessInformation
        {
            get { return _accessInformation; }
            set
            {
                if (_accessInformation != value)
                {
                    _accessInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<Anonymous2> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInformationForDocumentResult UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetStudyQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StudyBlobAccessInformation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _url;
        private string _accessSignature;
        private System.Collections.Generic.List<BlobAccessInformation> _jobs;

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("accessSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("jobs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BlobAccessInformation> Jobs
        {
            get { return _jobs; }
            set
            {
                if (_jobs != value)
                {
                    _jobs = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StudyBlobAccessInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyBlobAccessInformation>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BlobAccessInformation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _url;
        private string _accessSignature;

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("accessSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BlobAccessInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BlobAccessInformation>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetStudyDownloadUrlQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _accessSignature;
        private string _expiry;

        [Newtonsoft.Json.JsonProperty("accessSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("expiry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expiry
        {
            get { return _expiry; }
            set
            {
                if (_expiry != value)
                {
                    _expiry = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetStudyDownloadUrlQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyDownloadUrlQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetStudyJobsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private StudyJobDocumentsAndContinuationToken _queryResults;
        private System.Collections.Generic.List<DocumentCustomPropertyGroup> _groupResults;

        [Newtonsoft.Json.JsonProperty("queryResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyJobDocumentsAndContinuationToken QueryResults
        {
            get { return _queryResults; }
            set
            {
                if (_queryResults != value)
                {
                    _queryResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("groupResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyGroup> GroupResults
        {
            get { return _groupResults; }
            set
            {
                if (_groupResults != value)
                {
                    _groupResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetStudyJobsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyJobsQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StudyJobDocumentsAndContinuationToken : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<CanopyDocument> _documents;
        private string _continuationToken;
        private bool? _hasMoreResults;

        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("continuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("hasMoreResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMoreResults
        {
            get { return _hasMoreResults; }
            set
            {
                if (_hasMoreResults != value)
                {
                    _hasMoreResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StudyJobDocumentsAndContinuationToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyJobDocumentsAndContinuationToken>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetStudyJobQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private CanopyDocument _studyJob;
        private object _studyJobInput;
        private string _convertedSimVersion;
        private System.Collections.Generic.List<Anonymous3> _simTypes;
        private BlobAccessInformation _accessInformation;

        [Newtonsoft.Json.JsonProperty("studyJob", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CanopyDocument StudyJob
        {
            get { return _studyJob; }
            set
            {
                if (_studyJob != value)
                {
                    _studyJob = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("studyJobInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object StudyJobInput
        {
            get { return _studyJobInput; }
            set
            {
                if (_studyJobInput != value)
                {
                    _studyJobInput = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("convertedSimVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertedSimVersion
        {
            get { return _convertedSimVersion; }
            set
            {
                if (_convertedSimVersion != value)
                {
                    _convertedSimVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<Anonymous3> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("accessInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BlobAccessInformation AccessInformation
        {
            get { return _accessInformation; }
            set
            {
                if (_accessInformation != value)
                {
                    _accessInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetStudyJobQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyJobQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetStudyJobMetadataQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private CanopyDocument _studyJob;
        private BlobAccessInformation _accessInformation;

        [Newtonsoft.Json.JsonProperty("studyJob", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CanopyDocument StudyJob
        {
            get { return _studyJob; }
            set
            {
                if (_studyJob != value)
                {
                    _studyJob = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("accessInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BlobAccessInformation AccessInformation
        {
            get { return _accessInformation; }
            set
            {
                if (_accessInformation != value)
                {
                    _accessInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetStudyJobMetadataQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyJobMetadataQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetAllSupportSessionsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<CanopyDocument> _documents;
        private UserInformationForDocumentResult _userInformation;

        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInformationForDocumentResult UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetAllSupportSessionsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAllSupportSessionsQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetSupportSessionQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private SupportSession _session;
        private UserInformationForDocumentResult _userInformation;

        [Newtonsoft.Json.JsonProperty("session", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupportSession Session
        {
            get { return _session; }
            set
            {
                if (_session != value)
                {
                    _session = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInformationForDocumentResult UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetSupportSessionQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSupportSessionQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SupportSessionData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _message;
        private bool? _isClosed;

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isClosed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsClosed
        {
            get { return _isClosed; }
            set
            {
                if (_isClosed != value)
                {
                    _isClosed = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SupportSessionData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupportSessionData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NewTenantData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _shortName;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NewTenantData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewTenantData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetTenantsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<TenantItem> _tenants;

        [Newtonsoft.Json.JsonProperty("tenants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TenantItem> Tenants
        {
            get { return _tenants; }
            set
            {
                if (_tenants != value)
                {
                    _tenants = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetTenantsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantsQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TenantItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _name;
        private string _shortName;
        private System.DateTime? _creationDate;
        private bool? _isEnabled;

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TenantItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TenantItem>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdatedTenantData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _shortName;
        private bool? _isEnabled;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdatedTenantData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedTenantData>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetTenantQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _shortName;
        private System.DateTime? _creationDate;
        private bool? _isEnabled;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetTenantQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetTenantUsersQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<UserItem> _users;

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserItem> Users
        {
            get { return _users; }
            set
            {
                if (_users != value)
                {
                    _users = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetTenantUsersQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantUsersQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _userId;
        private string _username;
        private string _email;
        private System.Collections.Generic.List<string> _roles;
        private bool? _isEnabled;

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Roles
        {
            get { return _roles; }
            set
            {
                if (_roles != value)
                {
                    _roles = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserItem>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetTenantDefaultCustomPropertyNamesQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private TenantDefaultCustomPropertyNames _settings;
        private System.Collections.Generic.List<DocumentTypeCustomPropertyGroups> _customPropertyGroups;
        private System.Collections.Generic.List<Anonymous4> _studyTypes;
        private System.Collections.Generic.List<string> _configTypes;

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenantDefaultCustomPropertyNames Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("customPropertyGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentTypeCustomPropertyGroups> CustomPropertyGroups
        {
            get { return _customPropertyGroups; }
            set
            {
                if (_customPropertyGroups != value)
                {
                    _customPropertyGroups = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("studyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<Anonymous4> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("configTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ConfigTypes
        {
            get { return _configTypes; }
            set
            {
                if (_configTypes != value)
                {
                    _configTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetTenantDefaultCustomPropertyNamesQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantDefaultCustomPropertyNamesQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TenantDefaultCustomPropertyNames : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<DefaultCustomPropertyNames> _defaultCustomPropertyNames;

        [Newtonsoft.Json.JsonProperty("defaultCustomPropertyNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DefaultCustomPropertyNames> DefaultCustomPropertyNames
        {
            get { return _defaultCustomPropertyNames; }
            set
            {
                if (_defaultCustomPropertyNames != value)
                {
                    _defaultCustomPropertyNames = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TenantDefaultCustomPropertyNames FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TenantDefaultCustomPropertyNames>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentTypeCustomPropertyGroups : System.ComponentModel.INotifyPropertyChanged
    {
        private DocumentTypeCustomPropertyGroupsTarget? _target;
        private System.Collections.Generic.List<DocumentCustomPropertyGroup> _properties;

        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentTypeCustomPropertyGroupsTarget? Target
        {
            get { return _target; }
            set
            {
                if (_target != value)
                {
                    _target = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyGroup> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DocumentTypeCustomPropertyGroups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentTypeCustomPropertyGroups>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DefaultCustomPropertyNames : System.ComponentModel.INotifyPropertyChanged
    {
        private DefaultCustomPropertyNamesTarget? _target;
        private System.Collections.Generic.List<string> _names;

        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DefaultCustomPropertyNamesTarget? Target
        {
            get { return _target; }
            set
            {
                if (_target != value)
                {
                    _target = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Names
        {
            get { return _names; }
            set
            {
                if (_names != value)
                {
                    _names = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DefaultCustomPropertyNames FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultCustomPropertyNames>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdatedTenantDefaultCustomPropertyNames : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<DefaultCustomPropertyNames> _defaultCustomPropertyNames;

        [Newtonsoft.Json.JsonProperty("defaultCustomPropertyNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DefaultCustomPropertyNames> DefaultCustomPropertyNames
        {
            get { return _defaultCustomPropertyNames; }
            set
            {
                if (_defaultCustomPropertyNames != value)
                {
                    _defaultCustomPropertyNames = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdatedTenantDefaultCustomPropertyNames FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedTenantDefaultCustomPropertyNames>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetTenantSettingsSimVersionQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetTenantSettingsSimVersionQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantSettingsSimVersionQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdatedTenantSettingsSimVersion : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdatedTenantSettingsSimVersion FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedTenantSettingsSimVersion>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetAdminTenantSettingsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private AdminTenantSettings _settings;
        private string _eTag;

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdminTenantSettings Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("eTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetAdminTenantSettingsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAdminTenantSettingsQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdminTenantSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<Anonymous5> _studyTypes;
        private System.Collections.Generic.List<string> _tags;
        private string _simVersion;
        private PoolSettings _poolSettings;
        private PoolSettings _secondaryPoolSettings;
        private PoolSettings _heavyPoolSettings;

        [Newtonsoft.Json.JsonProperty("studyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<Anonymous5> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Tags
        {
            get { return _tags; }
            set
            {
                if (_tags != value)
                {
                    _tags = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("poolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings PoolSettings
        {
            get { return _poolSettings; }
            set
            {
                if (_poolSettings != value)
                {
                    _poolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("secondaryPoolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings SecondaryPoolSettings
        {
            get { return _secondaryPoolSettings; }
            set
            {
                if (_secondaryPoolSettings != value)
                {
                    _secondaryPoolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("heavyPoolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings HeavyPoolSettings
        {
            get { return _heavyPoolSettings; }
            set
            {
                if (_heavyPoolSettings != value)
                {
                    _heavyPoolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AdminTenantSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdminTenantSettings>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PoolSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private string _poolId;
        private string _autoScaleFormula;

        [Newtonsoft.Json.JsonProperty("poolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoolId
        {
            get { return _poolId; }
            set
            {
                if (_poolId != value)
                {
                    _poolId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("autoScaleFormula", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutoScaleFormula
        {
            get { return _autoScaleFormula; }
            set
            {
                if (_autoScaleFormula != value)
                {
                    _autoScaleFormula = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PoolSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PoolSettings>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdatedAdminTenantSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private Builder _settings;
        private string _eTag;

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builder Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("eTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdatedAdminTenantSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedAdminTenantSettings>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Builder : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<Anonymous6> _studyTypes;
        private System.Collections.Generic.List<string> _tags;
        private string _simVersion;
        private PoolSettings _poolSettings;
        private PoolSettings _secondaryPoolSettings;
        private PoolSettings _heavyPoolSettings;

        [Newtonsoft.Json.JsonProperty("studyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<Anonymous6> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Tags
        {
            get { return _tags; }
            set
            {
                if (_tags != value)
                {
                    _tags = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("poolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings PoolSettings
        {
            get { return _poolSettings; }
            set
            {
                if (_poolSettings != value)
                {
                    _poolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("secondaryPoolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings SecondaryPoolSettings
        {
            get { return _secondaryPoolSettings; }
            set
            {
                if (_secondaryPoolSettings != value)
                {
                    _secondaryPoolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("heavyPoolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings HeavyPoolSettings
        {
            get { return _heavyPoolSettings; }
            set
            {
                if (_heavyPoolSettings != value)
                {
                    _heavyPoolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Builder FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Builder>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetUserSettingsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private UserSettings _settings;
        private string _eTag;

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserSettings Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("eTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetUserSettingsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetUserSettingsQueryResult>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<ChannelSettings> _channels;
        private System.Collections.Generic.List<ChartSettings> _charts;

        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChannelSettings> Channels
        {
            get { return _channels; }
            set
            {
                if (_channels != value)
                {
                    _channels = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("charts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChartSettings> Charts
        {
            get { return _charts; }
            set
            {
                if (_charts != value)
                {
                    _charts = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSettings>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _units;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units
        {
            get { return _units; }
            set
            {
                if (_units != value)
                {
                    _units = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ChannelSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChannelSettings>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChartSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private string _chartType;
        private string _chartId;
        private string _preferredChartId;
        private string _preferredChartUserId;

        [Newtonsoft.Json.JsonProperty("chartType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChartType
        {
            get { return _chartType; }
            set
            {
                if (_chartType != value)
                {
                    _chartType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("chartId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChartId
        {
            get { return _chartId; }
            set
            {
                if (_chartId != value)
                {
                    _chartId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("preferredChartId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreferredChartId
        {
            get { return _preferredChartId; }
            set
            {
                if (_preferredChartId != value)
                {
                    _preferredChartId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("preferredChartUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreferredChartUserId
        {
            get { return _preferredChartUserId; }
            set
            {
                if (_preferredChartUserId != value)
                {
                    _preferredChartUserId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ChartSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChartSettings>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdatedUserSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private Builder2 _settings;
        private string _eTag;

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builder2 Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("eTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdatedUserSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedUserSettings>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Builder2 : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<ChannelSettings> _channels;
        private System.Collections.Generic.List<ChartSettings> _charts;

        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChannelSettings> Channels
        {
            get { return _channels; }
            set
            {
                if (_channels != value)
                {
                    _channels = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("charts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChartSettings> Charts
        {
            get { return _charts; }
            set
            {
                if (_charts != value)
                {
                    _charts = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Builder2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Builder2>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CanopyDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "automatedTest")]
        AutomatedTest = 0,

        [System.Runtime.Serialization.EnumMember(Value = "config")]
        Config = 1,

        [System.Runtime.Serialization.EnumMember(Value = "study")]
        Study = 2,

        [System.Runtime.Serialization.EnumMember(Value = "tenantSettings")]
        TenantSettings = 3,

        [System.Runtime.Serialization.EnumMember(Value = "adminTenantSettings")]
        AdminTenantSettings = 4,

        [System.Runtime.Serialization.EnumMember(Value = "configSubTree")]
        ConfigSubTree = 5,

        [System.Runtime.Serialization.EnumMember(Value = "userSettings")]
        UserSettings = 6,

        [System.Runtime.Serialization.EnumMember(Value = "job")]
        Job = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ListFilterOrderByProperty
    {
        [System.Runtime.Serialization.EnumMember(Value = "creationDate")]
        CreationDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = "modifiedDate")]
        ModifiedDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = "name")]
        Name = 2,

        [System.Runtime.Serialization.EnumMember(Value = "index")]
        Index = 3,

        [System.Runtime.Serialization.EnumMember(Value = "state")]
        State = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ListFilterGroupOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = "and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = "or")]
        Or = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ListFilterConditionOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = "equals")]
        Equals = 0,

        [System.Runtime.Serialization.EnumMember(Value = "notEquals")]
        NotEquals = 1,

        [System.Runtime.Serialization.EnumMember(Value = "lessThan")]
        LessThan = 2,

        [System.Runtime.Serialization.EnumMember(Value = "greaterThan")]
        GreaterThan = 3,

        [System.Runtime.Serialization.EnumMember(Value = "lessThanOrEquals")]
        LessThanOrEquals = 4,

        [System.Runtime.Serialization.EnumMember(Value = "greaterThanOrEquals")]
        GreaterThanOrEquals = 5,

        [System.Runtime.Serialization.EnumMember(Value = "exists")]
        Exists = 6,

        [System.Runtime.Serialization.EnumMember(Value = "notExists")]
        NotExists = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GetPoolStatusQueryResultPoolState
    {
        [System.Runtime.Serialization.EnumMember(Value = "active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = "deleting")]
        Deleting = 1,

        [System.Runtime.Serialization.EnumMember(Value = "upgrading")]
        Upgrading = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GetPoolStatusQueryResultAllocationState
    {
        [System.Runtime.Serialization.EnumMember(Value = "steady")]
        Steady = 0,

        [System.Runtime.Serialization.EnumMember(Value = "resizing")]
        Resizing = 1,

        [System.Runtime.Serialization.EnumMember(Value = "stopping")]
        Stopping = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ComputeNodeResultState
    {
        [System.Runtime.Serialization.EnumMember(Value = "idle")]
        Idle = 0,

        [System.Runtime.Serialization.EnumMember(Value = "rebooting")]
        Rebooting = 1,

        [System.Runtime.Serialization.EnumMember(Value = "reimaging")]
        Reimaging = 2,

        [System.Runtime.Serialization.EnumMember(Value = "running")]
        Running = 3,

        [System.Runtime.Serialization.EnumMember(Value = "unusable")]
        Unusable = 4,

        [System.Runtime.Serialization.EnumMember(Value = "creating")]
        Creating = 5,

        [System.Runtime.Serialization.EnumMember(Value = "starting")]
        Starting = 6,

        [System.Runtime.Serialization.EnumMember(Value = "waitingForStartTask")]
        WaitingForStartTask = 7,

        [System.Runtime.Serialization.EnumMember(Value = "startTaskFailed")]
        StartTaskFailed = 8,

        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 9,

        [System.Runtime.Serialization.EnumMember(Value = "leavingPool")]
        LeavingPool = 10,

        [System.Runtime.Serialization.EnumMember(Value = "offline")]
        Offline = 11,

        [System.Runtime.Serialization.EnumMember(Value = "preempted")]
        Preempted = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StudyTypeDefinitionStudyType
    {
        [System.Runtime.Serialization.EnumMember(Value = "straightSim")]
        StraightSim = 0,

        [System.Runtime.Serialization.EnumMember(Value = "apexSim")]
        ApexSim = 1,

        [System.Runtime.Serialization.EnumMember(Value = "quasiStaticLap")]
        QuasiStaticLap = 2,

        [System.Runtime.Serialization.EnumMember(Value = "generateRacingLine")]
        GenerateRacingLine = 3,

        [System.Runtime.Serialization.EnumMember(Value = "quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,

        [System.Runtime.Serialization.EnumMember(Value = "deploymentLap")]
        DeploymentLap = 5,

        [System.Runtime.Serialization.EnumMember(Value = "failureSim")]
        FailureSim = 6,

        [System.Runtime.Serialization.EnumMember(Value = "virtual4Post")]
        Virtual4Post = 7,

        [System.Runtime.Serialization.EnumMember(Value = "driveCycleSim")]
        DriveCycleSim = 8,

        [System.Runtime.Serialization.EnumMember(Value = "dynamicLap")]
        DynamicLap = 9,

        [System.Runtime.Serialization.EnumMember(Value = "dynamicMultiLap")]
        DynamicMultiLap = 10,

        [System.Runtime.Serialization.EnumMember(Value = "allLapSims")]
        AllLapSims = 11,

        [System.Runtime.Serialization.EnumMember(Value = "dragSim")]
        DragSim = 12,

        [System.Runtime.Serialization.EnumMember(Value = "thermalReplay")]
        ThermalReplay = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = "StraightSim")]
        StraightSim = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ApexSim")]
        ApexSim = 1,

        [System.Runtime.Serialization.EnumMember(Value = "QuasiStaticLap")]
        QuasiStaticLap = 2,

        [System.Runtime.Serialization.EnumMember(Value = "GenerateRacingLine")]
        GenerateRacingLine = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DeploymentLap")]
        DeploymentLap = 4,

        [System.Runtime.Serialization.EnumMember(Value = "FailureSim")]
        FailureSim = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Virtual4Post")]
        Virtual4Post = 6,

        [System.Runtime.Serialization.EnumMember(Value = "DriveCycleSim")]
        DriveCycleSim = 7,

        [System.Runtime.Serialization.EnumMember(Value = "DynamicLap")]
        DynamicLap = 8,

        [System.Runtime.Serialization.EnumMember(Value = "DragSim")]
        DragSim = 9,

        [System.Runtime.Serialization.EnumMember(Value = "DynamicMultiLap")]
        DynamicMultiLap = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ThermalReplay")]
        ThermalReplay = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StudyTypeDefinitionPoolType
    {
        [System.Runtime.Serialization.EnumMember(Value = "primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = "secondary")]
        Secondary = 1,

        [System.Runtime.Serialization.EnumMember(Value = "heavy")]
        Heavy = 2,

        [System.Runtime.Serialization.EnumMember(Value = "studyMonitor")]
        StudyMonitor = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SimTypeDefinitionSimType
    {
        [System.Runtime.Serialization.EnumMember(Value = "StraightSim")]
        StraightSim = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ApexSim")]
        ApexSim = 1,

        [System.Runtime.Serialization.EnumMember(Value = "QuasiStaticLap")]
        QuasiStaticLap = 2,

        [System.Runtime.Serialization.EnumMember(Value = "GenerateRacingLine")]
        GenerateRacingLine = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DeploymentLap")]
        DeploymentLap = 4,

        [System.Runtime.Serialization.EnumMember(Value = "FailureSim")]
        FailureSim = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Virtual4Post")]
        Virtual4Post = 6,

        [System.Runtime.Serialization.EnumMember(Value = "DriveCycleSim")]
        DriveCycleSim = 7,

        [System.Runtime.Serialization.EnumMember(Value = "DynamicLap")]
        DynamicLap = 8,

        [System.Runtime.Serialization.EnumMember(Value = "DragSim")]
        DragSim = 9,

        [System.Runtime.Serialization.EnumMember(Value = "DynamicMultiLap")]
        DynamicMultiLap = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ThermalReplay")]
        ThermalReplay = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum NewStudyDataStudyType
    {
        [System.Runtime.Serialization.EnumMember(Value = "straightSim")]
        StraightSim = 0,

        [System.Runtime.Serialization.EnumMember(Value = "apexSim")]
        ApexSim = 1,

        [System.Runtime.Serialization.EnumMember(Value = "quasiStaticLap")]
        QuasiStaticLap = 2,

        [System.Runtime.Serialization.EnumMember(Value = "generateRacingLine")]
        GenerateRacingLine = 3,

        [System.Runtime.Serialization.EnumMember(Value = "quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,

        [System.Runtime.Serialization.EnumMember(Value = "deploymentLap")]
        DeploymentLap = 5,

        [System.Runtime.Serialization.EnumMember(Value = "failureSim")]
        FailureSim = 6,

        [System.Runtime.Serialization.EnumMember(Value = "virtual4Post")]
        Virtual4Post = 7,

        [System.Runtime.Serialization.EnumMember(Value = "driveCycleSim")]
        DriveCycleSim = 8,

        [System.Runtime.Serialization.EnumMember(Value = "dynamicLap")]
        DynamicLap = 9,

        [System.Runtime.Serialization.EnumMember(Value = "dynamicMultiLap")]
        DynamicMultiLap = 10,

        [System.Runtime.Serialization.EnumMember(Value = "allLapSims")]
        AllLapSims = 11,

        [System.Runtime.Serialization.EnumMember(Value = "dragSim")]
        DragSim = 12,

        [System.Runtime.Serialization.EnumMember(Value = "thermalReplay")]
        ThermalReplay = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous2
    {
        [System.Runtime.Serialization.EnumMember(Value = "StraightSim")]
        StraightSim = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ApexSim")]
        ApexSim = 1,

        [System.Runtime.Serialization.EnumMember(Value = "QuasiStaticLap")]
        QuasiStaticLap = 2,

        [System.Runtime.Serialization.EnumMember(Value = "GenerateRacingLine")]
        GenerateRacingLine = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DeploymentLap")]
        DeploymentLap = 4,

        [System.Runtime.Serialization.EnumMember(Value = "FailureSim")]
        FailureSim = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Virtual4Post")]
        Virtual4Post = 6,

        [System.Runtime.Serialization.EnumMember(Value = "DriveCycleSim")]
        DriveCycleSim = 7,

        [System.Runtime.Serialization.EnumMember(Value = "DynamicLap")]
        DynamicLap = 8,

        [System.Runtime.Serialization.EnumMember(Value = "DragSim")]
        DragSim = 9,

        [System.Runtime.Serialization.EnumMember(Value = "DynamicMultiLap")]
        DynamicMultiLap = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ThermalReplay")]
        ThermalReplay = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous3
    {
        [System.Runtime.Serialization.EnumMember(Value = "StraightSim")]
        StraightSim = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ApexSim")]
        ApexSim = 1,

        [System.Runtime.Serialization.EnumMember(Value = "QuasiStaticLap")]
        QuasiStaticLap = 2,

        [System.Runtime.Serialization.EnumMember(Value = "GenerateRacingLine")]
        GenerateRacingLine = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DeploymentLap")]
        DeploymentLap = 4,

        [System.Runtime.Serialization.EnumMember(Value = "FailureSim")]
        FailureSim = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Virtual4Post")]
        Virtual4Post = 6,

        [System.Runtime.Serialization.EnumMember(Value = "DriveCycleSim")]
        DriveCycleSim = 7,

        [System.Runtime.Serialization.EnumMember(Value = "DynamicLap")]
        DynamicLap = 8,

        [System.Runtime.Serialization.EnumMember(Value = "DragSim")]
        DragSim = 9,

        [System.Runtime.Serialization.EnumMember(Value = "DynamicMultiLap")]
        DynamicMultiLap = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ThermalReplay")]
        ThermalReplay = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous4
    {
        [System.Runtime.Serialization.EnumMember(Value = "straightSim")]
        StraightSim = 0,

        [System.Runtime.Serialization.EnumMember(Value = "apexSim")]
        ApexSim = 1,

        [System.Runtime.Serialization.EnumMember(Value = "quasiStaticLap")]
        QuasiStaticLap = 2,

        [System.Runtime.Serialization.EnumMember(Value = "generateRacingLine")]
        GenerateRacingLine = 3,

        [System.Runtime.Serialization.EnumMember(Value = "quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,

        [System.Runtime.Serialization.EnumMember(Value = "deploymentLap")]
        DeploymentLap = 5,

        [System.Runtime.Serialization.EnumMember(Value = "failureSim")]
        FailureSim = 6,

        [System.Runtime.Serialization.EnumMember(Value = "virtual4Post")]
        Virtual4Post = 7,

        [System.Runtime.Serialization.EnumMember(Value = "driveCycleSim")]
        DriveCycleSim = 8,

        [System.Runtime.Serialization.EnumMember(Value = "dynamicLap")]
        DynamicLap = 9,

        [System.Runtime.Serialization.EnumMember(Value = "dynamicMultiLap")]
        DynamicMultiLap = 10,

        [System.Runtime.Serialization.EnumMember(Value = "allLapSims")]
        AllLapSims = 11,

        [System.Runtime.Serialization.EnumMember(Value = "dragSim")]
        DragSim = 12,

        [System.Runtime.Serialization.EnumMember(Value = "thermalReplay")]
        ThermalReplay = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DocumentTypeCustomPropertyGroupsTarget
    {
        [System.Runtime.Serialization.EnumMember(Value = "car")]
        Car = 0,

        [System.Runtime.Serialization.EnumMember(Value = "track")]
        Track = 1,

        [System.Runtime.Serialization.EnumMember(Value = "weather")]
        Weather = 2,

        [System.Runtime.Serialization.EnumMember(Value = "exploration")]
        Exploration = 3,

        [System.Runtime.Serialization.EnumMember(Value = "virtual4PostOptions")]
        Virtual4PostOptions = 4,

        [System.Runtime.Serialization.EnumMember(Value = "userMaths")]
        UserMaths = 5,

        [System.Runtime.Serialization.EnumMember(Value = "telemetry")]
        Telemetry = 6,

        [System.Runtime.Serialization.EnumMember(Value = "driveCycle")]
        DriveCycle = 7,

        [System.Runtime.Serialization.EnumMember(Value = "study")]
        Study = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DefaultCustomPropertyNamesTarget
    {
        [System.Runtime.Serialization.EnumMember(Value = "car")]
        Car = 0,

        [System.Runtime.Serialization.EnumMember(Value = "track")]
        Track = 1,

        [System.Runtime.Serialization.EnumMember(Value = "weather")]
        Weather = 2,

        [System.Runtime.Serialization.EnumMember(Value = "exploration")]
        Exploration = 3,

        [System.Runtime.Serialization.EnumMember(Value = "virtual4PostOptions")]
        Virtual4PostOptions = 4,

        [System.Runtime.Serialization.EnumMember(Value = "userMaths")]
        UserMaths = 5,

        [System.Runtime.Serialization.EnumMember(Value = "telemetry")]
        Telemetry = 6,

        [System.Runtime.Serialization.EnumMember(Value = "driveCycle")]
        DriveCycle = 7,

        [System.Runtime.Serialization.EnumMember(Value = "study")]
        Study = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous5
    {
        [System.Runtime.Serialization.EnumMember(Value = "straightSim")]
        StraightSim = 0,

        [System.Runtime.Serialization.EnumMember(Value = "apexSim")]
        ApexSim = 1,

        [System.Runtime.Serialization.EnumMember(Value = "quasiStaticLap")]
        QuasiStaticLap = 2,

        [System.Runtime.Serialization.EnumMember(Value = "generateRacingLine")]
        GenerateRacingLine = 3,

        [System.Runtime.Serialization.EnumMember(Value = "quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,

        [System.Runtime.Serialization.EnumMember(Value = "deploymentLap")]
        DeploymentLap = 5,

        [System.Runtime.Serialization.EnumMember(Value = "failureSim")]
        FailureSim = 6,

        [System.Runtime.Serialization.EnumMember(Value = "virtual4Post")]
        Virtual4Post = 7,

        [System.Runtime.Serialization.EnumMember(Value = "driveCycleSim")]
        DriveCycleSim = 8,

        [System.Runtime.Serialization.EnumMember(Value = "dynamicLap")]
        DynamicLap = 9,

        [System.Runtime.Serialization.EnumMember(Value = "dynamicMultiLap")]
        DynamicMultiLap = 10,

        [System.Runtime.Serialization.EnumMember(Value = "allLapSims")]
        AllLapSims = 11,

        [System.Runtime.Serialization.EnumMember(Value = "dragSim")]
        DragSim = 12,

        [System.Runtime.Serialization.EnumMember(Value = "thermalReplay")]
        ThermalReplay = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous6
    {
        [System.Runtime.Serialization.EnumMember(Value = "straightSim")]
        StraightSim = 0,

        [System.Runtime.Serialization.EnumMember(Value = "apexSim")]
        ApexSim = 1,

        [System.Runtime.Serialization.EnumMember(Value = "quasiStaticLap")]
        QuasiStaticLap = 2,

        [System.Runtime.Serialization.EnumMember(Value = "generateRacingLine")]
        GenerateRacingLine = 3,

        [System.Runtime.Serialization.EnumMember(Value = "quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,

        [System.Runtime.Serialization.EnumMember(Value = "deploymentLap")]
        DeploymentLap = 5,

        [System.Runtime.Serialization.EnumMember(Value = "failureSim")]
        FailureSim = 6,

        [System.Runtime.Serialization.EnumMember(Value = "virtual4Post")]
        Virtual4Post = 7,

        [System.Runtime.Serialization.EnumMember(Value = "driveCycleSim")]
        DriveCycleSim = 8,

        [System.Runtime.Serialization.EnumMember(Value = "dynamicLap")]
        DynamicLap = 9,

        [System.Runtime.Serialization.EnumMember(Value = "dynamicMultiLap")]
        DynamicMultiLap = 10,

        [System.Runtime.Serialization.EnumMember(Value = "allLapSims")]
        AllLapSims = 11,

        [System.Runtime.Serialization.EnumMember(Value = "dragSim")]
        DragSim = 12,

        [System.Runtime.Serialization.EnumMember(Value = "thermalReplay")]
        ThermalReplay = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public class CanopyApiException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public CanopyApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public class CanopyApiException<TResult> : CanopyApiException
    {
        public TResult Result { get; private set; }

        public CanopyApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}