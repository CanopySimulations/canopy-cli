//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Canopy.Api.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IAccountSettingsClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAccountSettingsResult> GetAsync(string tenantId, string userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAccountSettingsResult> GetAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutAsync(string tenantId, string userId, UpdatedAccountSettings updatedAccountSettingsData);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutAsync(string tenantId, string userId, UpdatedAccountSettings updatedAccountSettingsData, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class AccountSettingsClient : CanopyApiClient, IAccountSettingsClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public AccountSettingsClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetAccountSettingsResult> GetAsync(string tenantId, string userId)
        {
            return GetAsync(tenantId, userId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetAccountSettingsResult> GetAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("account-settings/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAccountSettingsResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutAsync(string tenantId, string userId, UpdatedAccountSettings updatedAccountSettingsData)
        {
            return PutAsync(tenantId, userId, updatedAccountSettingsData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutAsync(string tenantId, string userId, UpdatedAccountSettings updatedAccountSettingsData, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (updatedAccountSettingsData == null)
                throw new System.ArgumentNullException("updatedAccountSettingsData");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("account-settings/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updatedAccountSettingsData, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IAvailabilityClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AvailabilityResult> GetAsync(bool? full, bool? ping);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AvailabilityResult> GetAsync(bool? full, bool? ping, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> HeadAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> HeadAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class AvailabilityClient : CanopyApiClient, IAvailabilityClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public AvailabilityClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AvailabilityResult> GetAsync(bool? full, bool? ping)
        {
            return GetAsync(full, ping, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AvailabilityResult> GetAsync(bool? full, bool? ping, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Availability?");
            if (full != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("full") + "=").Append(System.Uri.EscapeDataString(ConvertToString(full, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ping != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ping") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ping, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AvailabilityResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> HeadAsync()
        {
            return HeadAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> HeadAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Availability");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("HEAD");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IConfigClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> EncryptAsync(object data, string description);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> EncryptAsync(object data, string description, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> DecryptAsync(object data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> DecryptAsync(object data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetEncryptedDataQueryResult> EncryptWithMetadataAsync(DataToEncrypt data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetEncryptedDataQueryResult> EncryptWithMetadataAsync(DataToEncrypt data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDecryptedDataQueryResult> DecryptWithMetadataAsync(DataToDecrypt data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDecryptedDataQueryResult> DecryptWithMetadataAsync(DataToDecrypt data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigDeprecatedAsync(string targetSimVersion, UpgradeConfigData data, string subTreePath);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigDeprecatedAsync(string targetSimVersion, UpgradeConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigAsync(string tenantId, string targetSimVersion, UpgradeConfigData data, string subTreePath);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigAsync(string tenantId, string targetSimVersion, UpgradeConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigsQueryResult> GetConfigsAsync(string tenantId, string configType, string filter, string subTreePath, string resultType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigsQueryResult> GetConfigsAsync(string tenantId, string configType, string filter, string subTreePath, string resultType, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PostConfigAsync(string tenantId, NewConfigData data, string subTreePath);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PostConfigAsync(string tenantId, NewConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigNamesQueryResult> GetConfigNamesAsync(string tenantId, string configType, string resultType, string subTreePath, string simVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigNamesQueryResult> GetConfigNamesAsync(string tenantId, string configType, string resultType, string subTreePath, string simVersion, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsAsync(string tenantId, NewBatchConfigData data, string subTreePath);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsAsync(string tenantId, NewBatchConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigAsync(string tenantId, string configId, string subTreePath, string simVersion, string configVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigAsync(string tenantId, string configId, string subTreePath, string simVersion, string configVersion, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutConfigAsync(string tenantId, string configId, UpdatedConfigData data, string subTreePath);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutConfigAsync(string tenantId, string configId, UpdatedConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteConfigAsync(string tenantId, string configId, string subTreePath, bool? undelete);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteConfigAsync(string tenantId, string configId, string subTreePath, bool? undelete, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutConfigOwnerAsync(string tenantId, string configId, ConfigOwnerData ownerData);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutConfigOwnerAsync(string tenantId, string configId, ConfigOwnerData ownerData, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigVersionsQueryResult> GetConfigVersionsAsync(string tenantId, string configId, string subTreePath);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetConfigVersionsQueryResult> GetConfigVersionsAsync(string tenantId, string configId, string subTreePath, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsDeprecatedAsync(string tenantId, string userId, NewBatchConfigData data, string subTreePath);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsDeprecatedAsync(string tenantId, string userId, NewBatchConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<string> PostConfigDeprecatedAsync(string tenantId, string userId, NewConfigData data, string subTreePath);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<string> PostConfigDeprecatedAsync(string tenantId, string userId, NewConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath, string simVersion, string configVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath, string simVersion, string configVersion, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task PutConfigDeprecatedAsync(string tenantId, string userId, string configId, UpdatedConfigData data, string subTreePath);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task PutConfigDeprecatedAsync(string tenantId, string userId, string configId, UpdatedConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task DeleteConfigDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath, bool? undelete);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task DeleteConfigDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath, bool? undelete, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetConfigVersionsQueryResult> GetConfigVersionsDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetConfigVersionsQueryResult> GetConfigVersionsDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigWithoutUserIdDeprecatedAsync(string tenantId, string configId, string subTreePath, string simVersion, string configVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigWithoutUserIdDeprecatedAsync(string tenantId, string configId, string subTreePath, string simVersion, string configVersion, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ConfigClient : CanopyApiClient, IConfigClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public ConfigClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<object> EncryptAsync(object data, string description)
        {
            return EncryptAsync(data, description, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<object> EncryptAsync(object data, string description, System.Threading.CancellationToken cancellationToken)
        {
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/encrypt?");
            if (description != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("description") + "=").Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<object> DecryptAsync(object data)
        {
            return DecryptAsync(data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<object> DecryptAsync(object data, System.Threading.CancellationToken cancellationToken)
        {
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/decrypt");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetEncryptedDataQueryResult> EncryptWithMetadataAsync(DataToEncrypt data)
        {
            return EncryptWithMetadataAsync(data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetEncryptedDataQueryResult> EncryptWithMetadataAsync(DataToEncrypt data, System.Threading.CancellationToken cancellationToken)
        {
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/encryptWithMetadata");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEncryptedDataQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetDecryptedDataQueryResult> DecryptWithMetadataAsync(DataToDecrypt data)
        {
            return DecryptWithMetadataAsync(data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetDecryptedDataQueryResult> DecryptWithMetadataAsync(DataToDecrypt data, System.Threading.CancellationToken cancellationToken)
        {
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/decryptWithMetadata");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetDecryptedDataQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigDeprecatedAsync(string targetSimVersion, UpgradeConfigData data, string subTreePath)
        {
            return UpgradeConfigDeprecatedAsync(targetSimVersion, data, subTreePath, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigDeprecatedAsync(string targetSimVersion, UpgradeConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (targetSimVersion == null)
                throw new System.ArgumentNullException("targetSimVersion");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/upgrade/{targetSimVersion}?");
            urlBuilder_.Replace("{targetSimVersion}", System.Uri.EscapeDataString(ConvertToString(targetSimVersion, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpgradeConfigQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigAsync(string tenantId, string targetSimVersion, UpgradeConfigData data, string subTreePath)
        {
            return UpgradeConfigAsync(tenantId, targetSimVersion, data, subTreePath, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UpgradeConfigQueryResult> UpgradeConfigAsync(string tenantId, string targetSimVersion, UpgradeConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (targetSimVersion == null)
                throw new System.ArgumentNullException("targetSimVersion");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/upgrade/{tenantId}/{targetSimVersion}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{targetSimVersion}", System.Uri.EscapeDataString(ConvertToString(targetSimVersion, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpgradeConfigQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetConfigsQueryResult> GetConfigsAsync(string tenantId, string configType, string filter, string subTreePath, string resultType)
        {
            return GetConfigsAsync(tenantId, configType, filter, subTreePath, resultType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetConfigsQueryResult> GetConfigsAsync(string tenantId, string configType, string filter, string subTreePath, string resultType, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (configType == null)
                throw new System.ArgumentNullException("configType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("configType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(configType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (resultType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("resultType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(resultType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConfigsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> PostConfigAsync(string tenantId, NewConfigData data, string subTreePath)
        {
            return PostConfigAsync(tenantId, data, subTreePath, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> PostConfigAsync(string tenantId, NewConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetConfigNamesQueryResult> GetConfigNamesAsync(string tenantId, string configType, string resultType, string subTreePath, string simVersion)
        {
            return GetConfigNamesAsync(tenantId, configType, resultType, subTreePath, simVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetConfigNamesQueryResult> GetConfigNamesAsync(string tenantId, string configType, string resultType, string subTreePath, string simVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (configType == null)
                throw new System.ArgumentNullException("configType");
    
            if (resultType == null)
                throw new System.ArgumentNullException("resultType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/names?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("configType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(configType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("resultType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(resultType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (simVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConfigNamesQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsAsync(string tenantId, NewBatchConfigData data, string subTreePath)
        {
            return PostConfigsAsync(tenantId, data, subTreePath, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsAsync(string tenantId, NewBatchConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/batch?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BatchCreateConfigsResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigAsync(string tenantId, string configId, string subTreePath, string simVersion, string configVersion)
        {
            return GetConfigAsync(tenantId, configId, subTreePath, simVersion, configVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigAsync(string tenantId, string configId, string subTreePath, string simVersion, string configVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (configId == null)
                throw new System.ArgumentNullException("configId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{configId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (simVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (configVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("configVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(configVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConfigQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutConfigAsync(string tenantId, string configId, UpdatedConfigData data, string subTreePath)
        {
            return PutConfigAsync(tenantId, configId, data, subTreePath, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutConfigAsync(string tenantId, string configId, UpdatedConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (configId == null)
                throw new System.ArgumentNullException("configId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{configId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteConfigAsync(string tenantId, string configId, string subTreePath, bool? undelete)
        {
            return DeleteConfigAsync(tenantId, configId, subTreePath, undelete, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteConfigAsync(string tenantId, string configId, string subTreePath, bool? undelete, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (configId == null)
                throw new System.ArgumentNullException("configId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{configId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (undelete != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("undelete") + "=").Append(System.Uri.EscapeDataString(ConvertToString(undelete, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutConfigOwnerAsync(string tenantId, string configId, ConfigOwnerData ownerData)
        {
            return PutConfigOwnerAsync(tenantId, configId, ownerData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutConfigOwnerAsync(string tenantId, string configId, ConfigOwnerData ownerData, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (configId == null)
                throw new System.ArgumentNullException("configId");
    
            if (ownerData == null)
                throw new System.ArgumentNullException("ownerData");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{configId}/owner");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ownerData, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetConfigVersionsQueryResult> GetConfigVersionsAsync(string tenantId, string configId, string subTreePath)
        {
            return GetConfigVersionsAsync(tenantId, configId, subTreePath, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetConfigVersionsQueryResult> GetConfigVersionsAsync(string tenantId, string configId, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (configId == null)
                throw new System.ArgumentNullException("configId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{configId}/versions?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConfigVersionsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsDeprecatedAsync(string tenantId, string userId, NewBatchConfigData data, string subTreePath)
        {
            return PostConfigsDeprecatedAsync(tenantId, userId, data, subTreePath, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<BatchCreateConfigsResult> PostConfigsDeprecatedAsync(string tenantId, string userId, NewBatchConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}/batch?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BatchCreateConfigsResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<string> PostConfigDeprecatedAsync(string tenantId, string userId, NewConfigData data, string subTreePath)
        {
            return PostConfigDeprecatedAsync(tenantId, userId, data, subTreePath, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<string> PostConfigDeprecatedAsync(string tenantId, string userId, NewConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath, string simVersion, string configVersion)
        {
            return GetConfigDeprecatedAsync(tenantId, userId, configId, subTreePath, simVersion, configVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath, string simVersion, string configVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (configId == null)
                throw new System.ArgumentNullException("configId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}/{configId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (simVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (configVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("configVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(configVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConfigQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task PutConfigDeprecatedAsync(string tenantId, string userId, string configId, UpdatedConfigData data, string subTreePath)
        {
            return PutConfigDeprecatedAsync(tenantId, userId, configId, data, subTreePath, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task PutConfigDeprecatedAsync(string tenantId, string userId, string configId, UpdatedConfigData data, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (configId == null)
                throw new System.ArgumentNullException("configId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}/{configId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task DeleteConfigDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath, bool? undelete)
        {
            return DeleteConfigDeprecatedAsync(tenantId, userId, configId, subTreePath, undelete, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task DeleteConfigDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath, bool? undelete, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (configId == null)
                throw new System.ArgumentNullException("configId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}/{configId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (undelete != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("undelete") + "=").Append(System.Uri.EscapeDataString(ConvertToString(undelete, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetConfigVersionsQueryResult> GetConfigVersionsDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath)
        {
            return GetConfigVersionsDeprecatedAsync(tenantId, userId, configId, subTreePath, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetConfigVersionsQueryResult> GetConfigVersionsDeprecatedAsync(string tenantId, string userId, string configId, string subTreePath, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (configId == null)
                throw new System.ArgumentNullException("configId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/{userId}/{configId}/versions?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConfigVersionsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigWithoutUserIdDeprecatedAsync(string tenantId, string configId, string subTreePath, string simVersion, string configVersion)
        {
            return GetConfigWithoutUserIdDeprecatedAsync(tenantId, configId, subTreePath, simVersion, configVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetConfigQueryResult> GetConfigWithoutUserIdDeprecatedAsync(string tenantId, string configId, string subTreePath, string simVersion, string configVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (configId == null)
                throw new System.ArgumentNullException("configId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("configs/{tenantId}/auto/{configId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{configId}", System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture)));
            if (subTreePath != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subTreePath") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subTreePath, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (simVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (configVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("configVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(configVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConfigQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IEndToEndTestInboxClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetLatestMessageAndClearMailboxAsync(string mailboxName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetLatestMessageAndClearMailboxAsync(string mailboxName, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class EndToEndTestInboxClient : CanopyApiClient, IEndToEndTestInboxClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public EndToEndTestInboxClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetLatestMessageAndClearMailboxAsync(string mailboxName)
        {
            return GetLatestMessageAndClearMailboxAsync(mailboxName, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> GetLatestMessageAndClearMailboxAsync(string mailboxName, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxName == null)
                throw new System.ArgumentNullException("mailboxName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("test-mailboxes/{mailboxName}");
            urlBuilder_.Replace("{mailboxName}", System.Uri.EscapeDataString(ConvertToString(mailboxName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IListFilterClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListFilter> UpgradeListFilterAsync(string filter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListFilter> UpgradeListFilterAsync(string filter, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ListFilterClient : CanopyApiClient, IListFilterClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public ListFilterClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ListFilter> UpgradeListFilterAsync(string filter)
        {
            return UpgradeListFilterAsync(filter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ListFilter> UpgradeListFilterAsync(string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("list-filters/upgrade?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFilter>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IMembershipClient
    {
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostInitializeAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostInitializeAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostRegistrationAsync(RegistrationData registrationData);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostRegistrationAsync(RegistrationData registrationData, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostPasswordResetRequestAsync(PasswordResetRequestData passwordResetRequestData);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostPasswordResetRequestAsync(PasswordResetRequestData passwordResetRequestData, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostPasswordResetConfirmationAsync(PasswordResetConfirmationData passwordResetConfirmationData);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostPasswordResetConfirmationAsync(PasswordResetConfirmationData passwordResetConfirmationData, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetPasswordResetTokenValidityAsync(string userId, string token);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetPasswordResetTokenValidityAsync(string userId, string token, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostIdentifiedUserAsync(IdentifiedUserData identifiedUserData);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostIdentifiedUserAsync(IdentifiedUserData identifiedUserData, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRefreshTokensAsync(string tenantId, string userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRefreshTokensAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetUserRolesQueryResult> GetUserRolesAsync(string tenantId, string userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetUserRolesQueryResult> GetUserRolesAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutUserRoleAsync(string tenantId, string userId, UserRoleData roleData);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutUserRoleAsync(string tenantId, string userId, UserRoleData roleData, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetUpvotyTokenQueryResult> GetUpvotyTokenAsync(string tenantId, string userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetUpvotyTokenQueryResult> GetUpvotyTokenAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MembershipClient : CanopyApiClient, IMembershipClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public MembershipClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostInitializeAsync()
        {
            return PostInitializeAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostInitializeAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/initialize");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PostRegistrationAsync(RegistrationData registrationData)
        {
            return PostRegistrationAsync(registrationData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostRegistrationAsync(RegistrationData registrationData, System.Threading.CancellationToken cancellationToken)
        {
            if (registrationData == null)
                throw new System.ArgumentNullException("registrationData");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/registrations");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(registrationData, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PostPasswordResetRequestAsync(PasswordResetRequestData passwordResetRequestData)
        {
            return PostPasswordResetRequestAsync(passwordResetRequestData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostPasswordResetRequestAsync(PasswordResetRequestData passwordResetRequestData, System.Threading.CancellationToken cancellationToken)
        {
            if (passwordResetRequestData == null)
                throw new System.ArgumentNullException("passwordResetRequestData");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/password-reset-requests");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(passwordResetRequestData, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PostPasswordResetConfirmationAsync(PasswordResetConfirmationData passwordResetConfirmationData)
        {
            return PostPasswordResetConfirmationAsync(passwordResetConfirmationData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostPasswordResetConfirmationAsync(PasswordResetConfirmationData passwordResetConfirmationData, System.Threading.CancellationToken cancellationToken)
        {
            if (passwordResetConfirmationData == null)
                throw new System.ArgumentNullException("passwordResetConfirmationData");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/password-reset-confirmations");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(passwordResetConfirmationData, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetPasswordResetTokenValidityAsync(string userId, string token)
        {
            return GetPasswordResetTokenValidityAsync(userId, token, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> GetPasswordResetTokenValidityAsync(string userId, string token, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (token == null)
                throw new System.ArgumentNullException("token");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/password-reset-tokens/{userId}?");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PostIdentifiedUserAsync(IdentifiedUserData identifiedUserData)
        {
            return PostIdentifiedUserAsync(identifiedUserData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PostIdentifiedUserAsync(IdentifiedUserData identifiedUserData, System.Threading.CancellationToken cancellationToken)
        {
            if (identifiedUserData == null)
                throw new System.ArgumentNullException("identifiedUserData");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/identified-users");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(identifiedUserData, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteRefreshTokensAsync(string tenantId, string userId)
        {
            return DeleteRefreshTokensAsync(tenantId, userId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteRefreshTokensAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/refresh-tokens/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetUserRolesQueryResult> GetUserRolesAsync(string tenantId, string userId)
        {
            return GetUserRolesAsync(tenantId, userId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetUserRolesQueryResult> GetUserRolesAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/roles/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetUserRolesQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutUserRoleAsync(string tenantId, string userId, UserRoleData roleData)
        {
            return PutUserRoleAsync(tenantId, userId, roleData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutUserRoleAsync(string tenantId, string userId, UserRoleData roleData, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (roleData == null)
                throw new System.ArgumentNullException("roleData");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/roles/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(roleData, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetUpvotyTokenQueryResult> GetUpvotyTokenAsync(string tenantId, string userId)
        {
            return GetUpvotyTokenAsync(tenantId, userId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetUpvotyTokenQueryResult> GetUpvotyTokenAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("membership/upvoty-token/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetUpvotyTokenQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IPoolClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestAutoScaleFormulaQueryResult> GetTestAutoScaleFormulaAsync(string tenantId, string poolId, string formula);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestAutoScaleFormulaQueryResult> GetTestAutoScaleFormulaAsync(string tenantId, string poolId, string formula, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPoolStatusQueryResult> GetPoolStatusAsync(string tenantId, string poolType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPoolStatusQueryResult> GetPoolStatusAsync(string tenantId, string poolType, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPoolsQueryResult> GetPoolsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPoolsQueryResult> GetPoolsAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class PoolClient : CanopyApiClient, IPoolClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public PoolClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TestAutoScaleFormulaQueryResult> GetTestAutoScaleFormulaAsync(string tenantId, string poolId, string formula)
        {
            return GetTestAutoScaleFormulaAsync(tenantId, poolId, formula, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TestAutoScaleFormulaQueryResult> GetTestAutoScaleFormulaAsync(string tenantId, string poolId, string formula, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (poolId == null)
                throw new System.ArgumentNullException("poolId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("pools/{tenantId}/autoscale/test?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("poolId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poolId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (formula != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("formula") + "=").Append(System.Uri.EscapeDataString(ConvertToString(formula, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TestAutoScaleFormulaQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetPoolStatusQueryResult> GetPoolStatusAsync(string tenantId, string poolType)
        {
            return GetPoolStatusAsync(tenantId, poolType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetPoolStatusQueryResult> GetPoolStatusAsync(string tenantId, string poolType, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("pools/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (poolType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("poolType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poolType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPoolStatusQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetPoolsQueryResult> GetPoolsAsync()
        {
            return GetPoolsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetPoolsQueryResult> GetPoolsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("pools");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPoolsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISimVersionClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSimVersionDownloadsQueryResult> GetDownloadsAsync(string simVersion, string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSimVersionDownloadsQueryResult> GetDownloadsAsync(string simVersion, string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSimVersionDocumentsQueryResult> GetDocumentsAsync(string simVersion, string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSimVersionDocumentsQueryResult> GetDocumentsAsync(string simVersion, string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSimVersionDocumentQueryResult> GetDocumentAsync(string simVersion, string documentPath, string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSimVersionDocumentQueryResult> GetDocumentAsync(string simVersion, string documentPath, string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWikiDocumentQueryResult> GetWikiDocumentAsync(string wikiVersion, string documentPath, string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWikiDocumentQueryResult> GetWikiDocumentAsync(string wikiVersion, string documentPath, string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSimVersionAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSimVersionAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSimVersionAsync(NewSimVersionData simVersionData);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSimVersionAsync(NewSimVersionData simVersionData, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SimVersionClient : CanopyApiClient, ISimVersionClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public SimVersionClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSimVersionDownloadsQueryResult> GetDownloadsAsync(string simVersion, string tenantId)
        {
            return GetDownloadsAsync(simVersion, tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetSimVersionDownloadsQueryResult> GetDownloadsAsync(string simVersion, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (simVersion == null)
                throw new System.ArgumentNullException("simVersion");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/{simVersion}/downloads?");
            urlBuilder_.Replace("{simVersion}", System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetSimVersionDownloadsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSimVersionDocumentsQueryResult> GetDocumentsAsync(string simVersion, string tenantId)
        {
            return GetDocumentsAsync(simVersion, tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetSimVersionDocumentsQueryResult> GetDocumentsAsync(string simVersion, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (simVersion == null)
                throw new System.ArgumentNullException("simVersion");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/{simVersion}/documents?");
            urlBuilder_.Replace("{simVersion}", System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetSimVersionDocumentsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSimVersionDocumentQueryResult> GetDocumentAsync(string simVersion, string documentPath, string tenantId)
        {
            return GetDocumentAsync(simVersion, documentPath, tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetSimVersionDocumentQueryResult> GetDocumentAsync(string simVersion, string documentPath, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (simVersion == null)
                throw new System.ArgumentNullException("simVersion");
    
            if (documentPath == null)
                throw new System.ArgumentNullException("documentPath");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/{simVersion}/documents/{documentPath}?");
            urlBuilder_.Replace("{simVersion}", System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentPath}", System.Uri.EscapeDataString(ConvertToString(documentPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetSimVersionDocumentQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetWikiDocumentQueryResult> GetWikiDocumentAsync(string wikiVersion, string documentPath, string tenantId)
        {
            return GetWikiDocumentAsync(wikiVersion, documentPath, tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetWikiDocumentQueryResult> GetWikiDocumentAsync(string wikiVersion, string documentPath, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (wikiVersion == null)
                throw new System.ArgumentNullException("wikiVersion");
    
            if (documentPath == null)
                throw new System.ArgumentNullException("documentPath");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/{wikiVersion}/wiki/{documentPath}?");
            urlBuilder_.Replace("{wikiVersion}", System.Uri.EscapeDataString(ConvertToString(wikiVersion, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentPath}", System.Uri.EscapeDataString(ConvertToString(documentPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWikiDocumentQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetSimVersionAsync(string tenantId)
        {
            return GetSimVersionAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetSimVersionAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/current?");
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostSimVersionAsync(NewSimVersionData simVersionData)
        {
            return PostSimVersionAsync(simVersionData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostSimVersionAsync(NewSimVersionData simVersionData, System.Threading.CancellationToken cancellationToken)
        {
            if (simVersionData == null)
                throw new System.ArgumentNullException("simVersionData");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sim-versions/current");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(simVersionData, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IStudyClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAllTenantsStudyStatisticsQueryResult> GetAllTenantsStudyStatisticsAsync(string startDate, string endDate);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAllTenantsStudyStatisticsQueryResult> GetAllTenantsStudyStatisticsAsync(string startDate, string endDate, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantBillableStoredSimulationCountQueryResult> GetTenantBillableStoredSimulationCountAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantBillableStoredSimulationCountQueryResult> GetTenantBillableStoredSimulationCountAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantStudyStatisticsQueryResult> GetTenantStudyStatisticsAsync(string tenantId, string startDate, string endDate);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantStudyStatisticsQueryResult> GetTenantStudyStatisticsAsync(string tenantId, string startDate, string endDate, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyTypesQueryResult> GetStudyTypesAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyTypesQueryResult> GetStudyTypesAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimTypeDefinition> GetSimTypeAsync(string simType, string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimTypeDefinition> GetSimTypeAsync(string simType, string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StudyTypeDefinition> GetStudyTypeAsync(string studyType, string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StudyTypeDefinition> GetStudyTypeAsync(string studyType, string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudiesQueryResult> GetStudiesAsync(string tenantId, string filter, bool? includeTransient, string resultType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudiesQueryResult> GetStudiesAsync(string tenantId, string filter, bool? includeTransient, string resultType, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostStudyResult> PostStudyAsync(string tenantId, NewStudyData data, bool? runInline);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostStudyResult> PostStudyAsync(string tenantId, NewStudyData data, bool? runInline, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantAccessInformationQueryResult> GetTenantAccessInformationAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantAccessInformationQueryResult> GetTenantAccessInformationAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyAsync(string tenantId, string studyId, string simVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyAsync(string tenantId, string studyId, string simVersion, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutStudyAsync(string tenantId, string studyId, UpdatedStudyData data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutStudyAsync(string tenantId, string studyId, UpdatedStudyData data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteStudyAsync(string tenantId, string studyId, bool? undelete);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteStudyAsync(string tenantId, string studyId, bool? undelete, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutStudyOwnerAsync(string tenantId, string studyId, ConfigOwnerData ownerData);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutStudyOwnerAsync(string tenantId, string studyId, ConfigOwnerData ownerData, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetStudyDownloadAsync(string tenantId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv, bool? mergedScalarResultsOnly);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetStudyDownloadAsync(string tenantId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv, bool? mergedScalarResultsOnly, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetStudyJobDownloadAsync(string tenantId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, string simTypeChannels);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetStudyJobDownloadAsync(string tenantId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, string simTypeChannels, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlAsync(string tenantId, string studyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlAsync(string tenantId, string studyId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataAsync(string tenantId, string studyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataAsync(string tenantId, string studyId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsAsync(string tenantId, string studyId, string filter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsAsync(string tenantId, string studyId, string filter, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobAsync(string tenantId, string studyId, string jobId, string simVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobAsync(string tenantId, string studyId, string jobId, string simVersion, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataAsync(string tenantId, string studyId, string jobId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataAsync(string tenantId, string studyId, string jobId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MergeStudyAsync(string tenantId, string studyId, bool? forceMergeFromBaseline);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MergeStudyAsync(string tenantId, string studyId, bool? forceMergeFromBaseline, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<PostStudyResult> PostStudyDeprecatedAsync(string tenantId, string userId, NewStudyData data, bool? runInline);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<PostStudyResult> PostStudyDeprecatedAsync(string tenantId, string userId, NewStudyData data, bool? runInline, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyDeprecatedAsync(string tenantId, string userId, string studyId, string simVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyDeprecatedAsync(string tenantId, string userId, string studyId, string simVersion, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task PutStudyDeprecatedAsync(string tenantId, string userId, string studyId, UpdatedStudyData data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task PutStudyDeprecatedAsync(string tenantId, string userId, string studyId, UpdatedStudyData data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task DeleteStudyDeprecatedAsync(string tenantId, string userId, string studyId, bool? undelete);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task DeleteStudyDeprecatedAsync(string tenantId, string userId, string studyId, bool? undelete, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyWithoutUserIdDeprecatedAsync(string tenantId, string studyId, string simVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyWithoutUserIdDeprecatedAsync(string tenantId, string studyId, string simVersion, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> GetStudyDownloadDeprecatedAsync(string tenantId, string userId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv, bool? mergedScalarResultsOnly);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> GetStudyDownloadDeprecatedAsync(string tenantId, string userId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv, bool? mergedScalarResultsOnly, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> GetStudyJobDownloadDeprecatedAsync(string tenantId, string userId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, string simTypeChannels);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> GetStudyJobDownloadDeprecatedAsync(string tenantId, string userId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, string simTypeChannels, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlDeprecatedAsync(string tenantId, string userId, string studyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlDeprecatedAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataWithoutUserIdDeprecatedAsync(string tenantId, string studyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataWithoutUserIdDeprecatedAsync(string tenantId, string studyId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataDeprecatedAsync(string tenantId, string userId, string studyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataDeprecatedAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsDeprecatedAsync(string tenantId, string userId, string studyId, string filter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsDeprecatedAsync(string tenantId, string userId, string studyId, string filter, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobDeprecatedAsync(string tenantId, string userId, string studyId, string jobId, string simVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobDeprecatedAsync(string tenantId, string userId, string studyId, string jobId, string simVersion, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataDeprecatedAsync(string tenantId, string userId, string studyId, string jobId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataDeprecatedAsync(string tenantId, string userId, string studyId, string jobId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task MergeStudyDeprecatedAsync(string tenantId, string userId, string studyId, bool? forceMergeFromBaseline);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task MergeStudyDeprecatedAsync(string tenantId, string userId, string studyId, bool? forceMergeFromBaseline, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class StudyClient : CanopyApiClient, IStudyClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public StudyClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetAllTenantsStudyStatisticsQueryResult> GetAllTenantsStudyStatisticsAsync(string startDate, string endDate)
        {
            return GetAllTenantsStudyStatisticsAsync(startDate, endDate, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetAllTenantsStudyStatisticsQueryResult> GetAllTenantsStudyStatisticsAsync(string startDate, string endDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/statistics?");
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAllTenantsStudyStatisticsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantBillableStoredSimulationCountQueryResult> GetTenantBillableStoredSimulationCountAsync(string tenantId)
        {
            return GetTenantBillableStoredSimulationCountAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantBillableStoredSimulationCountQueryResult> GetTenantBillableStoredSimulationCountAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/statistics/stored/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantBillableStoredSimulationCountQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantStudyStatisticsQueryResult> GetTenantStudyStatisticsAsync(string tenantId, string startDate, string endDate)
        {
            return GetTenantStudyStatisticsAsync(tenantId, startDate, endDate, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantStudyStatisticsQueryResult> GetTenantStudyStatisticsAsync(string tenantId, string startDate, string endDate, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/statistics/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantStudyStatisticsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyTypesQueryResult> GetStudyTypesAsync(string tenantId)
        {
            return GetStudyTypesAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetStudyTypesQueryResult> GetStudyTypesAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/types?");
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyTypesQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SimTypeDefinition> GetSimTypeAsync(string simType, string tenantId)
        {
            return GetSimTypeAsync(simType, tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SimTypeDefinition> GetSimTypeAsync(string simType, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (simType == null)
                throw new System.ArgumentNullException("simType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/types/sims/{simType}?");
            urlBuilder_.Replace("{simType}", System.Uri.EscapeDataString(ConvertToString(simType, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SimTypeDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StudyTypeDefinition> GetStudyTypeAsync(string studyType, string tenantId)
        {
            return GetStudyTypeAsync(studyType, tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StudyTypeDefinition> GetStudyTypeAsync(string studyType, string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (studyType == null)
                throw new System.ArgumentNullException("studyType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/types/{studyType}?");
            urlBuilder_.Replace("{studyType}", System.Uri.EscapeDataString(ConvertToString(studyType, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StudyTypeDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudiesQueryResult> GetStudiesAsync(string tenantId, string filter, bool? includeTransient, string resultType)
        {
            return GetStudiesAsync(tenantId, filter, includeTransient, resultType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetStudiesQueryResult> GetStudiesAsync(string tenantId, string filter, bool? includeTransient, string resultType, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeTransient != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeTransient") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeTransient, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (resultType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("resultType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(resultType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudiesQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PostStudyResult> PostStudyAsync(string tenantId, NewStudyData data, bool? runInline)
        {
            return PostStudyAsync(tenantId, data, runInline, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PostStudyResult> PostStudyAsync(string tenantId, NewStudyData data, bool? runInline, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (runInline != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("runInline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(runInline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PostStudyResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantAccessInformationQueryResult> GetTenantAccessInformationAsync(string tenantId)
        {
            return GetTenantAccessInformationAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantAccessInformationQueryResult> GetTenantAccessInformationAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/access");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantAccessInformationQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyAsync(string tenantId, string studyId, string simVersion)
        {
            return GetStudyAsync(tenantId, studyId, simVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyAsync(string tenantId, string studyId, string simVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (simVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutStudyAsync(string tenantId, string studyId, UpdatedStudyData data)
        {
            return PutStudyAsync(tenantId, studyId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutStudyAsync(string tenantId, string studyId, UpdatedStudyData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteStudyAsync(string tenantId, string studyId, bool? undelete)
        {
            return DeleteStudyAsync(tenantId, studyId, undelete, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteStudyAsync(string tenantId, string studyId, bool? undelete, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (undelete != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("undelete") + "=").Append(System.Uri.EscapeDataString(ConvertToString(undelete, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutStudyOwnerAsync(string tenantId, string studyId, ConfigOwnerData ownerData)
        {
            return PutStudyOwnerAsync(tenantId, studyId, ownerData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutStudyOwnerAsync(string tenantId, string studyId, ConfigOwnerData ownerData, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (ownerData == null)
                throw new System.ArgumentNullException("ownerData");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}/owner");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ownerData, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetStudyDownloadAsync(string tenantId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv, bool? mergedScalarResultsOnly)
        {
            return GetStudyDownloadAsync(tenantId, studyId, accessSignature, expiry, fileName, full, channelsAsCsv, mergedScalarResultsOnly, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> GetStudyDownloadAsync(string tenantId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv, bool? mergedScalarResultsOnly, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (accessSignature == null)
                throw new System.ArgumentNullException("accessSignature");
    
            if (expiry == null)
                throw new System.ArgumentNullException("expiry");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}/download?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("accessSignature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accessSignature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("expiry") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expiry, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (full != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("full") + "=").Append(System.Uri.EscapeDataString(ConvertToString(full, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channelsAsCsv != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channelsAsCsv") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channelsAsCsv, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergedScalarResultsOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mergedScalarResultsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergedScalarResultsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetStudyJobDownloadAsync(string tenantId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, string simTypeChannels)
        {
            return GetStudyJobDownloadAsync(tenantId, studyId, jobId, accessSignature, expiry, fileName, channelsAsCsv, simTypeChannels, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> GetStudyJobDownloadAsync(string tenantId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, string simTypeChannels, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");
    
            if (accessSignature == null)
                throw new System.ArgumentNullException("accessSignature");
    
            if (expiry == null)
                throw new System.ArgumentNullException("expiry");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}/jobs/{jobId}/download?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("accessSignature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accessSignature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("expiry") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expiry, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channelsAsCsv != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channelsAsCsv") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channelsAsCsv, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (simTypeChannels != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simTypeChannels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simTypeChannels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlAsync(string tenantId, string studyId)
        {
            return GetStudyDownloadUrlAsync(tenantId, studyId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlAsync(string tenantId, string studyId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}/download-url");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyDownloadUrlQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataAsync(string tenantId, string studyId)
        {
            return GetStudyMetadataAsync(tenantId, studyId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataAsync(string tenantId, string studyId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}/metadata");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsAsync(string tenantId, string studyId, string filter)
        {
            return GetStudyJobsAsync(tenantId, studyId, filter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsAsync(string tenantId, string studyId, string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}/jobs?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyJobsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobAsync(string tenantId, string studyId, string jobId, string simVersion)
        {
            return GetStudyJobAsync(tenantId, studyId, jobId, simVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobAsync(string tenantId, string studyId, string jobId, string simVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}/jobs/{jobId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));
            if (simVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyJobQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataAsync(string tenantId, string studyId, string jobId)
        {
            return GetStudyJobMetadataAsync(tenantId, studyId, jobId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataAsync(string tenantId, string studyId, string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}/jobs/{jobId}/metadata");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyJobMetadataQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task MergeStudyAsync(string tenantId, string studyId, bool? forceMergeFromBaseline)
        {
            return MergeStudyAsync(tenantId, studyId, forceMergeFromBaseline, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task MergeStudyAsync(string tenantId, string studyId, bool? forceMergeFromBaseline, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{studyId}/merge?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (forceMergeFromBaseline != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("forceMergeFromBaseline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(forceMergeFromBaseline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<PostStudyResult> PostStudyDeprecatedAsync(string tenantId, string userId, NewStudyData data, bool? runInline)
        {
            return PostStudyDeprecatedAsync(tenantId, userId, data, runInline, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<PostStudyResult> PostStudyDeprecatedAsync(string tenantId, string userId, NewStudyData data, bool? runInline, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            if (runInline != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("runInline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(runInline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PostStudyResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyDeprecatedAsync(string tenantId, string userId, string studyId, string simVersion)
        {
            return GetStudyDeprecatedAsync(tenantId, userId, studyId, simVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyDeprecatedAsync(string tenantId, string userId, string studyId, string simVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (simVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task PutStudyDeprecatedAsync(string tenantId, string userId, string studyId, UpdatedStudyData data)
        {
            return PutStudyDeprecatedAsync(tenantId, userId, studyId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task PutStudyDeprecatedAsync(string tenantId, string userId, string studyId, UpdatedStudyData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task DeleteStudyDeprecatedAsync(string tenantId, string userId, string studyId, bool? undelete)
        {
            return DeleteStudyDeprecatedAsync(tenantId, userId, studyId, undelete, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task DeleteStudyDeprecatedAsync(string tenantId, string userId, string studyId, bool? undelete, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (undelete != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("undelete") + "=").Append(System.Uri.EscapeDataString(ConvertToString(undelete, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyWithoutUserIdDeprecatedAsync(string tenantId, string studyId, string simVersion)
        {
            return GetStudyWithoutUserIdDeprecatedAsync(tenantId, studyId, simVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyWithoutUserIdDeprecatedAsync(string tenantId, string studyId, string simVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/auto/{studyId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (simVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<object> GetStudyDownloadDeprecatedAsync(string tenantId, string userId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv, bool? mergedScalarResultsOnly)
        {
            return GetStudyDownloadDeprecatedAsync(tenantId, userId, studyId, accessSignature, expiry, fileName, full, channelsAsCsv, mergedScalarResultsOnly, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<object> GetStudyDownloadDeprecatedAsync(string tenantId, string userId, string studyId, string accessSignature, string expiry, string fileName, bool? full, bool? channelsAsCsv, bool? mergedScalarResultsOnly, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (accessSignature == null)
                throw new System.ArgumentNullException("accessSignature");
    
            if (expiry == null)
                throw new System.ArgumentNullException("expiry");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/download?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("accessSignature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accessSignature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("expiry") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expiry, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (full != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("full") + "=").Append(System.Uri.EscapeDataString(ConvertToString(full, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channelsAsCsv != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channelsAsCsv") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channelsAsCsv, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergedScalarResultsOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mergedScalarResultsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergedScalarResultsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<object> GetStudyJobDownloadDeprecatedAsync(string tenantId, string userId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, string simTypeChannels)
        {
            return GetStudyJobDownloadDeprecatedAsync(tenantId, userId, studyId, jobId, accessSignature, expiry, fileName, channelsAsCsv, simTypeChannels, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<object> GetStudyJobDownloadDeprecatedAsync(string tenantId, string userId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, string simTypeChannels, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");
    
            if (accessSignature == null)
                throw new System.ArgumentNullException("accessSignature");
    
            if (expiry == null)
                throw new System.ArgumentNullException("expiry");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}/download?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("accessSignature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accessSignature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("expiry") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expiry, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channelsAsCsv != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channelsAsCsv") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channelsAsCsv, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (simTypeChannels != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simTypeChannels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simTypeChannels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlDeprecatedAsync(string tenantId, string userId, string studyId)
        {
            return GetStudyDownloadUrlDeprecatedAsync(tenantId, userId, studyId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlDeprecatedAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/download-url");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyDownloadUrlQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataWithoutUserIdDeprecatedAsync(string tenantId, string studyId)
        {
            return GetStudyMetadataWithoutUserIdDeprecatedAsync(tenantId, studyId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataWithoutUserIdDeprecatedAsync(string tenantId, string studyId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/auto/{studyId}/metadata");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataDeprecatedAsync(string tenantId, string userId, string studyId)
        {
            return GetStudyMetadataDeprecatedAsync(tenantId, userId, studyId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetStudyQueryResult> GetStudyMetadataDeprecatedAsync(string tenantId, string userId, string studyId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/metadata");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsDeprecatedAsync(string tenantId, string userId, string studyId, string filter)
        {
            return GetStudyJobsDeprecatedAsync(tenantId, userId, studyId, filter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetStudyJobsQueryResult> GetStudyJobsDeprecatedAsync(string tenantId, string userId, string studyId, string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/jobs?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyJobsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobDeprecatedAsync(string tenantId, string userId, string studyId, string jobId, string simVersion)
        {
            return GetStudyJobDeprecatedAsync(tenantId, userId, studyId, jobId, simVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetStudyJobQueryResult> GetStudyJobDeprecatedAsync(string tenantId, string userId, string studyId, string jobId, string simVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));
            if (simVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyJobQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataDeprecatedAsync(string tenantId, string userId, string studyId, string jobId)
        {
            return GetStudyJobMetadataDeprecatedAsync(tenantId, userId, studyId, jobId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetStudyJobMetadataQueryResult> GetStudyJobMetadataDeprecatedAsync(string tenantId, string userId, string studyId, string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}/metadata");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStudyJobMetadataQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task MergeStudyDeprecatedAsync(string tenantId, string userId, string studyId, bool? forceMergeFromBaseline)
        {
            return MergeStudyDeprecatedAsync(tenantId, userId, studyId, forceMergeFromBaseline, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task MergeStudyDeprecatedAsync(string tenantId, string userId, string studyId, bool? forceMergeFromBaseline, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (studyId == null)
                throw new System.ArgumentNullException("studyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("studies/{tenantId}/{userId}/{studyId}/merge?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{studyId}", System.Uri.EscapeDataString(ConvertToString(studyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (forceMergeFromBaseline != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("forceMergeFromBaseline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(forceMergeFromBaseline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISupportSessionClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAllSupportSessionsQueryResult> GetAllSupportSessionsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAllSupportSessionsQueryResult> GetAllSupportSessionsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionAsync(string tenantId, string documentId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionAsync(string tenantId, string documentId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSupportSessionAsync(string tenantId, string documentId, SupportSessionData data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSupportSessionAsync(string tenantId, string documentId, SupportSessionData data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionDeprecatedAsync(string tenantId, string userId, string documentId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionDeprecatedAsync(string tenantId, string userId, string documentId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task PutSupportSessionDeprecatedAsync(string tenantId, string userId, string documentId, SupportSessionData data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task PutSupportSessionDeprecatedAsync(string tenantId, string userId, string documentId, SupportSessionData data, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SupportSessionClient : CanopyApiClient, ISupportSessionClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public SupportSessionClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetAllSupportSessionsQueryResult> GetAllSupportSessionsAsync()
        {
            return GetAllSupportSessionsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetAllSupportSessionsQueryResult> GetAllSupportSessionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("support-sessions/all");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAllSupportSessionsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionAsync(string tenantId, string documentId)
        {
            return GetSupportSessionAsync(tenantId, documentId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionAsync(string tenantId, string documentId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (documentId == null)
                throw new System.ArgumentNullException("documentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("support-sessions/{tenantId}/{documentId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentId}", System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetSupportSessionQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutSupportSessionAsync(string tenantId, string documentId, SupportSessionData data)
        {
            return PutSupportSessionAsync(tenantId, documentId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutSupportSessionAsync(string tenantId, string documentId, SupportSessionData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (documentId == null)
                throw new System.ArgumentNullException("documentId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("support-sessions/{tenantId}/{documentId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentId}", System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionDeprecatedAsync(string tenantId, string userId, string documentId)
        {
            return GetSupportSessionDeprecatedAsync(tenantId, userId, documentId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetSupportSessionQueryResult> GetSupportSessionDeprecatedAsync(string tenantId, string userId, string documentId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (documentId == null)
                throw new System.ArgumentNullException("documentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("support-sessions/{tenantId}/{userId}/{documentId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentId}", System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetSupportSessionQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task PutSupportSessionDeprecatedAsync(string tenantId, string userId, string documentId, SupportSessionData data)
        {
            return PutSupportSessionDeprecatedAsync(tenantId, userId, documentId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task PutSupportSessionDeprecatedAsync(string tenantId, string userId, string documentId, SupportSessionData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (documentId == null)
                throw new System.ArgumentNullException("documentId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("support-sessions/{tenantId}/{userId}/{documentId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentId}", System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ITenancyClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantsQueryResult> GetTenantsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantsQueryResult> GetTenantsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostTenantAsync(NewTenantData data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostTenantAsync(NewTenantData data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantQueryResult> GetTenantAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantQueryResult> GetTenantAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantAsync(string tenantId, UpdatedTenantData data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantAsync(string tenantId, UpdatedTenantData data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTenantAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTenantAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantUsersQueryResult> GetTenantUsersAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantUsersQueryResult> GetTenantUsersAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TenancyClient : CanopyApiClient, ITenancyClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TenancyClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantsQueryResult> GetTenantsAsync()
        {
            return GetTenantsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantsQueryResult> GetTenantsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostTenantAsync(NewTenantData data)
        {
            return PostTenantAsync(data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostTenantAsync(NewTenantData data, System.Threading.CancellationToken cancellationToken)
        {
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantQueryResult> GetTenantAsync(string tenantId)
        {
            return GetTenantAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantQueryResult> GetTenantAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutTenantAsync(string tenantId, UpdatedTenantData data)
        {
            return PutTenantAsync(tenantId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutTenantAsync(string tenantId, UpdatedTenantData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteTenantAsync(string tenantId)
        {
            return DeleteTenantAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteTenantAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantUsersQueryResult> GetTenantUsersAsync(string tenantId)
        {
            return GetTenantUsersAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantUsersQueryResult> GetTenantUsersAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}/users");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantUsersQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ITenantSettingsClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantChannelWhitelistsQueryResult> GetTenantChannelWhitelistsAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantChannelWhitelistsQueryResult> GetTenantChannelWhitelistsAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantChannelWhitelistsAsync(string tenantId, UpdatedTenantChannelWhitelists data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantChannelWhitelistsAsync(string tenantId, UpdatedTenantChannelWhitelists data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantDefaultCustomPropertyNamesQueryResult> GetTenantDefaultCustomPropertyNamesAsync(string tenantId, string targetType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantDefaultCustomPropertyNamesQueryResult> GetTenantDefaultCustomPropertyNamesAsync(string tenantId, string targetType, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantDefaultCustomPropertyNamesAsync(string tenantId, UpdatedTenantDefaultCustomPropertyNames data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantDefaultCustomPropertyNamesAsync(string tenantId, UpdatedTenantDefaultCustomPropertyNames data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantChannelImportMappingsQueryResult> GetTenantChannelImportMappingsAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantChannelImportMappingsQueryResult> GetTenantChannelImportMappingsAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantChannelImportMappingsAsync(string tenantId, UpdatedChannelImportMappings data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantChannelImportMappingsAsync(string tenantId, UpdatedChannelImportMappings data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantWorksheetLabelDefinitionsQueryResult> GetTenantWorksheetLabelDefinitionsAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantWorksheetLabelDefinitionsQueryResult> GetTenantWorksheetLabelDefinitionsAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantWorksheetLabelDefinitionsAsync(string tenantId, UpdatedWorksheetLabelDefinitions data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantWorksheetLabelDefinitionsAsync(string tenantId, UpdatedWorksheetLabelDefinitions data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantSettingsSimVersionQueryResult> GetTenantSettingsSimVersionAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTenantSettingsSimVersionQueryResult> GetTenantSettingsSimVersionAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantSettingsSimVersionAsync(string tenantId, UpdatedTenantSettingsSimVersion data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTenantSettingsSimVersionAsync(string tenantId, UpdatedTenantSettingsSimVersion data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAdminTenantSettingsQueryResult> GetAdminTenantSettingsAsync(string tenantId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAdminTenantSettingsQueryResult> GetAdminTenantSettingsAsync(string tenantId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PutAdminTenantSettingsAsync(string tenantId, UpdatedAdminTenantSettings data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PutAdminTenantSettingsAsync(string tenantId, UpdatedAdminTenantSettings data, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TenantSettingsClient : CanopyApiClient, ITenantSettingsClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TenantSettingsClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantChannelWhitelistsQueryResult> GetTenantChannelWhitelistsAsync(string tenantId)
        {
            return GetTenantChannelWhitelistsAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantChannelWhitelistsQueryResult> GetTenantChannelWhitelistsAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/channel-whitelists/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantChannelWhitelistsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutTenantChannelWhitelistsAsync(string tenantId, UpdatedTenantChannelWhitelists data)
        {
            return PutTenantChannelWhitelistsAsync(tenantId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutTenantChannelWhitelistsAsync(string tenantId, UpdatedTenantChannelWhitelists data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/channel-whitelists/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantDefaultCustomPropertyNamesQueryResult> GetTenantDefaultCustomPropertyNamesAsync(string tenantId, string targetType)
        {
            return GetTenantDefaultCustomPropertyNamesAsync(tenantId, targetType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantDefaultCustomPropertyNamesQueryResult> GetTenantDefaultCustomPropertyNamesAsync(string tenantId, string targetType, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/default-custom-property-names/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (targetType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("targetType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(targetType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantDefaultCustomPropertyNamesQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutTenantDefaultCustomPropertyNamesAsync(string tenantId, UpdatedTenantDefaultCustomPropertyNames data)
        {
            return PutTenantDefaultCustomPropertyNamesAsync(tenantId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutTenantDefaultCustomPropertyNamesAsync(string tenantId, UpdatedTenantDefaultCustomPropertyNames data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/default-custom-property-names/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantChannelImportMappingsQueryResult> GetTenantChannelImportMappingsAsync(string tenantId)
        {
            return GetTenantChannelImportMappingsAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantChannelImportMappingsQueryResult> GetTenantChannelImportMappingsAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/channel-import-mappings/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantChannelImportMappingsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutTenantChannelImportMappingsAsync(string tenantId, UpdatedChannelImportMappings data)
        {
            return PutTenantChannelImportMappingsAsync(tenantId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutTenantChannelImportMappingsAsync(string tenantId, UpdatedChannelImportMappings data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/channel-import-mappings/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantWorksheetLabelDefinitionsQueryResult> GetTenantWorksheetLabelDefinitionsAsync(string tenantId)
        {
            return GetTenantWorksheetLabelDefinitionsAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantWorksheetLabelDefinitionsQueryResult> GetTenantWorksheetLabelDefinitionsAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/worksheet-label-definitions/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantWorksheetLabelDefinitionsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutTenantWorksheetLabelDefinitionsAsync(string tenantId, UpdatedWorksheetLabelDefinitions data)
        {
            return PutTenantWorksheetLabelDefinitionsAsync(tenantId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutTenantWorksheetLabelDefinitionsAsync(string tenantId, UpdatedWorksheetLabelDefinitions data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/worksheet-label-definitions/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetTenantSettingsSimVersionQueryResult> GetTenantSettingsSimVersionAsync(string tenantId)
        {
            return GetTenantSettingsSimVersionAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetTenantSettingsSimVersionQueryResult> GetTenantSettingsSimVersionAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/sim-version/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTenantSettingsSimVersionQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutTenantSettingsSimVersionAsync(string tenantId, UpdatedTenantSettingsSimVersion data)
        {
            return PutTenantSettingsSimVersionAsync(tenantId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutTenantSettingsSimVersionAsync(string tenantId, UpdatedTenantSettingsSimVersion data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/sim-version/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetAdminTenantSettingsQueryResult> GetAdminTenantSettingsAsync(string tenantId)
        {
            return GetAdminTenantSettingsAsync(tenantId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetAdminTenantSettingsQueryResult> GetAdminTenantSettingsAsync(string tenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/admin/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdminTenantSettingsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> PutAdminTenantSettingsAsync(string tenantId, UpdatedAdminTenantSettings data)
        {
            return PutAdminTenantSettingsAsync(tenantId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> PutAdminTenantSettingsAsync(string tenantId, UpdatedAdminTenantSettings data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant-settings/admin/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IUserSettingsClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetUserSettingsQueryResult> GetUserSettingsAsync(string tenantId, string userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetUserSettingsQueryResult> GetUserSettingsAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PutUserSettingsAsync(string tenantId, string userId, UpdatedUserSettings data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PutUserSettingsAsync(string tenantId, string userId, UpdatedUserSettings data, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class UserSettingsClient : CanopyApiClient, IUserSettingsClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public UserSettingsClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetUserSettingsQueryResult> GetUserSettingsAsync(string tenantId, string userId)
        {
            return GetUserSettingsAsync(tenantId, userId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetUserSettingsQueryResult> GetUserSettingsAsync(string tenantId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("user-settings/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetUserSettingsQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> PutUserSettingsAsync(string tenantId, string userId, UpdatedUserSettings data)
        {
            return PutUserSettingsAsync(tenantId, userId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> PutUserSettingsAsync(string tenantId, string userId, UpdatedUserSettings data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("user-settings/{tenantId}/{userId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IWorksheetClient
    {
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWorksheetQueryResult> GetWorksheetAsync(string tenantId, string worksheetId, string configVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWorksheetQueryResult> GetWorksheetAsync(string tenantId, string worksheetId, string configVersion, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWorksheetQueryResult> PutWorksheetAsync(string tenantId, string worksheetId, UpdatedWorksheetData data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWorksheetQueryResult> PutWorksheetAsync(string tenantId, string worksheetId, UpdatedWorksheetData data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWorksheetQueryResult> PostWorksheetAsync(string tenantId, NewWorksheetData data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWorksheetQueryResult> PostWorksheetAsync(string tenantId, NewWorksheetData data, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DuplicateConfigsResult> PostDuplicateConfigsAsync(string tenantId, string worksheetId, DuplicateConfigsData data, string simVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DuplicateConfigsResult> PostDuplicateConfigsAsync(string tenantId, string worksheetId, DuplicateConfigsData data, string simVersion, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class WorksheetClient : CanopyApiClient, IWorksheetClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public WorksheetClient(CanopyApiConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetWorksheetQueryResult> GetWorksheetAsync(string tenantId, string worksheetId, string configVersion)
        {
            return GetWorksheetAsync(tenantId, worksheetId, configVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetWorksheetQueryResult> GetWorksheetAsync(string tenantId, string worksheetId, string configVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (worksheetId == null)
                throw new System.ArgumentNullException("worksheetId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("worksheets/{tenantId}/{worksheetId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{worksheetId}", System.Uri.EscapeDataString(ConvertToString(worksheetId, System.Globalization.CultureInfo.InvariantCulture)));
            if (configVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("configVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(configVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWorksheetQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetWorksheetQueryResult> PutWorksheetAsync(string tenantId, string worksheetId, UpdatedWorksheetData data)
        {
            return PutWorksheetAsync(tenantId, worksheetId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetWorksheetQueryResult> PutWorksheetAsync(string tenantId, string worksheetId, UpdatedWorksheetData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (worksheetId == null)
                throw new System.ArgumentNullException("worksheetId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("worksheets/{tenantId}/{worksheetId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{worksheetId}", System.Uri.EscapeDataString(ConvertToString(worksheetId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWorksheetQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetWorksheetQueryResult> PostWorksheetAsync(string tenantId, NewWorksheetData data)
        {
            return PostWorksheetAsync(tenantId, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetWorksheetQueryResult> PostWorksheetAsync(string tenantId, NewWorksheetData data, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("worksheets/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWorksheetQueryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DuplicateConfigsResult> PostDuplicateConfigsAsync(string tenantId, string worksheetId, DuplicateConfigsData data, string simVersion)
        {
            return PostDuplicateConfigsAsync(tenantId, worksheetId, data, simVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="CanopyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DuplicateConfigsResult> PostDuplicateConfigsAsync(string tenantId, string worksheetId, DuplicateConfigsData data, string simVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (worksheetId == null)
                throw new System.ArgumentNullException("worksheetId");
    
            if (data == null)
                throw new System.ArgumentNullException("data");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("worksheets/{tenantId}/{worksheetId}/duplicate?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{worksheetId}", System.Uri.EscapeDataString(ConvertToString(worksheetId, System.Globalization.CultureInfo.InvariantCulture)));
            if (simVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("simVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = true;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    base.PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DuplicateConfigsResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CanopyApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CanopyApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CanopyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetAccountSettingsResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _username;
        private string _email;
        private bool? _isEnabled;
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetAccountSettingsResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAccountSettingsResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedAccountSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private string _newUsername;
        private string _newEmail;
        private string _newPassword;
        private bool? _isEnabled;
    
        [Newtonsoft.Json.JsonProperty("newUsername", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewUsername
        {
            get { return _newUsername; }
            set
            {
                if (_newUsername != value)
                {
                    _newUsername = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("newEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewEmail
        {
            get { return _newEmail; }
            set
            {
                if (_newEmail != value)
                {
                    _newEmail = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewPassword
        {
            get { return _newPassword; }
            set
            {
                if (_newPassword != value)
                {
                    _newPassword = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedAccountSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedAccountSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AvailabilityResult : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _database;
        private bool? _api;
        private AdditionalTests _additionalTests;
    
        [Newtonsoft.Json.JsonProperty("database", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Database
        {
            get { return _database; }
            set
            {
                if (_database != value)
                {
                    _database = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("api", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Api
        {
            get { return _api; }
            set
            {
                if (_api != value)
                {
                    _api = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("additionalTests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalTests AdditionalTests
        {
            get { return _additionalTests; }
            set
            {
                if (_additionalTests != value)
                {
                    _additionalTests = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static AvailabilityResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailabilityResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AdditionalTests : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _createUser;
        private bool? _createStudy;
        private bool? _completeStudy;
    
        [Newtonsoft.Json.JsonProperty("createUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateUser
        {
            get { return _createUser; }
            set
            {
                if (_createUser != value)
                {
                    _createUser = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("createStudy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateStudy
        {
            get { return _createStudy; }
            set
            {
                if (_createStudy != value)
                {
                    _createStudy = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completeStudy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CompleteStudy
        {
            get { return _completeStudy; }
            set
            {
                if (_completeStudy != value)
                {
                    _completeStudy = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static AdditionalTests FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalTests>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataToEncrypt : System.ComponentModel.INotifyPropertyChanged
    {
        private object _data;
        private string _description;
        private System.Collections.Generic.List<string> _channelWhitelist;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("channelWhitelist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ChannelWhitelist
        {
            get { return _channelWhitelist; }
            set
            {
                if (_channelWhitelist != value)
                {
                    _channelWhitelist = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DataToEncrypt FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataToEncrypt>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetEncryptedDataQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private object _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetEncryptedDataQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetEncryptedDataQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataToDecrypt : System.ComponentModel.INotifyPropertyChanged
    {
        private object _data;
        private bool? _decryptRecursively;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("decryptRecursively", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DecryptRecursively
        {
            get { return _decryptRecursively; }
            set
            {
                if (_decryptRecursively != value)
                {
                    _decryptRecursively = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DataToDecrypt FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataToDecrypt>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetDecryptedDataQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private object _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetDecryptedDataQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetDecryptedDataQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpgradeConfigData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private object _config;
        private string _simVersion;
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpgradeConfigData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpgradeConfigData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpgradeConfigQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private object _config;
        private string _convertedSimVersion;
    
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("convertedSimVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertedSimVersion
        {
            get { return _convertedSimVersion; }
            set
            {
                if (_convertedSimVersion != value)
                {
                    _convertedSimVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpgradeConfigQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpgradeConfigQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetConfigsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private DocumentsAndContinuationToken _queryResults;
        private System.Collections.Generic.List<DocumentCustomPropertyGroup> _groupResults;
        private DocumentUserInformation _userInformation;
    
        [Newtonsoft.Json.JsonProperty("queryResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentsAndContinuationToken QueryResults
        {
            get { return _queryResults; }
            set
            {
                if (_queryResults != value)
                {
                    _queryResults = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("groupResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyGroup> GroupResults
        {
            get { return _groupResults; }
            set
            {
                if (_groupResults != value)
                {
                    _groupResults = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentUserInformation UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetConfigsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetConfigsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocumentsAndContinuationToken : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<CanopyDocument> _documents;
        private string _continuationToken;
        private bool? _hasMoreResults;
    
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("continuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hasMoreResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMoreResults
        {
            get { return _hasMoreResults; }
            set
            {
                if (_hasMoreResults != value)
                {
                    _hasMoreResults = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DocumentsAndContinuationToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentsAndContinuationToken>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocumentCustomPropertyGroup : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private System.Collections.Generic.List<DocumentGroupResult> _groups;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentGroupResult> Groups
        {
            get { return _groups; }
            set
            {
                if (_groups != value)
                {
                    _groups = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DocumentCustomPropertyGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentCustomPropertyGroup>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocumentUserInformation : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<TenantInformation> _tenants;
    
        [Newtonsoft.Json.JsonProperty("tenants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TenantInformation> Tenants
        {
            get { return _tenants; }
            set
            {
                if (_tenants != value)
                {
                    _tenants = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DocumentUserInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentUserInformation>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CanopyDocument : System.ComponentModel.INotifyPropertyChanged
    {
        private string _documentId;
        private string _tenantId;
        private string _userId;
        private string _name;
        private CanopyDocumentType? _type;
        private string _subType;
        private string _simVersion;
        private System.DateTime? _creationDate;
        private System.DateTime? _modifiedDate;
        private object _properties;
        private object _data;
        private SupportSession _supportSession;
        private string _notes;
        private bool? _deleteRequested;
        private string _parentWorksheetId;
    
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    _documentId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CanopyDocumentType? Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubType
        {
            get { return _subType; }
            set
            {
                if (_subType != value)
                {
                    _subType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    _modifiedDate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportSession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupportSession SupportSession
        {
            get { return _supportSession; }
            set
            {
                if (_supportSession != value)
                {
                    _supportSession = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deleteRequested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeleteRequested
        {
            get { return _deleteRequested; }
            set
            {
                if (_deleteRequested != value)
                {
                    _deleteRequested = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentWorksheetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentWorksheetId
        {
            get { return _parentWorksheetId; }
            set
            {
                if (_parentWorksheetId != value)
                {
                    _parentWorksheetId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static CanopyDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CanopyDocument>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocumentGroupResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _key;
        private int? _count;
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    _key = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count
        {
            get { return _count; }
            set
            {
                if (_count != value)
                {
                    _count = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DocumentGroupResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentGroupResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TenantInformation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _name;
        private string _shortName;
        private System.Collections.Generic.List<UserInformation> _users;
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserInformation> Users
        {
            get { return _users; }
            set
            {
                if (_users != value)
                {
                    _users = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static TenantInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TenantInformation>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SupportSession : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _isOpen;
        private System.DateTime? _modifiedDate;
        private string _modifiedTenantId;
        private string _modifiedUserId;
        private System.Collections.Generic.List<SupportSessionResponse> _responses;
    
        [Newtonsoft.Json.JsonProperty("isOpen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOpen
        {
            get { return _isOpen; }
            set
            {
                if (_isOpen != value)
                {
                    _isOpen = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    _modifiedDate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("modifiedTenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedTenantId
        {
            get { return _modifiedTenantId; }
            set
            {
                if (_modifiedTenantId != value)
                {
                    _modifiedTenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("modifiedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedUserId
        {
            get { return _modifiedUserId; }
            set
            {
                if (_modifiedUserId != value)
                {
                    _modifiedUserId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("responses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SupportSessionResponse> Responses
        {
            get { return _responses; }
            set
            {
                if (_responses != value)
                {
                    _responses = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SupportSession FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupportSession>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserInformation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _userId;
        private string _username;
        private string _email;
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UserInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserInformation>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SupportSessionResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _userId;
        private System.DateTime? _creationDate;
        private string _message;
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SupportSessionResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupportSessionResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NewConfigData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _configType;
        private System.Collections.Generic.List<DocumentCustomPropertyData> _properties;
        private object _config;
        private string _notes;
        private string _simVersion;
        private string _parentWorksheetId;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentWorksheetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentWorksheetId
        {
            get { return _parentWorksheetId; }
            set
            {
                if (_parentWorksheetId != value)
                {
                    _parentWorksheetId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static NewConfigData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewConfigData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocumentCustomPropertyData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _value;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DocumentCustomPropertyData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentCustomPropertyData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetConfigNamesQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<DocumentNameResult> _names;
        private System.Collections.Generic.List<SimVersionDocumentNameResult> _simVersionNames;
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentNameResult> Names
        {
            get { return _names; }
            set
            {
                if (_names != value)
                {
                    _names = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simVersionNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SimVersionDocumentNameResult> SimVersionNames
        {
            get { return _simVersionNames; }
            set
            {
                if (_simVersionNames != value)
                {
                    _simVersionNames = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetConfigNamesQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetConfigNamesQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocumentNameResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _configId;
        private string _userId;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigId
        {
            get { return _configId; }
            set
            {
                if (_configId != value)
                {
                    _configId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DocumentNameResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentNameResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SimVersionDocumentNameResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _path;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set
            {
                if (_path != value)
                {
                    _path = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SimVersionDocumentNameResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimVersionDocumentNameResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NewBatchConfigData : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<NewConfigData> _items;
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NewConfigData> Items
        {
            get { return _items; }
            set
            {
                if (_items != value)
                {
                    _items = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static NewBatchConfigData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewBatchConfigData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BatchCreateConfigsResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<string> _configIds;
    
        [Newtonsoft.Json.JsonProperty("configIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ConfigIds
        {
            get { return _configIds; }
            set
            {
                if (_configIds != value)
                {
                    _configIds = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static BatchCreateConfigsResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatchCreateConfigsResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedConfigData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _configType;
        private System.Collections.Generic.List<DocumentCustomPropertyData> _properties;
        private object _config;
        private string _notes;
        private string _simVersion;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedConfigData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedConfigData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetConfigQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private CanopyDocument _config;
        private string _convertedSimVersion;
        private DocumentUserInformation _userInformation;
    
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CanopyDocument Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("convertedSimVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertedSimVersion
        {
            get { return _convertedSimVersion; }
            set
            {
                if (_convertedSimVersion != value)
                {
                    _convertedSimVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentUserInformation UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetConfigQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetConfigQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfigOwnerData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _userId;
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ConfigOwnerData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigOwnerData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetConfigVersionsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<VersionedDocumentMetadata> _versions;
        private DocumentUserInformation _userInformation;
    
        [Newtonsoft.Json.JsonProperty("versions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VersionedDocumentMetadata> Versions
        {
            get { return _versions; }
            set
            {
                if (_versions != value)
                {
                    _versions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentUserInformation UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetConfigVersionsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetConfigVersionsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class VersionedDocumentMetadata : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _userId;
        private System.DateTime? _timestamp;
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Timestamp
        {
            get { return _timestamp; }
            set
            {
                if (_timestamp != value)
                {
                    _timestamp = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static VersionedDocumentMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionedDocumentMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ListFilter : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _itemsPerPage;
        private string _continuationToken;
        private string _orderByCustomProperty;
        private ListFilterOrderByProperty? _orderByProperty;
        private bool? _orderByDescending;
        private string _filterName;
        private ListFilterGroup _query;
        private bool? _includeIfDeleteRequested;
        private bool? _includeIfHasParentWorksheet;
    
        [Newtonsoft.Json.JsonProperty("itemsPerPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemsPerPage
        {
            get { return _itemsPerPage; }
            set
            {
                if (_itemsPerPage != value)
                {
                    _itemsPerPage = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("continuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderByCustomProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderByCustomProperty
        {
            get { return _orderByCustomProperty; }
            set
            {
                if (_orderByCustomProperty != value)
                {
                    _orderByCustomProperty = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderByProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListFilterOrderByProperty? OrderByProperty
        {
            get { return _orderByProperty; }
            set
            {
                if (_orderByProperty != value)
                {
                    _orderByProperty = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderByDescending", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OrderByDescending
        {
            get { return _orderByDescending; }
            set
            {
                if (_orderByDescending != value)
                {
                    _orderByDescending = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("filterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilterName
        {
            get { return _filterName; }
            set
            {
                if (_filterName != value)
                {
                    _filterName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListFilterGroup Query
        {
            get { return _query; }
            set
            {
                if (_query != value)
                {
                    _query = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("includeIfDeleteRequested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeIfDeleteRequested
        {
            get { return _includeIfDeleteRequested; }
            set
            {
                if (_includeIfDeleteRequested != value)
                {
                    _includeIfDeleteRequested = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("includeIfHasParentWorksheet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeIfHasParentWorksheet
        {
            get { return _includeIfHasParentWorksheet; }
            set
            {
                if (_includeIfHasParentWorksheet != value)
                {
                    _includeIfHasParentWorksheet = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ListFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ListFilterGroup : System.ComponentModel.INotifyPropertyChanged
    {
        private ListFilterGroupOperator? _operator;
        private System.Collections.Generic.List<ListFilterCondition> _conditions;
        private System.Collections.Generic.List<ListFilterGroup> _groups;
    
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListFilterGroupOperator? Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value)
                {
                    _operator = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ListFilterCondition> Conditions
        {
            get { return _conditions; }
            set
            {
                if (_conditions != value)
                {
                    _conditions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ListFilterGroup> Groups
        {
            get { return _groups; }
            set
            {
                if (_groups != value)
                {
                    _groups = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ListFilterGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListFilterGroup>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ListFilterCondition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _source;
        private string _name;
        private ListFilterConditionOperator? _operator;
        private string _value;
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source
        {
            get { return _source; }
            set
            {
                if (_source != value)
                {
                    _source = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListFilterConditionOperator? Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value)
                {
                    _operator = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ListFilterCondition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListFilterCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RegistrationData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _email;
        private string _username;
        private string _password;
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    _password = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static RegistrationData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RegistrationData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PasswordResetRequestData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenant;
        private string _email;
        private string _username;
    
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tenant
        {
            get { return _tenant; }
            set
            {
                if (_tenant != value)
                {
                    _tenant = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static PasswordResetRequestData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PasswordResetRequestData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PasswordResetConfirmationData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _userId;
        private string _newPassword;
        private string _token;
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewPassword
        {
            get { return _newPassword; }
            set
            {
                if (_newPassword != value)
                {
                    _newPassword = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token
        {
            get { return _token; }
            set
            {
                if (_token != value)
                {
                    _token = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static PasswordResetConfirmationData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PasswordResetConfirmationData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IdentifiedUserData : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _isUpdate;
        private string _tenant;
        private string _username;
        private string _email;
    
        [Newtonsoft.Json.JsonProperty("isUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsUpdate
        {
            get { return _isUpdate; }
            set
            {
                if (_isUpdate != value)
                {
                    _isUpdate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tenant
        {
            get { return _tenant; }
            set
            {
                if (_tenant != value)
                {
                    _tenant = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static IdentifiedUserData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdentifiedUserData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetUserRolesQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<string> _roles;
    
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Roles
        {
            get { return _roles; }
            set
            {
                if (_roles != value)
                {
                    _roles = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetUserRolesQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetUserRolesQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserRoleData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _role;
        private bool? _isEnabled;
    
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role
        {
            get { return _role; }
            set
            {
                if (_role != value)
                {
                    _role = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UserRoleData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetUpvotyTokenQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _token;
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token
        {
            get { return _token; }
            set
            {
                if (_token != value)
                {
                    _token = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetUpvotyTokenQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetUpvotyTokenQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TestAutoScaleFormulaQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private AutoScaleRun _autoScaleRun;
    
        [Newtonsoft.Json.JsonProperty("autoScaleRun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AutoScaleRun AutoScaleRun
        {
            get { return _autoScaleRun; }
            set
            {
                if (_autoScaleRun != value)
                {
                    _autoScaleRun = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static TestAutoScaleFormulaQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TestAutoScaleFormulaQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AutoScaleRun : System.ComponentModel.INotifyPropertyChanged
    {
        private AutoScaleRunError _error;
        private string _results;
        private System.DateTime? _timestamp;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AutoScaleRunError Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Results
        {
            get { return _results; }
            set
            {
                if (_results != value)
                {
                    _results = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Timestamp
        {
            get { return _timestamp; }
            set
            {
                if (_timestamp != value)
                {
                    _timestamp = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static AutoScaleRun FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AutoScaleRun>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AutoScaleRunError : System.ComponentModel.INotifyPropertyChanged
    {
        private string _code;
        private string _message;
        private System.Collections.Generic.List<NameValuePair> _values;
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NameValuePair> Values
        {
            get { return _values; }
            set
            {
                if (_values != value)
                {
                    _values = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static AutoScaleRunError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AutoScaleRunError>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NameValuePair : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _value;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static NameValuePair FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NameValuePair>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetPoolStatusQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _poolId;
        private GetPoolStatusQueryResultPoolState? _poolState;
        private GetPoolStatusQueryResultAllocationState? _allocationState;
        private int? _currentDedicated;
        private int? _targetDedicated;
        private int? _currentLowPriority;
        private int? _targetLowPriority;
        private int? _maximumTasksPerNode;
        private int? _schedulableComputeNodes;
        private int? _runningTasks;
        private System.Collections.Generic.List<ComputeNodeResult> _computeNodes;
    
        [Newtonsoft.Json.JsonProperty("poolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoolId
        {
            get { return _poolId; }
            set
            {
                if (_poolId != value)
                {
                    _poolId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poolState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetPoolStatusQueryResultPoolState? PoolState
        {
            get { return _poolState; }
            set
            {
                if (_poolState != value)
                {
                    _poolState = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("allocationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetPoolStatusQueryResultAllocationState? AllocationState
        {
            get { return _allocationState; }
            set
            {
                if (_allocationState != value)
                {
                    _allocationState = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currentDedicated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentDedicated
        {
            get { return _currentDedicated; }
            set
            {
                if (_currentDedicated != value)
                {
                    _currentDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("targetDedicated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetDedicated
        {
            get { return _targetDedicated; }
            set
            {
                if (_targetDedicated != value)
                {
                    _targetDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currentLowPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentLowPriority
        {
            get { return _currentLowPriority; }
            set
            {
                if (_currentLowPriority != value)
                {
                    _currentLowPriority = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("targetLowPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetLowPriority
        {
            get { return _targetLowPriority; }
            set
            {
                if (_targetLowPriority != value)
                {
                    _targetLowPriority = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maximumTasksPerNode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumTasksPerNode
        {
            get { return _maximumTasksPerNode; }
            set
            {
                if (_maximumTasksPerNode != value)
                {
                    _maximumTasksPerNode = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("schedulableComputeNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SchedulableComputeNodes
        {
            get { return _schedulableComputeNodes; }
            set
            {
                if (_schedulableComputeNodes != value)
                {
                    _schedulableComputeNodes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("runningTasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunningTasks
        {
            get { return _runningTasks; }
            set
            {
                if (_runningTasks != value)
                {
                    _runningTasks = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("computeNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ComputeNodeResult> ComputeNodes
        {
            get { return _computeNodes; }
            set
            {
                if (_computeNodes != value)
                {
                    _computeNodes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetPoolStatusQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPoolStatusQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ComputeNodeResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _computeNodeId;
        private ComputeNodeResultState? _state;
        private int? _runningTasks;
        private bool? _isDedicated;
    
        [Newtonsoft.Json.JsonProperty("computeNodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ComputeNodeId
        {
            get { return _computeNodeId; }
            set
            {
                if (_computeNodeId != value)
                {
                    _computeNodeId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ComputeNodeResultState? State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("runningTasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunningTasks
        {
            get { return _runningTasks; }
            set
            {
                if (_runningTasks != value)
                {
                    _runningTasks = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isDedicated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDedicated
        {
            get { return _isDedicated; }
            set
            {
                if (_isDedicated != value)
                {
                    _isDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ComputeNodeResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ComputeNodeResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetPoolsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<GetPoolsItem> _pools;
    
        [Newtonsoft.Json.JsonProperty("pools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GetPoolsItem> Pools
        {
            get { return _pools; }
            set
            {
                if (_pools != value)
                {
                    _pools = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetPoolsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPoolsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetPoolsItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _poolId;
        private int? _currentDedicated;
        private int? _targetDedicated;
        private int? _currentLowPriority;
        private int? _targetLowPriority;
        private System.Collections.Generic.List<GetPoolsItemInterval> _intervals;
    
        [Newtonsoft.Json.JsonProperty("poolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoolId
        {
            get { return _poolId; }
            set
            {
                if (_poolId != value)
                {
                    _poolId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currentDedicated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentDedicated
        {
            get { return _currentDedicated; }
            set
            {
                if (_currentDedicated != value)
                {
                    _currentDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("targetDedicated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetDedicated
        {
            get { return _targetDedicated; }
            set
            {
                if (_targetDedicated != value)
                {
                    _targetDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currentLowPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentLowPriority
        {
            get { return _currentLowPriority; }
            set
            {
                if (_currentLowPriority != value)
                {
                    _currentLowPriority = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("targetLowPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetLowPriority
        {
            get { return _targetLowPriority; }
            set
            {
                if (_targetLowPriority != value)
                {
                    _targetLowPriority = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("intervals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GetPoolsItemInterval> Intervals
        {
            get { return _intervals; }
            set
            {
                if (_intervals != value)
                {
                    _intervals = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetPoolsItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPoolsItem>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetPoolsItemInterval : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _totalCoreHours;
        private double? _dataEgressGiB;
        private double? _dataIngressGiB;
    
        [Newtonsoft.Json.JsonProperty("totalCoreHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalCoreHours
        {
            get { return _totalCoreHours; }
            set
            {
                if (_totalCoreHours != value)
                {
                    _totalCoreHours = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dataEgressGiB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DataEgressGiB
        {
            get { return _dataEgressGiB; }
            set
            {
                if (_dataEgressGiB != value)
                {
                    _dataEgressGiB = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dataIngressGiB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DataIngressGiB
        {
            get { return _dataIngressGiB; }
            set
            {
                if (_dataIngressGiB != value)
                {
                    _dataIngressGiB = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetPoolsItemInterval FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPoolsItemInterval>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetSimVersionDownloadsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;
        private System.Collections.Generic.List<FileDownloadMetadata> _downloads;
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("downloads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FileDownloadMetadata> Downloads
        {
            get { return _downloads; }
            set
            {
                if (_downloads != value)
                {
                    _downloads = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetSimVersionDownloadsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimVersionDownloadsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FileDownloadMetadata : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static FileDownloadMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileDownloadMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetSimVersionDocumentsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;
        private System.Collections.Generic.List<TextDocumentOptionalContent> _documents;
        private System.Collections.Generic.Dictionary<string, string> _units;
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TextDocumentOptionalContent> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Units
        {
            get { return _units; }
            set
            {
                if (_units != value)
                {
                    _units = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetSimVersionDocumentsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimVersionDocumentsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TextDocumentOptionalContent : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _content;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    _content = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static TextDocumentOptionalContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TextDocumentOptionalContent>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetSimVersionDocumentQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private TextDocument _document;
    
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextDocument Document
        {
            get { return _document; }
            set
            {
                if (_document != value)
                {
                    _document = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetSimVersionDocumentQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimVersionDocumentQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TextDocument : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _content;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    _content = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static TextDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TextDocument>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetWikiDocumentQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private TextDocument _document;
    
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextDocument Document
        {
            get { return _document; }
            set
            {
                if (_document != value)
                {
                    _document = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetWikiDocumentQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetWikiDocumentQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NewSimVersionData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static NewSimVersionData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewSimVersionData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetAllTenantsStudyStatisticsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<TenantStatistics> _tenants;
    
        [Newtonsoft.Json.JsonProperty("tenants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TenantStatistics> Tenants
        {
            get { return _tenants; }
            set
            {
                if (_tenants != value)
                {
                    _tenants = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetAllTenantsStudyStatisticsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAllTenantsStudyStatisticsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TenantStatistics : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private object _statistics;
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Statistics
        {
            get { return _statistics; }
            set
            {
                if (_statistics != value)
                {
                    _statistics = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static TenantStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TenantStatistics>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantBillableStoredSimulationCountQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _succeededSimulations;
        private int? _succeededStorageCredits;
    
        [Newtonsoft.Json.JsonProperty("succeededSimulations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SucceededSimulations
        {
            get { return _succeededSimulations; }
            set
            {
                if (_succeededSimulations != value)
                {
                    _succeededSimulations = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("succeededStorageCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SucceededStorageCredits
        {
            get { return _succeededStorageCredits; }
            set
            {
                if (_succeededStorageCredits != value)
                {
                    _succeededStorageCredits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantBillableStoredSimulationCountQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantBillableStoredSimulationCountQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantStudyStatisticsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private object _statistics;
    
        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Statistics
        {
            get { return _statistics; }
            set
            {
                if (_statistics != value)
                {
                    _statistics = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantStudyStatisticsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantStudyStatisticsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetStudyTypesQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<StudyTypeDefinition> _studyTypes;
        private System.Collections.Generic.List<SimTypeDefinition> _simTypes;
        private System.Collections.Generic.List<ConfigTypeDefinition> _configTypes;
        private System.Collections.Generic.List<ConfigTypeMetadata> _configTypeMetadata;
    
        [Newtonsoft.Json.JsonProperty("studyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StudyTypeDefinition> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SimTypeDefinition> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ConfigTypeDefinition> ConfigTypes
        {
            get { return _configTypes; }
            set
            {
                if (_configTypes != value)
                {
                    _configTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configTypeMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ConfigTypeMetadata> ConfigTypeMetadata
        {
            get { return _configTypeMetadata; }
            set
            {
                if (_configTypeMetadata != value)
                {
                    _configTypeMetadata = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetStudyTypesQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyTypesQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyTypeDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private StudyTypeDefinitionStudyType? _studyType;
        private string _name;
        private System.Collections.Generic.List<SimTypes> _simTypes;
        private System.Collections.Generic.List<SimulationInput> _inputs;
        private StudyTypeDefinitionPoolType? _poolType;
        private StudyTypeDefinitionBuildPoolType? _buildPoolType;
        private StudyTypeDefinitionState? _state;
        private bool? _validForTransient;
        private bool? _validForInline;
        private System.Collections.Generic.List<IPreviousDefinitionStudyTypeDefinition> _previousDefinitions;
        private System.Collections.Generic.List<ImplicitSimTypes> _implicitSimTypes;
    
        [Newtonsoft.Json.JsonProperty("studyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StudyTypeDefinitionStudyType? StudyType
        {
            get { return _studyType; }
            set
            {
                if (_studyType != value)
                {
                    _studyType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<SimTypes> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SimulationInput> Inputs
        {
            get { return _inputs; }
            set
            {
                if (_inputs != value)
                {
                    _inputs = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poolType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StudyTypeDefinitionPoolType? PoolType
        {
            get { return _poolType; }
            set
            {
                if (_poolType != value)
                {
                    _poolType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("buildPoolType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StudyTypeDefinitionBuildPoolType? BuildPoolType
        {
            get { return _buildPoolType; }
            set
            {
                if (_buildPoolType != value)
                {
                    _buildPoolType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StudyTypeDefinitionState? State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("validForTransient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidForTransient
        {
            get { return _validForTransient; }
            set
            {
                if (_validForTransient != value)
                {
                    _validForTransient = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("validForInline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidForInline
        {
            get { return _validForInline; }
            set
            {
                if (_validForInline != value)
                {
                    _validForInline = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("previousDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<IPreviousDefinitionStudyTypeDefinition> PreviousDefinitions
        {
            get { return _previousDefinitions; }
            set
            {
                if (_previousDefinitions != value)
                {
                    _previousDefinitions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("implicitSimTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<ImplicitSimTypes> ImplicitSimTypes
        {
            get { return _implicitSimTypes; }
            set
            {
                if (_implicitSimTypes != value)
                {
                    _implicitSimTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyTypeDefinition>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SimTypeDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private SimTypeDefinitionSimType? _simType;
        private string _name;
        private System.Collections.Generic.List<string> _knownOutputFiles;
        private SimTypeDefinitionState? _state;
        private SimTypeInputTelemetryChannels _inputTelemetryChannels;
        private System.Collections.Generic.List<IPreviousDefinitionSimTypeDefinition> _previousDefinitions;
    
        [Newtonsoft.Json.JsonProperty("simType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SimTypeDefinitionSimType? SimType
        {
            get { return _simType; }
            set
            {
                if (_simType != value)
                {
                    _simType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("knownOutputFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> KnownOutputFiles
        {
            get { return _knownOutputFiles; }
            set
            {
                if (_knownOutputFiles != value)
                {
                    _knownOutputFiles = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SimTypeDefinitionState? State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inputTelemetryChannels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimTypeInputTelemetryChannels InputTelemetryChannels
        {
            get { return _inputTelemetryChannels; }
            set
            {
                if (_inputTelemetryChannels != value)
                {
                    _inputTelemetryChannels = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("previousDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<IPreviousDefinitionSimTypeDefinition> PreviousDefinitions
        {
            get { return _previousDefinitions; }
            set
            {
                if (_previousDefinitions != value)
                {
                    _previousDefinitions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SimTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimTypeDefinition>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfigTypeDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private ConfigTypeDefinitionState? _state;
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfigTypeDefinitionState? State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ConfigTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigTypeDefinition>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfigTypeMetadata : System.ComponentModel.INotifyPropertyChanged
    {
        private string _singularKey;
        private string _pluralKey;
        private string _name;
        private string _titleName;
        private string _icon;
    
        [Newtonsoft.Json.JsonProperty("singularKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SingularKey
        {
            get { return _singularKey; }
            set
            {
                if (_singularKey != value)
                {
                    _singularKey = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pluralKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PluralKey
        {
            get { return _pluralKey; }
            set
            {
                if (_pluralKey != value)
                {
                    _pluralKey = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("titleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TitleName
        {
            get { return _titleName; }
            set
            {
                if (_titleName != value)
                {
                    _titleName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon
        {
            get { return _icon; }
            set
            {
                if (_icon != value)
                {
                    _icon = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ConfigTypeMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigTypeMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SimulationInput : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private bool? _isRequired;
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequired
        {
            get { return _isRequired; }
            set
            {
                if (_isRequired != value)
                {
                    _isRequired = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SimulationInput FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationInput>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IPreviousDefinitionStudyTypeDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;
        private StudyTypeDefinition _definition;
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyTypeDefinition Definition
        {
            get { return _definition; }
            set
            {
                if (_definition != value)
                {
                    _definition = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static IPreviousDefinitionStudyTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IPreviousDefinitionStudyTypeDefinition>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SimTypeInputTelemetryChannels : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<ValidSourceSimTypes> _validSourceSimTypes;
        private System.Collections.Generic.List<SimTypeInputTelemetryChannel> _channels;
    
        [Newtonsoft.Json.JsonProperty("validSourceSimTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<ValidSourceSimTypes> ValidSourceSimTypes
        {
            get { return _validSourceSimTypes; }
            set
            {
                if (_validSourceSimTypes != value)
                {
                    _validSourceSimTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SimTypeInputTelemetryChannel> Channels
        {
            get { return _channels; }
            set
            {
                if (_channels != value)
                {
                    _channels = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SimTypeInputTelemetryChannels FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimTypeInputTelemetryChannels>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IPreviousDefinitionSimTypeDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;
        private SimTypeDefinition _definition;
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimTypeDefinition Definition
        {
            get { return _definition; }
            set
            {
                if (_definition != value)
                {
                    _definition = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static IPreviousDefinitionSimTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IPreviousDefinitionSimTypeDefinition>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SimTypeInputTelemetryChannel : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private bool? _isRequired;
        private SimTypeInputTelemetryEvaluatedChannel _evaluationDefinition;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequired
        {
            get { return _isRequired; }
            set
            {
                if (_isRequired != value)
                {
                    _isRequired = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("evaluationDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimTypeInputTelemetryEvaluatedChannel EvaluationDefinition
        {
            get { return _evaluationDefinition; }
            set
            {
                if (_evaluationDefinition != value)
                {
                    _evaluationDefinition = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SimTypeInputTelemetryChannel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimTypeInputTelemetryChannel>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SimTypeInputTelemetryEvaluatedChannel : System.ComponentModel.INotifyPropertyChanged
    {
        private string _prefix;
        private System.Collections.Generic.List<SimTypeInputTelemetryEvaluatedChannelSuffix> _additions;
    
        [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix
        {
            get { return _prefix; }
            set
            {
                if (_prefix != value)
                {
                    _prefix = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("additions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SimTypeInputTelemetryEvaluatedChannelSuffix> Additions
        {
            get { return _additions; }
            set
            {
                if (_additions != value)
                {
                    _additions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SimTypeInputTelemetryEvaluatedChannel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimTypeInputTelemetryEvaluatedChannel>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SimTypeInputTelemetryEvaluatedChannelSuffix : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simConfigLookupPath;
        private string _propertyKey;
        private string _suffix;
    
        [Newtonsoft.Json.JsonProperty("simConfigLookupPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimConfigLookupPath
        {
            get { return _simConfigLookupPath; }
            set
            {
                if (_simConfigLookupPath != value)
                {
                    _simConfigLookupPath = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("propertyKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyKey
        {
            get { return _propertyKey; }
            set
            {
                if (_propertyKey != value)
                {
                    _propertyKey = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suffix
        {
            get { return _suffix; }
            set
            {
                if (_suffix != value)
                {
                    _suffix = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SimTypeInputTelemetryEvaluatedChannelSuffix FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimTypeInputTelemetryEvaluatedChannelSuffix>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetStudiesQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private StudyDocumentsAndContinuationToken _queryResults;
        private System.Collections.Generic.List<DocumentCustomPropertyGroup> _groupResults;
        private DocumentUserInformation _userInformation;
    
        [Newtonsoft.Json.JsonProperty("queryResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyDocumentsAndContinuationToken QueryResults
        {
            get { return _queryResults; }
            set
            {
                if (_queryResults != value)
                {
                    _queryResults = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("groupResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyGroup> GroupResults
        {
            get { return _groupResults; }
            set
            {
                if (_groupResults != value)
                {
                    _groupResults = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentUserInformation UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetStudiesQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudiesQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyDocumentsAndContinuationToken : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<CanopyDocument> _documents;
        private string _continuationToken;
        private bool? _hasMoreResults;
    
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("continuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hasMoreResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMoreResults
        {
            get { return _hasMoreResults; }
            set
            {
                if (_hasMoreResults != value)
                {
                    _hasMoreResults = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyDocumentsAndContinuationToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyDocumentsAndContinuationToken>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NewStudyData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private bool? _isTransient;
        private NewStudyDataStudyType? _studyType;
        private System.Collections.Generic.List<NewStudyDataSource> _sources;
        private System.Collections.Generic.List<DocumentCustomPropertyData> _properties;
        private object _study;
        private string _notes;
        private string _simVersion;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isTransient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTransient
        {
            get { return _isTransient; }
            set
            {
                if (_isTransient != value)
                {
                    _isTransient = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("studyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewStudyDataStudyType? StudyType
        {
            get { return _studyType; }
            set
            {
                if (_studyType != value)
                {
                    _studyType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NewStudyDataSource> Sources
        {
            get { return _sources; }
            set
            {
                if (_sources != value)
                {
                    _sources = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("study", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Study
        {
            get { return _study; }
            set
            {
                if (_study != value)
                {
                    _study = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static NewStudyData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewStudyData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NewStudyDataSource : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private string _userId;
        private string _configId;
        private string _name;
        private bool? _isEdited;
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigId
        {
            get { return _configId; }
            set
            {
                if (_configId != value)
                {
                    _configId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isEdited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEdited
        {
            get { return _isEdited; }
            set
            {
                if (_isEdited != value)
                {
                    _isEdited = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static NewStudyDataSource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewStudyDataSource>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PostStudyResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _studyId;
    
        [Newtonsoft.Json.JsonProperty("studyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StudyId
        {
            get { return _studyId; }
            set
            {
                if (_studyId != value)
                {
                    _studyId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static PostStudyResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostStudyResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantAccessInformationQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantUrl;
        private string _accessSignature;
    
        [Newtonsoft.Json.JsonProperty("tenantUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantUrl
        {
            get { return _tenantUrl; }
            set
            {
                if (_tenantUrl != value)
                {
                    _tenantUrl = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accessSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantAccessInformationQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantAccessInformationQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedStudyData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private System.Collections.Generic.List<DocumentCustomPropertyData> _properties;
        private string _notes;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedStudyData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedStudyData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetStudyQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private CanopyDocument _study;
        private string _convertedSimVersion;
        private StudyBlobAccessInformation _accessInformation;
        private System.Collections.Generic.List<SimTypes2> _simTypes;
        private DocumentUserInformation _userInformation;
    
        [Newtonsoft.Json.JsonProperty("study", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CanopyDocument Study
        {
            get { return _study; }
            set
            {
                if (_study != value)
                {
                    _study = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("convertedSimVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertedSimVersion
        {
            get { return _convertedSimVersion; }
            set
            {
                if (_convertedSimVersion != value)
                {
                    _convertedSimVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accessInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyBlobAccessInformation AccessInformation
        {
            get { return _accessInformation; }
            set
            {
                if (_accessInformation != value)
                {
                    _accessInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<SimTypes2> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentUserInformation UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetStudyQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyBlobAccessInformation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _url;
        private string _accessSignature;
        private System.Collections.Generic.List<BlobAccessInformation> _jobs;
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accessSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("jobs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BlobAccessInformation> Jobs
        {
            get { return _jobs; }
            set
            {
                if (_jobs != value)
                {
                    _jobs = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyBlobAccessInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyBlobAccessInformation>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BlobAccessInformation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _url;
        private string _accessSignature;
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accessSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static BlobAccessInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BlobAccessInformation>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetStudyDownloadUrlQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _accessSignature;
        private string _expiry;
    
        [Newtonsoft.Json.JsonProperty("accessSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expiry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expiry
        {
            get { return _expiry; }
            set
            {
                if (_expiry != value)
                {
                    _expiry = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetStudyDownloadUrlQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyDownloadUrlQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetStudyJobsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private StudyJobDocumentsAndContinuationToken _queryResults;
        private System.Collections.Generic.List<DocumentCustomPropertyGroup> _groupResults;
    
        [Newtonsoft.Json.JsonProperty("queryResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyJobDocumentsAndContinuationToken QueryResults
        {
            get { return _queryResults; }
            set
            {
                if (_queryResults != value)
                {
                    _queryResults = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("groupResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyGroup> GroupResults
        {
            get { return _groupResults; }
            set
            {
                if (_groupResults != value)
                {
                    _groupResults = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetStudyJobsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyJobsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyJobDocumentsAndContinuationToken : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<CanopyDocument> _documents;
        private string _continuationToken;
        private bool? _hasMoreResults;
    
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("continuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hasMoreResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMoreResults
        {
            get { return _hasMoreResults; }
            set
            {
                if (_hasMoreResults != value)
                {
                    _hasMoreResults = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyJobDocumentsAndContinuationToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyJobDocumentsAndContinuationToken>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetStudyJobQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private CanopyDocument _studyJob;
        private object _studyJobInput;
        private string _convertedSimVersion;
        private System.Collections.Generic.List<SimTypes3> _simTypes;
        private BlobAccessInformation _accessInformation;
    
        [Newtonsoft.Json.JsonProperty("studyJob", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CanopyDocument StudyJob
        {
            get { return _studyJob; }
            set
            {
                if (_studyJob != value)
                {
                    _studyJob = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("studyJobInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object StudyJobInput
        {
            get { return _studyJobInput; }
            set
            {
                if (_studyJobInput != value)
                {
                    _studyJobInput = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("convertedSimVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertedSimVersion
        {
            get { return _convertedSimVersion; }
            set
            {
                if (_convertedSimVersion != value)
                {
                    _convertedSimVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<SimTypes3> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accessInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BlobAccessInformation AccessInformation
        {
            get { return _accessInformation; }
            set
            {
                if (_accessInformation != value)
                {
                    _accessInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetStudyJobQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyJobQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetStudyJobMetadataQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private CanopyDocument _studyJob;
        private BlobAccessInformation _accessInformation;
    
        [Newtonsoft.Json.JsonProperty("studyJob", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CanopyDocument StudyJob
        {
            get { return _studyJob; }
            set
            {
                if (_studyJob != value)
                {
                    _studyJob = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accessInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BlobAccessInformation AccessInformation
        {
            get { return _accessInformation; }
            set
            {
                if (_accessInformation != value)
                {
                    _accessInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetStudyJobMetadataQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStudyJobMetadataQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetAllSupportSessionsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<CanopyDocument> _documents;
        private DocumentUserInformation _userInformation;
        private System.Collections.Generic.List<SupportSessionsRequestMetadata> _queryMetadata;
    
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentUserInformation UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("queryMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SupportSessionsRequestMetadata> QueryMetadata
        {
            get { return _queryMetadata; }
            set
            {
                if (_queryMetadata != value)
                {
                    _queryMetadata = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetAllSupportSessionsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAllSupportSessionsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SupportSessionsRequestMetadata : System.ComponentModel.INotifyPropertyChanged
    {
        private string _databaseId;
        private string _tenantId;
        private double? _queryTimeMilliseconds;
        private double? _timeToQueryStartMilliseconds;
    
        [Newtonsoft.Json.JsonProperty("databaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseId
        {
            get { return _databaseId; }
            set
            {
                if (_databaseId != value)
                {
                    _databaseId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("queryTimeMilliseconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QueryTimeMilliseconds
        {
            get { return _queryTimeMilliseconds; }
            set
            {
                if (_queryTimeMilliseconds != value)
                {
                    _queryTimeMilliseconds = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timeToQueryStartMilliseconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TimeToQueryStartMilliseconds
        {
            get { return _timeToQueryStartMilliseconds; }
            set
            {
                if (_timeToQueryStartMilliseconds != value)
                {
                    _timeToQueryStartMilliseconds = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SupportSessionsRequestMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupportSessionsRequestMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetSupportSessionQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private SupportSession _session;
        private DocumentUserInformation _userInformation;
    
        [Newtonsoft.Json.JsonProperty("session", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupportSession Session
        {
            get { return _session; }
            set
            {
                if (_session != value)
                {
                    _session = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentUserInformation UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetSupportSessionQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSupportSessionQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SupportSessionData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _message;
        private bool? _isClosed;
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isClosed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsClosed
        {
            get { return _isClosed; }
            set
            {
                if (_isClosed != value)
                {
                    _isClosed = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SupportSessionData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SupportSessionData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NewTenantData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _shortName;
        private string _databaseId;
        private string _region;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("databaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseId
        {
            get { return _databaseId; }
            set
            {
                if (_databaseId != value)
                {
                    _databaseId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region
        {
            get { return _region; }
            set
            {
                if (_region != value)
                {
                    _region = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static NewTenantData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewTenantData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<GetTenantsQueryResultTenantItem> _tenants;
    
        [Newtonsoft.Json.JsonProperty("tenants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GetTenantsQueryResultTenantItem> Tenants
        {
            get { return _tenants; }
            set
            {
                if (_tenants != value)
                {
                    _tenants = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantsQueryResultTenantItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _name;
        private string _shortName;
        private System.DateTime? _creationDate;
        private bool? _isEnabled;
        private string _databaseId;
        private string _region;
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("databaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseId
        {
            get { return _databaseId; }
            set
            {
                if (_databaseId != value)
                {
                    _databaseId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region
        {
            get { return _region; }
            set
            {
                if (_region != value)
                {
                    _region = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantsQueryResultTenantItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantsQueryResultTenantItem>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedTenantData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _shortName;
        private bool? _isEnabled;
        private string _databaseId;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("databaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseId
        {
            get { return _databaseId; }
            set
            {
                if (_databaseId != value)
                {
                    _databaseId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedTenantData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedTenantData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _shortName;
        private System.DateTime? _creationDate;
        private bool? _isEnabled;
        private string _databaseId;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("databaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseId
        {
            get { return _databaseId; }
            set
            {
                if (_databaseId != value)
                {
                    _databaseId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantUsersQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<GetTenantUsersQueryResultUserItem> _users;
    
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GetTenantUsersQueryResultUserItem> Users
        {
            get { return _users; }
            set
            {
                if (_users != value)
                {
                    _users = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantUsersQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantUsersQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantUsersQueryResultUserItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _userId;
        private string _username;
        private string _email;
        private System.Collections.Generic.List<string> _roles;
        private bool? _isEnabled;
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Roles
        {
            get { return _roles; }
            set
            {
                if (_roles != value)
                {
                    _roles = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantUsersQueryResultUserItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantUsersQueryResultUserItem>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantChannelWhitelistsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private TenantChannelWhitelists _settings;
    
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenantChannelWhitelists Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantChannelWhitelistsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantChannelWhitelistsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TenantChannelWhitelists : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<string> _additiveChannelWhitelist;
    
        [Newtonsoft.Json.JsonProperty("additiveChannelWhitelist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AdditiveChannelWhitelist
        {
            get { return _additiveChannelWhitelist; }
            set
            {
                if (_additiveChannelWhitelist != value)
                {
                    _additiveChannelWhitelist = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static TenantChannelWhitelists FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TenantChannelWhitelists>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedTenantChannelWhitelists : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<string> _additiveChannelWhitelist;
    
        [Newtonsoft.Json.JsonProperty("additiveChannelWhitelist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AdditiveChannelWhitelist
        {
            get { return _additiveChannelWhitelist; }
            set
            {
                if (_additiveChannelWhitelist != value)
                {
                    _additiveChannelWhitelist = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedTenantChannelWhitelists FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedTenantChannelWhitelists>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantDefaultCustomPropertyNamesQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private TenantDefaultCustomPropertyNames _settings;
        private System.Collections.Generic.List<DocumentTypeCustomPropertyGroups> _customPropertyGroups;
        private System.Collections.Generic.List<StudyTypes> _studyTypes;
        private System.Collections.Generic.List<string> _configTypes;
    
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenantDefaultCustomPropertyNames Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customPropertyGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentTypeCustomPropertyGroups> CustomPropertyGroups
        {
            get { return _customPropertyGroups; }
            set
            {
                if (_customPropertyGroups != value)
                {
                    _customPropertyGroups = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("studyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<StudyTypes> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ConfigTypes
        {
            get { return _configTypes; }
            set
            {
                if (_configTypes != value)
                {
                    _configTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantDefaultCustomPropertyNamesQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantDefaultCustomPropertyNamesQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TenantDefaultCustomPropertyNames : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<DefaultCustomPropertyNames> _defaultCustomPropertyNames;
    
        [Newtonsoft.Json.JsonProperty("defaultCustomPropertyNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DefaultCustomPropertyNames> DefaultCustomPropertyNames
        {
            get { return _defaultCustomPropertyNames; }
            set
            {
                if (_defaultCustomPropertyNames != value)
                {
                    _defaultCustomPropertyNames = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static TenantDefaultCustomPropertyNames FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TenantDefaultCustomPropertyNames>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocumentTypeCustomPropertyGroups : System.ComponentModel.INotifyPropertyChanged
    {
        private DocumentTypeCustomPropertyGroupsTarget? _target;
        private System.Collections.Generic.List<DocumentCustomPropertyGroup> _properties;
    
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentTypeCustomPropertyGroupsTarget? Target
        {
            get { return _target; }
            set
            {
                if (_target != value)
                {
                    _target = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyGroup> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DocumentTypeCustomPropertyGroups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentTypeCustomPropertyGroups>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DefaultCustomPropertyNames : System.ComponentModel.INotifyPropertyChanged
    {
        private DefaultCustomPropertyNamesTarget? _target;
        private System.Collections.Generic.List<string> _names;
    
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DefaultCustomPropertyNamesTarget? Target
        {
            get { return _target; }
            set
            {
                if (_target != value)
                {
                    _target = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Names
        {
            get { return _names; }
            set
            {
                if (_names != value)
                {
                    _names = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DefaultCustomPropertyNames FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultCustomPropertyNames>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedTenantDefaultCustomPropertyNames : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<DefaultCustomPropertyNames> _defaultCustomPropertyNames;
    
        [Newtonsoft.Json.JsonProperty("defaultCustomPropertyNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DefaultCustomPropertyNames> DefaultCustomPropertyNames
        {
            get { return _defaultCustomPropertyNames; }
            set
            {
                if (_defaultCustomPropertyNames != value)
                {
                    _defaultCustomPropertyNames = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedTenantDefaultCustomPropertyNames FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedTenantDefaultCustomPropertyNames>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantChannelImportMappingsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<ChannelImportMapping> _channelImportMappings;
    
        [Newtonsoft.Json.JsonProperty("channelImportMappings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChannelImportMapping> ChannelImportMappings
        {
            get { return _channelImportMappings; }
            set
            {
                if (_channelImportMappings != value)
                {
                    _channelImportMappings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantChannelImportMappingsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantChannelImportMappingsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ChannelImportMapping : System.ComponentModel.INotifyPropertyChanged
    {
        private string _from;
        private string _to;
    
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From
        {
            get { return _from; }
            set
            {
                if (_from != value)
                {
                    _from = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To
        {
            get { return _to; }
            set
            {
                if (_to != value)
                {
                    _to = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ChannelImportMapping FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChannelImportMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedChannelImportMappings : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<ChannelImportMapping> _channelImportMappings;
    
        [Newtonsoft.Json.JsonProperty("channelImportMappings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChannelImportMapping> ChannelImportMappings
        {
            get { return _channelImportMappings; }
            set
            {
                if (_channelImportMappings != value)
                {
                    _channelImportMappings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedChannelImportMappings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedChannelImportMappings>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantWorksheetLabelDefinitionsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private LabelDefinitions _labelDefinitions;
    
        [Newtonsoft.Json.JsonProperty("labelDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelDefinitions LabelDefinitions
        {
            get { return _labelDefinitions; }
            set
            {
                if (_labelDefinitions != value)
                {
                    _labelDefinitions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantWorksheetLabelDefinitionsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantWorksheetLabelDefinitionsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LabelDefinitions : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<ConfigColumnLabelDefinitions> _configLabelDefinitions;
        private System.Collections.Generic.List<SimulationColumnLabelDefinitions> _simulationLabelDefinitions;
    
        [Newtonsoft.Json.JsonProperty("configLabelDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ConfigColumnLabelDefinitions> ConfigLabelDefinitions
        {
            get { return _configLabelDefinitions; }
            set
            {
                if (_configLabelDefinitions != value)
                {
                    _configLabelDefinitions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simulationLabelDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SimulationColumnLabelDefinitions> SimulationLabelDefinitions
        {
            get { return _simulationLabelDefinitions; }
            set
            {
                if (_simulationLabelDefinitions != value)
                {
                    _simulationLabelDefinitions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static LabelDefinitions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LabelDefinitions>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfigColumnLabelDefinitions : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private System.Collections.Generic.List<LabelDefinition> _labels;
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LabelDefinition> Labels
        {
            get { return _labels; }
            set
            {
                if (_labels != value)
                {
                    _labels = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ConfigColumnLabelDefinitions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigColumnLabelDefinitions>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SimulationColumnLabelDefinitions : System.ComponentModel.INotifyPropertyChanged
    {
        private SimulationColumnLabelDefinitionsSimType? _simType;
        private System.Collections.Generic.List<LabelDefinition> _labels;
    
        [Newtonsoft.Json.JsonProperty("simType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SimulationColumnLabelDefinitionsSimType? SimType
        {
            get { return _simType; }
            set
            {
                if (_simType != value)
                {
                    _simType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LabelDefinition> Labels
        {
            get { return _labels; }
            set
            {
                if (_labels != value)
                {
                    _labels = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SimulationColumnLabelDefinitions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationColumnLabelDefinitions>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LabelDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _source;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source
        {
            get { return _source; }
            set
            {
                if (_source != value)
                {
                    _source = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static LabelDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LabelDefinition>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedWorksheetLabelDefinitions : System.ComponentModel.INotifyPropertyChanged
    {
        private LabelDefinitions _labelDefinitions;
    
        [Newtonsoft.Json.JsonProperty("labelDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelDefinitions LabelDefinitions
        {
            get { return _labelDefinitions; }
            set
            {
                if (_labelDefinitions != value)
                {
                    _labelDefinitions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedWorksheetLabelDefinitions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedWorksheetLabelDefinitions>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetTenantSettingsSimVersionQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetTenantSettingsSimVersionQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTenantSettingsSimVersionQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedTenantSettingsSimVersion : System.ComponentModel.INotifyPropertyChanged
    {
        private string _simVersion;
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedTenantSettingsSimVersion FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedTenantSettingsSimVersion>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetAdminTenantSettingsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private AdminTenantSettings _settings;
        private string _eTag;
    
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdminTenantSettings Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetAdminTenantSettingsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAdminTenantSettingsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AdminTenantSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<StudyTypes2> _studyTypes;
        private System.Collections.Generic.List<string> _tags;
        private System.Collections.Generic.List<string> _internalTags;
        private string _simVersion;
        private PoolSettings _poolSettings;
        private PoolSettings _secondaryPoolSettings;
        private PoolSettings _heavyPoolSettings;
    
        [Newtonsoft.Json.JsonProperty("studyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<StudyTypes2> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Tags
        {
            get { return _tags; }
            set
            {
                if (_tags != value)
                {
                    _tags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("internalTags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> InternalTags
        {
            get { return _internalTags; }
            set
            {
                if (_internalTags != value)
                {
                    _internalTags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings PoolSettings
        {
            get { return _poolSettings; }
            set
            {
                if (_poolSettings != value)
                {
                    _poolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("secondaryPoolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings SecondaryPoolSettings
        {
            get { return _secondaryPoolSettings; }
            set
            {
                if (_secondaryPoolSettings != value)
                {
                    _secondaryPoolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("heavyPoolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings HeavyPoolSettings
        {
            get { return _heavyPoolSettings; }
            set
            {
                if (_heavyPoolSettings != value)
                {
                    _heavyPoolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static AdminTenantSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdminTenantSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PoolSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private string _poolId;
        private string _autoScaleFormula;
    
        [Newtonsoft.Json.JsonProperty("poolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoolId
        {
            get { return _poolId; }
            set
            {
                if (_poolId != value)
                {
                    _poolId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("autoScaleFormula", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutoScaleFormula
        {
            get { return _autoScaleFormula; }
            set
            {
                if (_autoScaleFormula != value)
                {
                    _autoScaleFormula = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static PoolSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PoolSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedAdminTenantSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private AdminTenantSettingsBuilder _settings;
        private string _eTag;
    
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdminTenantSettingsBuilder Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedAdminTenantSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedAdminTenantSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AdminTenantSettingsBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<StudyTypes3> _studyTypes;
        private System.Collections.Generic.List<string> _tags;
        private System.Collections.Generic.List<string> _internalTags;
        private string _simVersion;
        private PoolSettings _poolSettings;
        private PoolSettings _secondaryPoolSettings;
        private PoolSettings _heavyPoolSettings;
    
        [Newtonsoft.Json.JsonProperty("studyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<StudyTypes3> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Tags
        {
            get { return _tags; }
            set
            {
                if (_tags != value)
                {
                    _tags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("internalTags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> InternalTags
        {
            get { return _internalTags; }
            set
            {
                if (_internalTags != value)
                {
                    _internalTags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings PoolSettings
        {
            get { return _poolSettings; }
            set
            {
                if (_poolSettings != value)
                {
                    _poolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("secondaryPoolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings SecondaryPoolSettings
        {
            get { return _secondaryPoolSettings; }
            set
            {
                if (_secondaryPoolSettings != value)
                {
                    _secondaryPoolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("heavyPoolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoolSettings HeavyPoolSettings
        {
            get { return _heavyPoolSettings; }
            set
            {
                if (_heavyPoolSettings != value)
                {
                    _heavyPoolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static AdminTenantSettingsBuilder FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdminTenantSettingsBuilder>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetUserSettingsQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private UserSettings _settings;
        private string _eTag;
    
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserSettings Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetUserSettingsQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetUserSettingsQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<ChannelSettings> _channels;
        private System.Collections.Generic.List<ChartSettings> _charts;
        private LabelDefinitions _labelDefinitions;
    
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChannelSettings> Channels
        {
            get { return _channels; }
            set
            {
                if (_channels != value)
                {
                    _channels = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("charts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChartSettings> Charts
        {
            get { return _charts; }
            set
            {
                if (_charts != value)
                {
                    _charts = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labelDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelDefinitions LabelDefinitions
        {
            get { return _labelDefinitions; }
            set
            {
                if (_labelDefinitions != value)
                {
                    _labelDefinitions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UserSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ChannelSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _units;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units
        {
            get { return _units; }
            set
            {
                if (_units != value)
                {
                    _units = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ChannelSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChannelSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ChartSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private string _chartType;
        private string _chartId;
        private string _preferredChartId;
        private string _preferredChartUserId;
    
        [Newtonsoft.Json.JsonProperty("chartType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChartType
        {
            get { return _chartType; }
            set
            {
                if (_chartType != value)
                {
                    _chartType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("chartId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChartId
        {
            get { return _chartId; }
            set
            {
                if (_chartId != value)
                {
                    _chartId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("preferredChartId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreferredChartId
        {
            get { return _preferredChartId; }
            set
            {
                if (_preferredChartId != value)
                {
                    _preferredChartId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("preferredChartUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreferredChartUserId
        {
            get { return _preferredChartUserId; }
            set
            {
                if (_preferredChartUserId != value)
                {
                    _preferredChartUserId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ChartSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChartSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedUserSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private UserSettingsBuilder _settings;
        private string _eTag;
    
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserSettingsBuilder Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedUserSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedUserSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserSettingsBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<ChannelSettings> _channels;
        private System.Collections.Generic.List<ChartSettings> _charts;
        private LabelDefinitions _labelDefinitions;
    
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChannelSettings> Channels
        {
            get { return _channels; }
            set
            {
                if (_channels != value)
                {
                    _channels = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("charts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChartSettings> Charts
        {
            get { return _charts; }
            set
            {
                if (_charts != value)
                {
                    _charts = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labelDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelDefinitions LabelDefinitions
        {
            get { return _labelDefinitions; }
            set
            {
                if (_labelDefinitions != value)
                {
                    _labelDefinitions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UserSettingsBuilder FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSettingsBuilder>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetWorksheetQueryResult : System.ComponentModel.INotifyPropertyChanged
    {
        private Worksheet _worksheet;
        private DocumentUserInformation _userInformation;
    
        [Newtonsoft.Json.JsonProperty("worksheet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Worksheet Worksheet
        {
            get { return _worksheet; }
            set
            {
                if (_worksheet != value)
                {
                    _worksheet = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentUserInformation UserInformation
        {
            get { return _userInformation; }
            set
            {
                if (_userInformation != value)
                {
                    _userInformation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GetWorksheetQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetWorksheetQueryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Worksheet : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _userId;
        private string _worksheetId;
        private string _name;
        private WorksheetOutline _outline;
        private CollatedWorksheetLabels _resolvedLabels;
        private WorksheetResolvedReferences _resolvedReferences;
        private SupportSession _supportSession;
        private object _properties;
        private string _notes;
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("worksheetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorksheetId
        {
            get { return _worksheetId; }
            set
            {
                if (_worksheetId != value)
                {
                    _worksheetId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorksheetOutline Outline
        {
            get { return _outline; }
            set
            {
                if (_outline != value)
                {
                    _outline = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("resolvedLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollatedWorksheetLabels ResolvedLabels
        {
            get { return _resolvedLabels; }
            set
            {
                if (_resolvedLabels != value)
                {
                    _resolvedLabels = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("resolvedReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorksheetResolvedReferences ResolvedReferences
        {
            get { return _resolvedReferences; }
            set
            {
                if (_resolvedReferences != value)
                {
                    _resolvedReferences = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportSession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupportSession SupportSession
        {
            get { return _supportSession; }
            set
            {
                if (_supportSession != value)
                {
                    _supportSession = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static Worksheet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Worksheet>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WorksheetOutline : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<WorksheetRow> _rows;
        private LabelDefinitions _labelDefinitions;
    
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<WorksheetRow> Rows
        {
            get { return _rows; }
            set
            {
                if (_rows != value)
                {
                    _rows = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labelDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelDefinitions LabelDefinitions
        {
            get { return _labelDefinitions; }
            set
            {
                if (_labelDefinitions != value)
                {
                    _labelDefinitions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static WorksheetOutline FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorksheetOutline>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CollatedWorksheetLabels : System.ComponentModel.INotifyPropertyChanged
    {
        private CollatedLabelDefinitions _labelDefinitions;
        private System.Collections.Generic.List<ConfigResolvedLabels> _configs;
        private System.Collections.Generic.List<StudyResolvedLabels> _studies;
    
        [Newtonsoft.Json.JsonProperty("labelDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollatedLabelDefinitions LabelDefinitions
        {
            get { return _labelDefinitions; }
            set
            {
                if (_labelDefinitions != value)
                {
                    _labelDefinitions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ConfigResolvedLabels> Configs
        {
            get { return _configs; }
            set
            {
                if (_configs != value)
                {
                    _configs = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("studies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StudyResolvedLabels> Studies
        {
            get { return _studies; }
            set
            {
                if (_studies != value)
                {
                    _studies = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static CollatedWorksheetLabels FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollatedWorksheetLabels>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WorksheetResolvedReferences : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<ConfigResolvedReference> _configs;
        private System.Collections.Generic.List<StudyResolvedReference> _studies;
    
        [Newtonsoft.Json.JsonProperty("configs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ConfigResolvedReference> Configs
        {
            get { return _configs; }
            set
            {
                if (_configs != value)
                {
                    _configs = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("studies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StudyResolvedReference> Studies
        {
            get { return _studies; }
            set
            {
                if (_studies != value)
                {
                    _studies = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static WorksheetResolvedReferences FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorksheetResolvedReferences>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WorksheetRow : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private System.Collections.Generic.List<WorksheetConfig> _configs;
        private WorksheetStudy _study;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<WorksheetConfig> Configs
        {
            get { return _configs; }
            set
            {
                if (_configs != value)
                {
                    _configs = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("study", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorksheetStudy Study
        {
            get { return _study; }
            set
            {
                if (_study != value)
                {
                    _study = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static WorksheetRow FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorksheetRow>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CollatedLabelDefinitions : System.ComponentModel.INotifyPropertyChanged
    {
        private LabelDefinitions _worksheet;
        private LabelDefinitions _user;
        private LabelDefinitions _tenant;
    
        [Newtonsoft.Json.JsonProperty("worksheet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelDefinitions Worksheet
        {
            get { return _worksheet; }
            set
            {
                if (_worksheet != value)
                {
                    _worksheet = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelDefinitions User
        {
            get { return _user; }
            set
            {
                if (_user != value)
                {
                    _user = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelDefinitions Tenant
        {
            get { return _tenant; }
            set
            {
                if (_tenant != value)
                {
                    _tenant = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static CollatedLabelDefinitions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollatedLabelDefinitions>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfigResolvedLabels : System.ComponentModel.INotifyPropertyChanged
    {
        private ConfigReference _reference;
        private System.Collections.Generic.List<ConfigHash> _hashes;
        private System.Collections.Generic.List<ResolvedLabel> _resolvedLabels;
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigReference Reference
        {
            get { return _reference; }
            set
            {
                if (_reference != value)
                {
                    _reference = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ConfigHash> Hashes
        {
            get { return _hashes; }
            set
            {
                if (_hashes != value)
                {
                    _hashes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("resolvedLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ResolvedLabel> ResolvedLabels
        {
            get { return _resolvedLabels; }
            set
            {
                if (_resolvedLabels != value)
                {
                    _resolvedLabels = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ConfigResolvedLabels FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigResolvedLabels>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyResolvedLabels : System.ComponentModel.INotifyPropertyChanged
    {
        private StudyReference _reference;
        private System.Collections.Generic.List<SimulationResolvedLabels> _simulationLabels;
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyReference Reference
        {
            get { return _reference; }
            set
            {
                if (_reference != value)
                {
                    _reference = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simulationLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SimulationResolvedLabels> SimulationLabels
        {
            get { return _simulationLabels; }
            set
            {
                if (_simulationLabels != value)
                {
                    _simulationLabels = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyResolvedLabels FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyResolvedLabels>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfigResolvedReference : System.ComponentModel.INotifyPropertyChanged
    {
        private ConfigReference _reference;
        private ConfigResolvedReferenceData _data;
        private string _error;
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigReference Reference
        {
            get { return _reference; }
            set
            {
                if (_reference != value)
                {
                    _reference = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigResolvedReferenceData Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ConfigResolvedReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigResolvedReference>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyResolvedReference : System.ComponentModel.INotifyPropertyChanged
    {
        private StudyReference _reference;
        private StudyResolvedReferenceData _data;
        private string _error;
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyReference Reference
        {
            get { return _reference; }
            set
            {
                if (_reference != value)
                {
                    _reference = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyResolvedReferenceData Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyResolvedReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyResolvedReference>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WorksheetConfig : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private ConfigReference _reference;
        private bool? _inheritReference;
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigReference Reference
        {
            get { return _reference; }
            set
            {
                if (_reference != value)
                {
                    _reference = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inheritReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InheritReference
        {
            get { return _inheritReference; }
            set
            {
                if (_inheritReference != value)
                {
                    _inheritReference = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static WorksheetConfig FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorksheetConfig>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WorksheetStudy : System.ComponentModel.INotifyPropertyChanged
    {
        private StudyReference _reference;
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyReference Reference
        {
            get { return _reference; }
            set
            {
                if (_reference != value)
                {
                    _reference = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static WorksheetStudy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorksheetStudy>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfigReference : System.ComponentModel.INotifyPropertyChanged
    {
        private TenantConfigReference _tenant;
        private DefaultConfigReference _default;
    
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenantConfigReference Tenant
        {
            get { return _tenant; }
            set
            {
                if (_tenant != value)
                {
                    _tenant = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DefaultConfigReference Default
        {
            get { return _default; }
            set
            {
                if (_default != value)
                {
                    _default = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ConfigReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigReference>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfigHash : System.ComponentModel.INotifyPropertyChanged
    {
        private string _hash;
        private System.Collections.Generic.List<string> _hashSimVersions;
    
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash
        {
            get { return _hash; }
            set
            {
                if (_hash != value)
                {
                    _hash = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hashSimVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> HashSimVersions
        {
            get { return _hashSimVersions; }
            set
            {
                if (_hashSimVersions != value)
                {
                    _hashSimVersions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ConfigHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigHash>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ResolvedLabel : System.ComponentModel.INotifyPropertyChanged
    {
        private string _source;
        private string _name;
        private string _stringValue;
        private double? _numericValue;
        private ResolvedStatisticLabel _numericStatistics;
        private string _units;
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source
        {
            get { return _source; }
            set
            {
                if (_source != value)
                {
                    _source = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("stringValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StringValue
        {
            get { return _stringValue; }
            set
            {
                if (_stringValue != value)
                {
                    _stringValue = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numericValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumericValue
        {
            get { return _numericValue; }
            set
            {
                if (_numericValue != value)
                {
                    _numericValue = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("numericStatistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResolvedStatisticLabel NumericStatistics
        {
            get { return _numericStatistics; }
            set
            {
                if (_numericStatistics != value)
                {
                    _numericStatistics = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units
        {
            get { return _units; }
            set
            {
                if (_units != value)
                {
                    _units = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ResolvedLabel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResolvedLabel>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyReference : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _targetId;
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("targetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetId
        {
            get { return _targetId; }
            set
            {
                if (_targetId != value)
                {
                    _targetId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyReference>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SimulationResolvedLabels : System.ComponentModel.INotifyPropertyChanged
    {
        private SimulationResolvedLabelsSimType? _simType;
        private System.Collections.Generic.List<ResolvedLabel> _resolvedLabels;
    
        [Newtonsoft.Json.JsonProperty("simType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SimulationResolvedLabelsSimType? SimType
        {
            get { return _simType; }
            set
            {
                if (_simType != value)
                {
                    _simType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("resolvedLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ResolvedLabel> ResolvedLabels
        {
            get { return _resolvedLabels; }
            set
            {
                if (_resolvedLabels != value)
                {
                    _resolvedLabels = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SimulationResolvedLabels FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationResolvedLabels>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfigResolvedReferenceData : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTime? _modifiedDate;
        private string _userId;
        private string _name;
        private string _configType;
        private System.Collections.Generic.List<ConfigHash> _hashes;
        private bool? _isSupportSessionOpen;
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    _modifiedDate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ConfigHash> Hashes
        {
            get { return _hashes; }
            set
            {
                if (_hashes != value)
                {
                    _hashes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isSupportSessionOpen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSupportSessionOpen
        {
            get { return _isSupportSessionOpen; }
            set
            {
                if (_isSupportSessionOpen != value)
                {
                    _isSupportSessionOpen = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ConfigResolvedReferenceData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigResolvedReferenceData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyResolvedReferenceData : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTime? _creationDate;
        private System.DateTime? _modifiedDate;
        private string _userId;
        private string _name;
        private StudyDocument _studyDocument;
        private System.Collections.Generic.List<StudyInputHashes> _inputHashes;
        private System.Collections.Generic.List<SimTypes4> _simTypes;
        private string _simVersion;
        private bool? _isSupportSessionOpen;
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    _modifiedDate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("studyDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudyDocument StudyDocument
        {
            get { return _studyDocument; }
            set
            {
                if (_studyDocument != value)
                {
                    _studyDocument = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inputHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StudyInputHashes> InputHashes
        {
            get { return _inputHashes; }
            set
            {
                if (_inputHashes != value)
                {
                    _inputHashes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<SimTypes4> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isSupportSessionOpen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSupportSessionOpen
        {
            get { return _isSupportSessionOpen; }
            set
            {
                if (_isSupportSessionOpen != value)
                {
                    _isSupportSessionOpen = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyResolvedReferenceData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyResolvedReferenceData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TenantConfigReference : System.ComponentModel.INotifyPropertyChanged
    {
        private string _tenantId;
        private string _targetId;
        private int? _jobIndex;
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("targetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetId
        {
            get { return _targetId; }
            set
            {
                if (_targetId != value)
                {
                    _targetId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("jobIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? JobIndex
        {
            get { return _jobIndex; }
            set
            {
                if (_jobIndex != value)
                {
                    _jobIndex = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static TenantConfigReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TenantConfigReference>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DefaultConfigReference : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DefaultConfigReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultConfigReference>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ResolvedStatisticLabel : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _minimum;
        private double? _maximum;
        private double? _mean;
    
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Minimum
        {
            get { return _minimum; }
            set
            {
                if (_minimum != value)
                {
                    _minimum = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Maximum
        {
            get { return _maximum; }
            set
            {
                if (_maximum != value)
                {
                    _maximum = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Mean
        {
            get { return _mean; }
            set
            {
                if (_mean != value)
                {
                    _mean = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ResolvedStatisticLabel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResolvedStatisticLabel>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyDocument : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<string> _errorMessages;
        private int? _jobCount;
        private int? _dispatchedJobCount;
        private int? _completedJobCount;
        private int? _succeededJobCount;
        private double? _dispatchedComputeCredits;
        private double? _completedComputeCredits;
        private double? _succeededComputeCredits;
        private double? _dispatchedStorageCredits;
        private double? _completedStorageCredits;
        private double? _succeededStorageCredits;
        private int? _succeededSimulationCount;
        private int? _seed;
        private bool? _isTransient;
        private double? _executionTimeSeconds;
        private StudyDocumentStudyType? _studyType;
        private StudyDocumentStudyState? _studyState;
        private System.Collections.Generic.List<StudyDocumentStudyDocumentDataSource> _sources;
        private object _definition;
        private System.Collections.Generic.List<int> _shardDispatchedJobCounts;
        private System.Collections.Generic.List<double> _shardDispatchedComputeCredits;
        private System.Collections.Generic.List<double> _shardDispatchedStorageCredits;
    
        [Newtonsoft.Json.JsonProperty("errorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ErrorMessages
        {
            get { return _errorMessages; }
            set
            {
                if (_errorMessages != value)
                {
                    _errorMessages = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("jobCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? JobCount
        {
            get { return _jobCount; }
            set
            {
                if (_jobCount != value)
                {
                    _jobCount = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dispatchedJobCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DispatchedJobCount
        {
            get { return _dispatchedJobCount; }
            set
            {
                if (_dispatchedJobCount != value)
                {
                    _dispatchedJobCount = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completedJobCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompletedJobCount
        {
            get { return _completedJobCount; }
            set
            {
                if (_completedJobCount != value)
                {
                    _completedJobCount = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("succeededJobCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SucceededJobCount
        {
            get { return _succeededJobCount; }
            set
            {
                if (_succeededJobCount != value)
                {
                    _succeededJobCount = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dispatchedComputeCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DispatchedComputeCredits
        {
            get { return _dispatchedComputeCredits; }
            set
            {
                if (_dispatchedComputeCredits != value)
                {
                    _dispatchedComputeCredits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completedComputeCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CompletedComputeCredits
        {
            get { return _completedComputeCredits; }
            set
            {
                if (_completedComputeCredits != value)
                {
                    _completedComputeCredits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("succeededComputeCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SucceededComputeCredits
        {
            get { return _succeededComputeCredits; }
            set
            {
                if (_succeededComputeCredits != value)
                {
                    _succeededComputeCredits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dispatchedStorageCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DispatchedStorageCredits
        {
            get { return _dispatchedStorageCredits; }
            set
            {
                if (_dispatchedStorageCredits != value)
                {
                    _dispatchedStorageCredits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("completedStorageCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CompletedStorageCredits
        {
            get { return _completedStorageCredits; }
            set
            {
                if (_completedStorageCredits != value)
                {
                    _completedStorageCredits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("succeededStorageCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SucceededStorageCredits
        {
            get { return _succeededStorageCredits; }
            set
            {
                if (_succeededStorageCredits != value)
                {
                    _succeededStorageCredits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("succeededSimulationCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SucceededSimulationCount
        {
            get { return _succeededSimulationCount; }
            set
            {
                if (_succeededSimulationCount != value)
                {
                    _succeededSimulationCount = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("seed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seed
        {
            get { return _seed; }
            set
            {
                if (_seed != value)
                {
                    _seed = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isTransient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTransient
        {
            get { return _isTransient; }
            set
            {
                if (_isTransient != value)
                {
                    _isTransient = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("executionTimeSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExecutionTimeSeconds
        {
            get { return _executionTimeSeconds; }
            set
            {
                if (_executionTimeSeconds != value)
                {
                    _executionTimeSeconds = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("studyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StudyDocumentStudyType? StudyType
        {
            get { return _studyType; }
            set
            {
                if (_studyType != value)
                {
                    _studyType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("studyState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StudyDocumentStudyState? StudyState
        {
            get { return _studyState; }
            set
            {
                if (_studyState != value)
                {
                    _studyState = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StudyDocumentStudyDocumentDataSource> Sources
        {
            get { return _sources; }
            set
            {
                if (_sources != value)
                {
                    _sources = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Definition
        {
            get { return _definition; }
            set
            {
                if (_definition != value)
                {
                    _definition = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shardDispatchedJobCounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> ShardDispatchedJobCounts
        {
            get { return _shardDispatchedJobCounts; }
            set
            {
                if (_shardDispatchedJobCounts != value)
                {
                    _shardDispatchedJobCounts = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shardDispatchedComputeCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> ShardDispatchedComputeCredits
        {
            get { return _shardDispatchedComputeCredits; }
            set
            {
                if (_shardDispatchedComputeCredits != value)
                {
                    _shardDispatchedComputeCredits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shardDispatchedStorageCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> ShardDispatchedStorageCredits
        {
            get { return _shardDispatchedStorageCredits; }
            set
            {
                if (_shardDispatchedStorageCredits != value)
                {
                    _shardDispatchedStorageCredits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyDocument>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyInputHashes : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private System.Collections.Generic.List<StudyInputHash> _hashes;
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StudyInputHash> Hashes
        {
            get { return _hashes; }
            set
            {
                if (_hashes != value)
                {
                    _hashes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyInputHashes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyInputHashes>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyDocumentStudyDocumentDataSource : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private string _userId;
        private string _configId;
        private string _name;
        private bool? _isEdited;
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigId
        {
            get { return _configId; }
            set
            {
                if (_configId != value)
                {
                    _configId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isEdited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEdited
        {
            get { return _isEdited; }
            set
            {
                if (_isEdited != value)
                {
                    _isEdited = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyDocumentStudyDocumentDataSource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyDocumentStudyDocumentDataSource>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyInputHash : System.ComponentModel.INotifyPropertyChanged
    {
        private string _hash;
        private System.Collections.Generic.List<string> _hashSimVersions;
    
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash
        {
            get { return _hash; }
            set
            {
                if (_hash != value)
                {
                    _hash = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hashSimVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> HashSimVersions
        {
            get { return _hashSimVersions; }
            set
            {
                if (_hashSimVersions != value)
                {
                    _hashSimVersions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StudyInputHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StudyInputHash>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdatedWorksheetData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private System.Collections.Generic.List<DocumentCustomPropertyData> _properties;
        private WorksheetOutline _outline;
        private string _notes;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorksheetOutline Outline
        {
            get { return _outline; }
            set
            {
                if (_outline != value)
                {
                    _outline = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdatedWorksheetData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedWorksheetData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NewWorksheetData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private System.Collections.Generic.List<DocumentCustomPropertyData> _properties;
        private WorksheetOutline _outline;
        private string _notes;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorksheetOutline Outline
        {
            get { return _outline; }
            set
            {
                if (_outline != value)
                {
                    _outline = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static NewWorksheetData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewWorksheetData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DuplicateConfigsData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sourceTenantId;
        private string _sourceWorksheetId;
        private System.Collections.Generic.List<string> _sourceConfigIds;
        private System.Collections.Generic.List<DefaultConfigId> _sourceDefaultConfigIds;
    
        [Newtonsoft.Json.JsonProperty("sourceTenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceTenantId
        {
            get { return _sourceTenantId; }
            set
            {
                if (_sourceTenantId != value)
                {
                    _sourceTenantId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sourceWorksheetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceWorksheetId
        {
            get { return _sourceWorksheetId; }
            set
            {
                if (_sourceWorksheetId != value)
                {
                    _sourceWorksheetId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sourceConfigIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SourceConfigIds
        {
            get { return _sourceConfigIds; }
            set
            {
                if (_sourceConfigIds != value)
                {
                    _sourceConfigIds = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sourceDefaultConfigIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DefaultConfigId> SourceDefaultConfigIds
        {
            get { return _sourceDefaultConfigIds; }
            set
            {
                if (_sourceDefaultConfigIds != value)
                {
                    _sourceDefaultConfigIds = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DuplicateConfigsData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateConfigsData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DefaultConfigId : System.ComponentModel.INotifyPropertyChanged
    {
        private string _configType;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("configType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DefaultConfigId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultConfigId>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DuplicateConfigsResult : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<string> _targetConfigIds;
        private System.Collections.Generic.List<string> _targetDefaultConfigIds;
    
        [Newtonsoft.Json.JsonProperty("targetConfigIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> TargetConfigIds
        {
            get { return _targetConfigIds; }
            set
            {
                if (_targetConfigIds != value)
                {
                    _targetConfigIds = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("targetDefaultConfigIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> TargetDefaultConfigIds
        {
            get { return _targetDefaultConfigIds; }
            set
            {
                if (_targetDefaultConfigIds != value)
                {
                    _targetDefaultConfigIds = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static DuplicateConfigsResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateConfigsResult>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CanopyDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"automatedTest")]
        AutomatedTest = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"config")]
        Config = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"study")]
        Study = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tenantSettings")]
        TenantSettings = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"adminTenantSettings")]
        AdminTenantSettings = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"configSubTree")]
        ConfigSubTree = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"userSettings")]
        UserSettings = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"job")]
        Job = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ListFilterOrderByProperty
    {
        [System.Runtime.Serialization.EnumMember(Value = @"creationDate")]
        CreationDate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"modifiedDate")]
        ModifiedDate = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"index")]
        Index = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"state")]
        State = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ListFilterGroupOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ListFilterConditionOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"equals")]
        Equals = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"notEquals")]
        NotEquals = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lessThan")]
        LessThan = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"greaterThan")]
        GreaterThan = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lessThanOrEquals")]
        LessThanOrEquals = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"greaterThanOrEquals")]
        GreaterThanOrEquals = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"exists")]
        Exists = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"notExists")]
        NotExists = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum GetPoolStatusQueryResultPoolState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"deleting")]
        Deleting = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"upgrading")]
        Upgrading = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum GetPoolStatusQueryResultAllocationState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"steady")]
        Steady = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"resizing")]
        Resizing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"stopping")]
        Stopping = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ComputeNodeResultState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"idle")]
        Idle = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rebooting")]
        Rebooting = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"reimaging")]
        Reimaging = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"running")]
        Running = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unusable")]
        Unusable = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"creating")]
        Creating = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"starting")]
        Starting = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"waitingForStartTask")]
        WaitingForStartTask = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"startTaskFailed")]
        StartTaskFailed = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"leavingPool")]
        LeavingPool = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"offline")]
        Offline = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"preempted")]
        Preempted = 12,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StudyTypeDefinitionStudyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"straightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"apexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"generateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"deploymentLap")]
        DeploymentLap = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failureSim")]
        FailureSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"successSim")]
        SuccessSim = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"virtual4Post")]
        Virtual4Post = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"limitSim")]
        LimitSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"driveCycleSim")]
        DriveCycleSim = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLap")]
        DynamicLap = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapWithSLS")]
        DynamicLapWithSLS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapHD")]
        DynamicLapHD = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicMultiLap")]
        DynamicMultiLap = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicLap")]
        TyreThermalDynamicLap = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"overtakingLap")]
        OvertakingLap = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"allLapSims")]
        AllLapSims = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dragSim")]
        DragSim = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thermalReplay")]
        ThermalReplay = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreReplay")]
        TyreReplay = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pacejkaCanopyConverter")]
        PacejkaCanopyConverter = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"aircraftSim")]
        AircraftSim = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"channelInference")]
        ChannelInference = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"telemetry")]
        Telemetry = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadCollocation")]
        IliadCollocation = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"subLimitSim")]
        SubLimitSim = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankedLimitSim")]
        BankedLimitSim = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"postProcessUserMaths")]
        PostProcessUserMaths = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"trackConverter")]
        TrackConverter = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 31,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SimTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"StraightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QuasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenerateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentLap")]
        DeploymentLap = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FailureSim")]
        FailureSim = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SuccessSim")]
        SuccessSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtual4Post")]
        Virtual4Post = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitSim")]
        LimitSim = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DriveCycleSim")]
        DriveCycleSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLap")]
        DynamicLap = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DragSim")]
        DragSim = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicMultiLap")]
        DynamicMultiLap = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThermalReplay")]
        ThermalReplay = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreReplay")]
        TyreReplay = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PacejkaCanopyConverter")]
        PacejkaCanopyConverter = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AircraftSim")]
        AircraftSim = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChannelInference")]
        ChannelInference = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OvertakingLap")]
        OvertakingLap = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicLap")]
        TyreThermalDynamicLap = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapWithSLS")]
        DynamicLapWithSLS = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapHD")]
        DynamicLapHD = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IliadCollocation")]
        IliadCollocation = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubLimitSim")]
        SubLimitSim = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BankedLimitSim")]
        BankedLimitSim = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConstraintSatisfier")]
        ConstraintSatisfier = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostProcessUserMaths")]
        PostProcessUserMaths = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TrackConverter")]
        TrackConverter = 29,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StudyTypeDefinitionPoolType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"secondary")]
        Secondary = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"heavy")]
        Heavy = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"studyMonitor")]
        StudyMonitor = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StudyTypeDefinitionBuildPoolType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"secondary")]
        Secondary = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"heavy")]
        Heavy = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"studyMonitor")]
        StudyMonitor = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StudyTypeDefinitionState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"enabled")]
        Enabled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ImplicitSimTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"StraightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QuasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenerateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentLap")]
        DeploymentLap = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FailureSim")]
        FailureSim = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SuccessSim")]
        SuccessSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtual4Post")]
        Virtual4Post = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitSim")]
        LimitSim = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DriveCycleSim")]
        DriveCycleSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLap")]
        DynamicLap = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DragSim")]
        DragSim = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicMultiLap")]
        DynamicMultiLap = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThermalReplay")]
        ThermalReplay = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreReplay")]
        TyreReplay = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PacejkaCanopyConverter")]
        PacejkaCanopyConverter = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AircraftSim")]
        AircraftSim = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChannelInference")]
        ChannelInference = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OvertakingLap")]
        OvertakingLap = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicLap")]
        TyreThermalDynamicLap = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapWithSLS")]
        DynamicLapWithSLS = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapHD")]
        DynamicLapHD = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IliadCollocation")]
        IliadCollocation = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubLimitSim")]
        SubLimitSim = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BankedLimitSim")]
        BankedLimitSim = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConstraintSatisfier")]
        ConstraintSatisfier = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostProcessUserMaths")]
        PostProcessUserMaths = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TrackConverter")]
        TrackConverter = 29,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SimTypeDefinitionSimType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"StraightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QuasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenerateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentLap")]
        DeploymentLap = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FailureSim")]
        FailureSim = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SuccessSim")]
        SuccessSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtual4Post")]
        Virtual4Post = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitSim")]
        LimitSim = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DriveCycleSim")]
        DriveCycleSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLap")]
        DynamicLap = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DragSim")]
        DragSim = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicMultiLap")]
        DynamicMultiLap = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThermalReplay")]
        ThermalReplay = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreReplay")]
        TyreReplay = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PacejkaCanopyConverter")]
        PacejkaCanopyConverter = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AircraftSim")]
        AircraftSim = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChannelInference")]
        ChannelInference = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OvertakingLap")]
        OvertakingLap = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicLap")]
        TyreThermalDynamicLap = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapWithSLS")]
        DynamicLapWithSLS = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapHD")]
        DynamicLapHD = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IliadCollocation")]
        IliadCollocation = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubLimitSim")]
        SubLimitSim = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BankedLimitSim")]
        BankedLimitSim = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConstraintSatisfier")]
        ConstraintSatisfier = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostProcessUserMaths")]
        PostProcessUserMaths = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TrackConverter")]
        TrackConverter = 29,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SimTypeDefinitionState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"enabled")]
        Enabled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ConfigTypeDefinitionState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"enabled")]
        Enabled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ValidSourceSimTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"StraightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QuasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenerateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentLap")]
        DeploymentLap = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FailureSim")]
        FailureSim = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SuccessSim")]
        SuccessSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtual4Post")]
        Virtual4Post = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitSim")]
        LimitSim = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DriveCycleSim")]
        DriveCycleSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLap")]
        DynamicLap = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DragSim")]
        DragSim = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicMultiLap")]
        DynamicMultiLap = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThermalReplay")]
        ThermalReplay = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreReplay")]
        TyreReplay = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PacejkaCanopyConverter")]
        PacejkaCanopyConverter = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AircraftSim")]
        AircraftSim = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChannelInference")]
        ChannelInference = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OvertakingLap")]
        OvertakingLap = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicLap")]
        TyreThermalDynamicLap = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapWithSLS")]
        DynamicLapWithSLS = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapHD")]
        DynamicLapHD = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IliadCollocation")]
        IliadCollocation = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubLimitSim")]
        SubLimitSim = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BankedLimitSim")]
        BankedLimitSim = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConstraintSatisfier")]
        ConstraintSatisfier = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostProcessUserMaths")]
        PostProcessUserMaths = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TrackConverter")]
        TrackConverter = 29,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NewStudyDataStudyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"straightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"apexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"generateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"deploymentLap")]
        DeploymentLap = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failureSim")]
        FailureSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"successSim")]
        SuccessSim = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"virtual4Post")]
        Virtual4Post = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"limitSim")]
        LimitSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"driveCycleSim")]
        DriveCycleSim = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLap")]
        DynamicLap = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapWithSLS")]
        DynamicLapWithSLS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapHD")]
        DynamicLapHD = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicMultiLap")]
        DynamicMultiLap = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicLap")]
        TyreThermalDynamicLap = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"overtakingLap")]
        OvertakingLap = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"allLapSims")]
        AllLapSims = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dragSim")]
        DragSim = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thermalReplay")]
        ThermalReplay = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreReplay")]
        TyreReplay = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pacejkaCanopyConverter")]
        PacejkaCanopyConverter = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"aircraftSim")]
        AircraftSim = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"channelInference")]
        ChannelInference = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"telemetry")]
        Telemetry = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadCollocation")]
        IliadCollocation = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"subLimitSim")]
        SubLimitSim = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankedLimitSim")]
        BankedLimitSim = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"postProcessUserMaths")]
        PostProcessUserMaths = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"trackConverter")]
        TrackConverter = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 31,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SimTypes2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"StraightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QuasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenerateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentLap")]
        DeploymentLap = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FailureSim")]
        FailureSim = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SuccessSim")]
        SuccessSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtual4Post")]
        Virtual4Post = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitSim")]
        LimitSim = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DriveCycleSim")]
        DriveCycleSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLap")]
        DynamicLap = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DragSim")]
        DragSim = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicMultiLap")]
        DynamicMultiLap = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThermalReplay")]
        ThermalReplay = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreReplay")]
        TyreReplay = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PacejkaCanopyConverter")]
        PacejkaCanopyConverter = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AircraftSim")]
        AircraftSim = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChannelInference")]
        ChannelInference = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OvertakingLap")]
        OvertakingLap = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicLap")]
        TyreThermalDynamicLap = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapWithSLS")]
        DynamicLapWithSLS = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapHD")]
        DynamicLapHD = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IliadCollocation")]
        IliadCollocation = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubLimitSim")]
        SubLimitSim = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BankedLimitSim")]
        BankedLimitSim = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConstraintSatisfier")]
        ConstraintSatisfier = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostProcessUserMaths")]
        PostProcessUserMaths = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TrackConverter")]
        TrackConverter = 29,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SimTypes3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"StraightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QuasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenerateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentLap")]
        DeploymentLap = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FailureSim")]
        FailureSim = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SuccessSim")]
        SuccessSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtual4Post")]
        Virtual4Post = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitSim")]
        LimitSim = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DriveCycleSim")]
        DriveCycleSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLap")]
        DynamicLap = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DragSim")]
        DragSim = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicMultiLap")]
        DynamicMultiLap = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThermalReplay")]
        ThermalReplay = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreReplay")]
        TyreReplay = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PacejkaCanopyConverter")]
        PacejkaCanopyConverter = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AircraftSim")]
        AircraftSim = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChannelInference")]
        ChannelInference = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OvertakingLap")]
        OvertakingLap = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicLap")]
        TyreThermalDynamicLap = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapWithSLS")]
        DynamicLapWithSLS = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapHD")]
        DynamicLapHD = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IliadCollocation")]
        IliadCollocation = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubLimitSim")]
        SubLimitSim = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BankedLimitSim")]
        BankedLimitSim = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConstraintSatisfier")]
        ConstraintSatisfier = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostProcessUserMaths")]
        PostProcessUserMaths = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TrackConverter")]
        TrackConverter = 29,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StudyTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"straightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"apexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"generateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"deploymentLap")]
        DeploymentLap = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failureSim")]
        FailureSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"successSim")]
        SuccessSim = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"virtual4Post")]
        Virtual4Post = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"limitSim")]
        LimitSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"driveCycleSim")]
        DriveCycleSim = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLap")]
        DynamicLap = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapWithSLS")]
        DynamicLapWithSLS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapHD")]
        DynamicLapHD = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicMultiLap")]
        DynamicMultiLap = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicLap")]
        TyreThermalDynamicLap = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"overtakingLap")]
        OvertakingLap = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"allLapSims")]
        AllLapSims = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dragSim")]
        DragSim = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thermalReplay")]
        ThermalReplay = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreReplay")]
        TyreReplay = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pacejkaCanopyConverter")]
        PacejkaCanopyConverter = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"aircraftSim")]
        AircraftSim = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"channelInference")]
        ChannelInference = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"telemetry")]
        Telemetry = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadCollocation")]
        IliadCollocation = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"subLimitSim")]
        SubLimitSim = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankedLimitSim")]
        BankedLimitSim = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"postProcessUserMaths")]
        PostProcessUserMaths = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"trackConverter")]
        TrackConverter = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 31,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DocumentTypeCustomPropertyGroupsTarget
    {
        [System.Runtime.Serialization.EnumMember(Value = @"car")]
        Car = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"track")]
        Track = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"weather")]
        Weather = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"exploration")]
        Exploration = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"virtual4PostOptions")]
        Virtual4PostOptions = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankedLimitSimOptions")]
        BankedLimitSimOptions = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"limitSimOptions")]
        LimitSimOptions = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"subLimitSimOptions")]
        SubLimitSimOptions = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thermalReplayOptions")]
        ThermalReplayOptions = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pacejkaTyres")]
        PacejkaTyres = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"channelInferenceOptions")]
        ChannelInferenceOptions = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"overtaking")]
        Overtaking = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"userMaths")]
        UserMaths = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"constraints")]
        Constraints = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"telemetry")]
        Telemetry = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"files")]
        Files = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"driveCycle")]
        DriveCycle = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"study")]
        Study = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"worksheet")]
        Worksheet = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"aircraft")]
        Aircraft = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadBoat")]
        IliadBoat = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadCollocationOptions")]
        IliadCollocationOptions = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadVppOptions")]
        IliadVppOptions = 22,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DefaultCustomPropertyNamesTarget
    {
        [System.Runtime.Serialization.EnumMember(Value = @"car")]
        Car = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"track")]
        Track = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"weather")]
        Weather = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"exploration")]
        Exploration = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"virtual4PostOptions")]
        Virtual4PostOptions = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankedLimitSimOptions")]
        BankedLimitSimOptions = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"limitSimOptions")]
        LimitSimOptions = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"subLimitSimOptions")]
        SubLimitSimOptions = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thermalReplayOptions")]
        ThermalReplayOptions = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pacejkaTyres")]
        PacejkaTyres = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"channelInferenceOptions")]
        ChannelInferenceOptions = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"overtaking")]
        Overtaking = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"userMaths")]
        UserMaths = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"constraints")]
        Constraints = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"telemetry")]
        Telemetry = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"files")]
        Files = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"driveCycle")]
        DriveCycle = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"study")]
        Study = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"worksheet")]
        Worksheet = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"aircraft")]
        Aircraft = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadBoat")]
        IliadBoat = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadCollocationOptions")]
        IliadCollocationOptions = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadVppOptions")]
        IliadVppOptions = 22,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SimulationColumnLabelDefinitionsSimType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"StraightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QuasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenerateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentLap")]
        DeploymentLap = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FailureSim")]
        FailureSim = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SuccessSim")]
        SuccessSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtual4Post")]
        Virtual4Post = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitSim")]
        LimitSim = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DriveCycleSim")]
        DriveCycleSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLap")]
        DynamicLap = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DragSim")]
        DragSim = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicMultiLap")]
        DynamicMultiLap = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThermalReplay")]
        ThermalReplay = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreReplay")]
        TyreReplay = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PacejkaCanopyConverter")]
        PacejkaCanopyConverter = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AircraftSim")]
        AircraftSim = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChannelInference")]
        ChannelInference = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OvertakingLap")]
        OvertakingLap = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicLap")]
        TyreThermalDynamicLap = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapWithSLS")]
        DynamicLapWithSLS = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapHD")]
        DynamicLapHD = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IliadCollocation")]
        IliadCollocation = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubLimitSim")]
        SubLimitSim = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BankedLimitSim")]
        BankedLimitSim = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConstraintSatisfier")]
        ConstraintSatisfier = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostProcessUserMaths")]
        PostProcessUserMaths = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TrackConverter")]
        TrackConverter = 29,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StudyTypes2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"straightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"apexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"generateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"deploymentLap")]
        DeploymentLap = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failureSim")]
        FailureSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"successSim")]
        SuccessSim = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"virtual4Post")]
        Virtual4Post = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"limitSim")]
        LimitSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"driveCycleSim")]
        DriveCycleSim = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLap")]
        DynamicLap = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapWithSLS")]
        DynamicLapWithSLS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapHD")]
        DynamicLapHD = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicMultiLap")]
        DynamicMultiLap = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicLap")]
        TyreThermalDynamicLap = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"overtakingLap")]
        OvertakingLap = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"allLapSims")]
        AllLapSims = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dragSim")]
        DragSim = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thermalReplay")]
        ThermalReplay = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreReplay")]
        TyreReplay = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pacejkaCanopyConverter")]
        PacejkaCanopyConverter = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"aircraftSim")]
        AircraftSim = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"channelInference")]
        ChannelInference = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"telemetry")]
        Telemetry = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadCollocation")]
        IliadCollocation = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"subLimitSim")]
        SubLimitSim = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankedLimitSim")]
        BankedLimitSim = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"postProcessUserMaths")]
        PostProcessUserMaths = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"trackConverter")]
        TrackConverter = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 31,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StudyTypes3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"straightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"apexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"generateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"deploymentLap")]
        DeploymentLap = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failureSim")]
        FailureSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"successSim")]
        SuccessSim = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"virtual4Post")]
        Virtual4Post = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"limitSim")]
        LimitSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"driveCycleSim")]
        DriveCycleSim = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLap")]
        DynamicLap = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapWithSLS")]
        DynamicLapWithSLS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapHD")]
        DynamicLapHD = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicMultiLap")]
        DynamicMultiLap = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicLap")]
        TyreThermalDynamicLap = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"overtakingLap")]
        OvertakingLap = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"allLapSims")]
        AllLapSims = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dragSim")]
        DragSim = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thermalReplay")]
        ThermalReplay = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreReplay")]
        TyreReplay = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pacejkaCanopyConverter")]
        PacejkaCanopyConverter = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"aircraftSim")]
        AircraftSim = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"channelInference")]
        ChannelInference = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"telemetry")]
        Telemetry = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadCollocation")]
        IliadCollocation = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"subLimitSim")]
        SubLimitSim = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankedLimitSim")]
        BankedLimitSim = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"postProcessUserMaths")]
        PostProcessUserMaths = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"trackConverter")]
        TrackConverter = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 31,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SimulationResolvedLabelsSimType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"StraightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QuasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenerateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentLap")]
        DeploymentLap = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FailureSim")]
        FailureSim = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SuccessSim")]
        SuccessSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtual4Post")]
        Virtual4Post = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitSim")]
        LimitSim = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DriveCycleSim")]
        DriveCycleSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLap")]
        DynamicLap = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DragSim")]
        DragSim = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicMultiLap")]
        DynamicMultiLap = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThermalReplay")]
        ThermalReplay = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreReplay")]
        TyreReplay = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PacejkaCanopyConverter")]
        PacejkaCanopyConverter = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AircraftSim")]
        AircraftSim = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChannelInference")]
        ChannelInference = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OvertakingLap")]
        OvertakingLap = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicLap")]
        TyreThermalDynamicLap = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapWithSLS")]
        DynamicLapWithSLS = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapHD")]
        DynamicLapHD = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IliadCollocation")]
        IliadCollocation = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubLimitSim")]
        SubLimitSim = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BankedLimitSim")]
        BankedLimitSim = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConstraintSatisfier")]
        ConstraintSatisfier = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostProcessUserMaths")]
        PostProcessUserMaths = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TrackConverter")]
        TrackConverter = 29,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SimTypes4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"StraightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QuasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenerateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentLap")]
        DeploymentLap = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FailureSim")]
        FailureSim = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SuccessSim")]
        SuccessSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtual4Post")]
        Virtual4Post = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitSim")]
        LimitSim = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DriveCycleSim")]
        DriveCycleSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLap")]
        DynamicLap = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DragSim")]
        DragSim = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicMultiLap")]
        DynamicMultiLap = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThermalReplay")]
        ThermalReplay = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreReplay")]
        TyreReplay = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PacejkaCanopyConverter")]
        PacejkaCanopyConverter = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AircraftSim")]
        AircraftSim = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChannelInference")]
        ChannelInference = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OvertakingLap")]
        OvertakingLap = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicLap")]
        TyreThermalDynamicLap = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapWithSLS")]
        DynamicLapWithSLS = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DynamicLapHD")]
        DynamicLapHD = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IliadCollocation")]
        IliadCollocation = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubLimitSim")]
        SubLimitSim = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BankedLimitSim")]
        BankedLimitSim = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConstraintSatisfier")]
        ConstraintSatisfier = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostProcessUserMaths")]
        PostProcessUserMaths = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TrackConverter")]
        TrackConverter = 29,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StudyDocumentStudyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"straightSim")]
        StraightSim = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"apexSim")]
        ApexSim = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLap")]
        QuasiStaticLap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"generateRacingLine")]
        GenerateRacingLine = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"quasiStaticLapWithGenerateRacingLine")]
        QuasiStaticLapWithGenerateRacingLine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"deploymentLap")]
        DeploymentLap = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failureSim")]
        FailureSim = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"successSim")]
        SuccessSim = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"virtual4Post")]
        Virtual4Post = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"limitSim")]
        LimitSim = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"driveCycleSim")]
        DriveCycleSim = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLap")]
        DynamicLap = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapWithSLS")]
        DynamicLapWithSLS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicLapHD")]
        DynamicLapHD = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dynamicMultiLap")]
        DynamicMultiLap = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicLap")]
        TyreThermalDynamicLap = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreThermalDynamicMultiLap")]
        TyreThermalDynamicMultiLap = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"overtakingLap")]
        OvertakingLap = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"allLapSims")]
        AllLapSims = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dragSim")]
        DragSim = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thermalReplay")]
        ThermalReplay = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tyreReplay")]
        TyreReplay = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pacejkaCanopyConverter")]
        PacejkaCanopyConverter = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"aircraftSim")]
        AircraftSim = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"channelInference")]
        ChannelInference = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"telemetry")]
        Telemetry = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iliadCollocation")]
        IliadCollocation = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"subLimitSim")]
        SubLimitSim = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankedLimitSim")]
        BankedLimitSim = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"postProcessUserMaths")]
        PostProcessUserMaths = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"trackConverter")]
        TrackConverter = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 31,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StudyDocumentStudyState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"running")]
        Running = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"buildingAndRunning")]
        BuildingAndRunning = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"posponed")]
        Posponed = 4,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CanopyApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public CanopyApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CanopyApiException<TResult> : CanopyApiException
    {
        public TResult Result { get; private set; }

        public CanopyApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108